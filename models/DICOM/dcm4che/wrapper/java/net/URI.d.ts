import { JavaClass, BasicOrJavaType } from "java-bridge";
import { URL as java_net_URL } from "./URL";
import { Long as java_lang_Long } from "./../lang/Long";
import { Integer as java_lang_Integer } from "./../lang/Integer";
import { Class as java_lang_Class } from "./../lang/Class";
/**
 * This class just defines types, you should import {@link URI} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class URIClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'java.net.URI'
     * @return original return type: 'int'
     */
    compareTo(var0: URIClass | null): Promise<number>;
    /**
     * @param var0 original type: 'java.net.URI'
     * @return original return type: 'int'
     */
    compareToSync(var0: URIClass | null): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareTo(var0: BasicOrJavaType | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareToSync(var0: BasicOrJavaType | null): number;
    /**
     * @return original return type: 'boolean'
     */
    isAbsolute(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isAbsoluteSync(): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.net.URI'
     */
    resolve(var0: string | null): Promise<URI | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.net.URI'
     */
    resolveSync(var0: string | null): URI | null;
    /**
     * @param var0 original type: 'java.net.URI'
     * @return original return type: 'java.net.URI'
     */
    resolve(var0: URIClass | null): Promise<URI | null>;
    /**
     * @param var0 original type: 'java.net.URI'
     * @return original return type: 'java.net.URI'
     */
    resolveSync(var0: URIClass | null): URI | null;
    /**
     * @return original return type: 'java.net.URI'
     */
    normalize(): Promise<URI | null>;
    /**
     * @return original return type: 'java.net.URI'
     */
    normalizeSync(): URI | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getScheme(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getSchemeSync(): string | null;
    /**
     * @return original return type: 'boolean'
     */
    isOpaque(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isOpaqueSync(): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    getRawFragment(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getRawFragmentSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getRawQuery(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getRawQuerySync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getRawPath(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getRawPathSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getHost(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getHostSync(): string | null;
    /**
     * @return original return type: 'int'
     */
    getPort(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getPortSync(): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.net.URI'
     */
    static create(var0: string | null): Promise<URI | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.net.URI'
     */
    static createSync(var0: string | null): URI | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getAuthority(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getAuthoritySync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getQuery(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getQuerySync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPath(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPathSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getUserInfo(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getUserInfoSync(): string | null;
    /**
     * @return original return type: 'java.net.URL'
     */
    toURL(): Promise<java_net_URL | null>;
    /**
     * @return original return type: 'java.net.URL'
     */
    toURLSync(): java_net_URL | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getRawAuthority(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getRawAuthoritySync(): string | null;
    /**
     * @param var0 original type: 'java.net.URI'
     * @return original return type: 'java.net.URI'
     */
    relativize(var0: URIClass | null): Promise<URI | null>;
    /**
     * @param var0 original type: 'java.net.URI'
     * @return original return type: 'java.net.URI'
     */
    relativizeSync(var0: URIClass | null): URI | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getRawSchemeSpecificPart(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getRawSchemeSpecificPartSync(): string | null;
    /**
     * @return original return type: 'java.net.URI'
     */
    parseServerAuthority(): Promise<URI | null>;
    /**
     * @return original return type: 'java.net.URI'
     */
    parseServerAuthoritySync(): URI | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getSchemeSpecificPart(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getSchemeSpecificPartSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getRawUserInfo(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getRawUserInfoSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getFragment(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getFragmentSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    toASCIIString(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toASCIIStringSync(): string | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.String'
     * @param var4 original type: 'java.lang.String'
     * @return original return type: 'java.net.URI'
     */
    static newInstance(var0: string | null, var1: string | null, var2: string | null, var3: string | null, var4: string | null): Promise<URI>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.String'
     * @return original return type: 'java.net.URI'
     */
    static newInstance(var0: string | null, var1: string | null, var2: string | null, var3: string | null): Promise<URI>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @return original return type: 'java.net.URI'
     */
    static newInstance(var0: string | null, var1: string | null, var2: string | null): Promise<URI>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.net.URI'
     */
    static newInstance(var0: string | null): Promise<URI>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'int'
     * @param var4 original type: 'java.lang.String'
     * @param var5 original type: 'java.lang.String'
     * @param var6 original type: 'java.lang.String'
     * @return original return type: 'java.net.URI'
     */
    static newInstance(var0: string | null, var1: string | null, var2: string | null, var3: java_lang_Integer | number, var4: string | null, var5: string | null, var6: string | null): Promise<URI>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.String'
     * @param var4 original type: 'java.lang.String'
     */
    constructor(var0: string | null, var1: string | null, var2: string | null, var3: string | null, var4: string | null);
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.String'
     */
    constructor(var0: string | null, var1: string | null, var2: string | null, var3: string | null);
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     */
    constructor(var0: string | null, var1: string | null, var2: string | null);
    /**
     * @param var0 original type: 'java.lang.String'
     */
    constructor(var0: string | null);
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'int'
     * @param var4 original type: 'java.lang.String'
     * @param var5 original type: 'java.lang.String'
     * @param var6 original type: 'java.lang.String'
     */
    constructor(var0: string | null, var1: string | null, var2: string | null, var3: java_lang_Integer | number, var4: string | null, var5: string | null, var6: string | null);
}
declare const URI_base: typeof URIClass;
/**
 * Class java.net.URI.
 *
 * This actually imports the java class for further use.
 * The class {@link URIClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class URI extends URI_base {
}
export default URI;
//# sourceMappingURL=URI.d.ts.map