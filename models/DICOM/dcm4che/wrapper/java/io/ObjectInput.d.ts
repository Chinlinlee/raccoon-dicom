/// <reference types="node" />
import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Integer as java_lang_Integer } from "./../lang/Integer";
import { Long as java_lang_Long } from "./../lang/Long";
/**
 * This class just defines types, you should import {@link ObjectInput} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ObjectInputClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.Object'
     */
    readObject(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    readObjectSync(): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    read(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    readSync(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'int'
     */
    read(var0: Buffer | null): Promise<number>;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'int'
     */
    readSync(var0: Buffer | null): number;
    /**
     * @return original return type: 'int'
     */
    read(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    readSync(): number;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'long'
     */
    skip(var0: java_lang_Long | bigint | number): Promise<number>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'long'
     */
    skipSync(var0: java_lang_Long | bigint | number): number;
    /**
     * @return original return type: 'int'
     */
    available(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    availableSync(): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    readLine(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    readLineSync(): string | null;
    /**
     * @return original return type: 'int'
     */
    readInt(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    readIntSync(): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    readUTF(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    readUTFSync(): string | null;
    /**
     * @return original return type: 'char'
     */
    readChar(): Promise<string | null>;
    /**
     * @return original return type: 'char'
     */
    readCharSync(): string | null;
    /**
     * @return original return type: 'float'
     */
    readFloat(): Promise<number>;
    /**
     * @return original return type: 'float'
     */
    readFloatSync(): number;
    /**
     * @return original return type: 'int'
     */
    readUnsignedShort(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    readUnsignedShortSync(): number;
    /**
     * @return original return type: 'long'
     */
    readLong(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    readLongSync(): number;
    /**
     * @return original return type: 'byte'
     */
    readByte(): Promise<number>;
    /**
     * @return original return type: 'byte'
     */
    readByteSync(): number;
    /**
     * @return original return type: 'short'
     */
    readShort(): Promise<number>;
    /**
     * @return original return type: 'short'
     */
    readShortSync(): number;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'void'
     */
    readFully(var0: Buffer | null): Promise<void>;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'void'
     */
    readFullySync(var0: Buffer | null): void;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFully(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFullySync(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    skipBytes(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    skipBytesSync(var0: java_lang_Integer | number): number;
    /**
     * @return original return type: 'boolean'
     */
    readBoolean(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    readBooleanSync(): boolean;
    /**
     * @return original return type: 'int'
     */
    readUnsignedByte(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    readUnsignedByteSync(): number;
    /**
     * @return original return type: 'double'
     */
    readDouble(): Promise<number>;
    /**
     * @return original return type: 'double'
     */
    readDoubleSync(): number;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createObjectInputProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface ObjectInputInterface {
    /**
     * @return original return type: 'java.lang.Object'
     */
    readObject(): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    read(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'int'
     */
    read(var0: Buffer | null): number;
    /**
     * @return original return type: 'int'
     */
    read(): number;
    /**
     * @return original return type: 'void'
     */
    close(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'long'
     */
    skip(var0: java_lang_Long | bigint | number): number;
    /**
     * @return original return type: 'int'
     */
    available(): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    readLine(): string | null;
    /**
     * @return original return type: 'int'
     */
    readInt(): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    readUTF(): string | null;
    /**
     * @return original return type: 'char'
     */
    readChar(): string | null;
    /**
     * @return original return type: 'float'
     */
    readFloat(): number;
    /**
     * @return original return type: 'int'
     */
    readUnsignedShort(): number;
    /**
     * @return original return type: 'long'
     */
    readLong(): number;
    /**
     * @return original return type: 'byte'
     */
    readByte(): number;
    /**
     * @return original return type: 'short'
     */
    readShort(): number;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'void'
     */
    readFully(var0: Buffer | null): void;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFully(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    skipBytes(var0: java_lang_Integer | number): number;
    /**
     * @return original return type: 'boolean'
     */
    readBoolean(): boolean;
    /**
     * @return original return type: 'int'
     */
    readUnsignedByte(): number;
    /**
     * @return original return type: 'double'
     */
    readDouble(): number;
}
/**
 * Create a proxy for the {@link ObjectInput} interface.
 * All required methods in {@link ObjectInputInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createObjectInputProxy(methods: ObjectInputInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<ObjectInputInterface>;
declare const ObjectInput_base: typeof ObjectInputClass;
/**
 * Class java.io.ObjectInput.
 *
 * This actually imports the java class for further use.
 * The class {@link ObjectInputClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ObjectInput extends ObjectInput_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default ObjectInput;
//# sourceMappingURL=ObjectInput.d.ts.map