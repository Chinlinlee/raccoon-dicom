/// <reference types="node" />
import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Integer as java_lang_Integer } from "./../lang/Integer";
import { Long as java_lang_Long } from "./../lang/Long";
import { FileDescriptor as java_io_FileDescriptor } from "./FileDescriptor";
import { FileChannel as java_nio_channels_FileChannel } from "./../nio/channels/FileChannel";
import { Float as java_lang_Float } from "./../lang/Float";
import { Boolean as java_lang_Boolean } from "./../lang/Boolean";
import { Double as java_lang_Double } from "./../lang/Double";
import { Class as java_lang_Class } from "./../lang/Class";
import { File as java_io_File } from "./File";
/**
 * This class just defines types, you should import {@link RandomAccessFile} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class RandomAccessFileClass extends JavaClass {
    /**
     * @return original return type: 'long'
     */
    length(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    lengthSync(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    write(var0: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    writeSync(var0: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    write(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    writeSync(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'void'
     */
    write(var0: Buffer | null): Promise<void>;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'void'
     */
    writeSync(var0: Buffer | null): void;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    read(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    readSync(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'int'
     */
    read(var0: Buffer | null): Promise<number>;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'int'
     */
    readSync(var0: Buffer | null): number;
    /**
     * @return original return type: 'int'
     */
    read(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    readSync(): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    readLine(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    readLineSync(): string | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    setLength(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    setLengthSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    writeInt(var0: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    writeIntSync(var0: java_lang_Integer | number): void;
    /**
     * @return original return type: 'int'
     */
    readInt(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    readIntSync(): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    writeUTF(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    writeUTFSync(var0: string | null): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    readUTF(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    readUTFSync(): string | null;
    /**
     * @return original return type: 'java.io.FileDescriptor'
     */
    getFD(): Promise<java_io_FileDescriptor | null>;
    /**
     * @return original return type: 'java.io.FileDescriptor'
     */
    getFDSync(): java_io_FileDescriptor | null;
    /**
     * @return original return type: 'java.nio.channels.FileChannel'
     */
    getChannel(): Promise<java_nio_channels_FileChannel | null>;
    /**
     * @return original return type: 'java.nio.channels.FileChannel'
     */
    getChannelSync(): java_nio_channels_FileChannel | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    writeBytes(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    writeBytesSync(var0: string | null): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    writeChar(var0: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    writeCharSync(var0: java_lang_Integer | number): void;
    /**
     * @return original return type: 'char'
     */
    readChar(): Promise<string | null>;
    /**
     * @return original return type: 'char'
     */
    readCharSync(): string | null;
    /**
     * @param var0 original type: 'float'
     * @return original return type: 'void'
     */
    writeFloat(var0: java_lang_Float | number): Promise<void>;
    /**
     * @param var0 original type: 'float'
     * @return original return type: 'void'
     */
    writeFloatSync(var0: java_lang_Float | number): void;
    /**
     * @return original return type: 'float'
     */
    readFloat(): Promise<number>;
    /**
     * @return original return type: 'float'
     */
    readFloatSync(): number;
    /**
     * @return original return type: 'int'
     */
    readUnsignedShort(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    readUnsignedShortSync(): number;
    /**
     * @return original return type: 'long'
     */
    readLong(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    readLongSync(): number;
    /**
     * @return original return type: 'byte'
     */
    readByte(): Promise<number>;
    /**
     * @return original return type: 'byte'
     */
    readByteSync(): number;
    /**
     * @return original return type: 'short'
     */
    readShort(): Promise<number>;
    /**
     * @return original return type: 'short'
     */
    readShortSync(): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    seek(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    seekSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFully(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFullySync(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'void'
     */
    readFully(var0: Buffer | null): Promise<void>;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'void'
     */
    readFullySync(var0: Buffer | null): void;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    writeBoolean(var0: java_lang_Boolean | boolean): Promise<void>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    writeBooleanSync(var0: java_lang_Boolean | boolean): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    writeByte(var0: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    writeByteSync(var0: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    writeShort(var0: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    writeShortSync(var0: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    writeLong(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    writeLongSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'void'
     */
    writeDouble(var0: java_lang_Double | number): Promise<void>;
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'void'
     */
    writeDoubleSync(var0: java_lang_Double | number): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    writeChars(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    writeCharsSync(var0: string | null): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    skipBytes(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    skipBytesSync(var0: java_lang_Integer | number): number;
    /**
     * @return original return type: 'boolean'
     */
    readBoolean(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    readBooleanSync(): boolean;
    /**
     * @return original return type: 'int'
     */
    readUnsignedByte(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    readUnsignedByteSync(): number;
    /**
     * @return original return type: 'double'
     */
    readDouble(): Promise<number>;
    /**
     * @return original return type: 'double'
     */
    readDoubleSync(): number;
    /**
     * @return original return type: 'long'
     */
    getFilePointer(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    getFilePointerSync(): number;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'java.io.File'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.io.RandomAccessFile'
     */
    static newInstanceAsync(var0: java_io_File | null, var1: string | null): Promise<RandomAccessFile>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.io.RandomAccessFile'
     */
    static newInstanceAsync(var0: string | null, var1: string | null): Promise<RandomAccessFile>;
    /**
     * @param var0 original type: 'java.io.File'
     * @param var1 original type: 'java.lang.String'
     */
    constructor(var0: java_io_File | null, var1: string | null);
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     */
    constructor(var0: string | null, var1: string | null);
}
declare const RandomAccessFile_base: typeof RandomAccessFileClass;
/**
 * Class java.io.RandomAccessFile.
 *
 * This actually imports the java class for further use.
 * The class {@link RandomAccessFileClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class RandomAccessFile extends RandomAccessFile_base {
}
export default RandomAccessFile;
//# sourceMappingURL=RandomAccessFile.d.ts.map