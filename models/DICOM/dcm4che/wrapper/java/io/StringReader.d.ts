import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Integer as java_lang_Integer } from "./../lang/Integer";
import { CharBuffer as java_nio_CharBuffer } from "./../nio/CharBuffer";
import { Long as java_lang_Long } from "./../lang/Long";
import { Writer as java_io_Writer } from "./Writer";
import { Reader as java_io_Reader } from "./Reader";
import { Class as java_lang_Class } from "./../lang/Class";
/**
 * This class just defines types, you should import {@link StringReader} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class StringReaderClass extends JavaClass {
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    read(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    readSync(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): number;
    /**
     * @return original return type: 'int'
     */
    read(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    readSync(): number;
    /**
     * @param var0 original type: 'char[]'
     * @return original return type: 'int'
     */
    read(var0: (string | null)[] | null): Promise<number>;
    /**
     * @param var0 original type: 'char[]'
     * @return original return type: 'int'
     */
    readSync(var0: (string | null)[] | null): number;
    /**
     * @param var0 original type: 'java.nio.CharBuffer'
     * @return original return type: 'int'
     */
    read(var0: java_nio_CharBuffer | null): Promise<number>;
    /**
     * @param var0 original type: 'java.nio.CharBuffer'
     * @return original return type: 'int'
     */
    readSync(var0: java_nio_CharBuffer | null): number;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    mark(var0: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    markSync(var0: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'long'
     */
    skip(var0: java_lang_Long | bigint | number): Promise<number>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'long'
     */
    skipSync(var0: java_lang_Long | bigint | number): number;
    /**
     * @return original return type: 'boolean'
     */
    markSupported(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    markSupportedSync(): boolean;
    /**
     * @return original return type: 'void'
     */
    reset(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    resetSync(): void;
    /**
     * @return original return type: 'boolean'
     */
    ready(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    readySync(): boolean;
    /**
     * @param var0 original type: 'java.io.Writer'
     * @return original return type: 'long'
     */
    transferTo(var0: java_io_Writer | null): Promise<number>;
    /**
     * @param var0 original type: 'java.io.Writer'
     * @return original return type: 'long'
     */
    transferToSync(var0: java_io_Writer | null): number;
    /**
     * @return original return type: 'java.io.Reader'
     */
    static nullReader(): Promise<java_io_Reader | null>;
    /**
     * @return original return type: 'java.io.Reader'
     */
    static nullReaderSync(): java_io_Reader | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.io.StringReader'
     */
    static newInstanceAsync(var0: string | null): Promise<StringReader>;
    /**
     * @param var0 original type: 'java.lang.String'
     */
    constructor(var0: string | null);
}
declare const StringReader_base: typeof StringReaderClass;
/**
 * Class java.io.StringReader.
 *
 * This actually imports the java class for further use.
 * The class {@link StringReaderClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class StringReader extends StringReader_base {
}
export default StringReader;
//# sourceMappingURL=StringReader.d.ts.map