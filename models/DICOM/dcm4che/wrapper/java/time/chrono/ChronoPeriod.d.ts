import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { TemporalUnit as java_time_temporal_TemporalUnit, TemporalUnitInterface as java_time_temporal_TemporalUnitInterface } from "./../temporal/TemporalUnit";
import { ChronoLocalDate as java_time_chrono_ChronoLocalDate, ChronoLocalDateInterface as java_time_chrono_ChronoLocalDateInterface } from "./ChronoLocalDate";
import { Chronology as java_time_chrono_Chronology } from "./Chronology";
import { TemporalAmount as java_time_temporal_TemporalAmount, TemporalAmountInterface as java_time_temporal_TemporalAmountInterface } from "./../temporal/TemporalAmount";
import { Temporal as java_time_temporal_Temporal, TemporalInterface as java_time_temporal_TemporalInterface } from "./../temporal/Temporal";
import { List as java_util_List } from "./../../util/List";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
/**
 * This class just defines types, you should import {@link ChronoPeriod} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ChronoPeriodClass extends JavaClass {
    /**
     * @param var0 original type: 'java.time.temporal.TemporalUnit'
     * @return original return type: 'long'
     */
    get(var0: java_time_temporal_TemporalUnit | JavaInterfaceProxy<java_time_temporal_TemporalUnitInterface> | null): Promise<number>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalUnit'
     * @return original return type: 'long'
     */
    getSync(var0: java_time_temporal_TemporalUnit | JavaInterfaceProxy<java_time_temporal_TemporalUnitInterface> | null): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.time.chrono.ChronoPeriod'
     */
    normalized(): Promise<ChronoPeriod | null>;
    /**
     * @return original return type: 'java.time.chrono.ChronoPeriod'
     */
    normalizedSync(): ChronoPeriod | null;
    /**
     * @param var0 original type: 'java.time.chrono.ChronoLocalDate'
     * @param var1 original type: 'java.time.chrono.ChronoLocalDate'
     * @return original return type: 'java.time.chrono.ChronoPeriod'
     */
    static between(var0: java_time_chrono_ChronoLocalDate | JavaInterfaceProxy<java_time_chrono_ChronoLocalDateInterface> | null, var1: java_time_chrono_ChronoLocalDate | JavaInterfaceProxy<java_time_chrono_ChronoLocalDateInterface> | null): Promise<ChronoPeriod | null>;
    /**
     * @param var0 original type: 'java.time.chrono.ChronoLocalDate'
     * @param var1 original type: 'java.time.chrono.ChronoLocalDate'
     * @return original return type: 'java.time.chrono.ChronoPeriod'
     */
    static betweenSync(var0: java_time_chrono_ChronoLocalDate | JavaInterfaceProxy<java_time_chrono_ChronoLocalDateInterface> | null, var1: java_time_chrono_ChronoLocalDate | JavaInterfaceProxy<java_time_chrono_ChronoLocalDateInterface> | null): ChronoPeriod | null;
    /**
     * @return original return type: 'boolean'
     */
    isNegative(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isNegativeSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isZero(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isZeroSync(): boolean;
    /**
     * @return original return type: 'java.time.chrono.Chronology'
     */
    getChronology(): Promise<java_time_chrono_Chronology | null>;
    /**
     * @return original return type: 'java.time.chrono.Chronology'
     */
    getChronologySync(): java_time_chrono_Chronology | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAmount'
     * @return original return type: 'java.time.chrono.ChronoPeriod'
     */
    plus(var0: java_time_temporal_TemporalAmount | JavaInterfaceProxy<java_time_temporal_TemporalAmountInterface> | null): Promise<ChronoPeriod | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAmount'
     * @return original return type: 'java.time.chrono.ChronoPeriod'
     */
    plusSync(var0: java_time_temporal_TemporalAmount | JavaInterfaceProxy<java_time_temporal_TemporalAmountInterface> | null): ChronoPeriod | null;
    /**
     * @param var0 original type: 'java.time.temporal.Temporal'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    addTo(var0: java_time_temporal_Temporal | JavaInterfaceProxy<java_time_temporal_TemporalInterface> | null): Promise<java_time_temporal_Temporal | null>;
    /**
     * @param var0 original type: 'java.time.temporal.Temporal'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    addToSync(var0: java_time_temporal_Temporal | JavaInterfaceProxy<java_time_temporal_TemporalInterface> | null): java_time_temporal_Temporal | null;
    /**
     * @return original return type: 'java.util.List'
     */
    getUnits(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    getUnitsSync(): java_util_List | null;
    /**
     * @param var0 original type: 'java.time.temporal.Temporal'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    subtractFrom(var0: java_time_temporal_Temporal | JavaInterfaceProxy<java_time_temporal_TemporalInterface> | null): Promise<java_time_temporal_Temporal | null>;
    /**
     * @param var0 original type: 'java.time.temporal.Temporal'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    subtractFromSync(var0: java_time_temporal_Temporal | JavaInterfaceProxy<java_time_temporal_TemporalInterface> | null): java_time_temporal_Temporal | null;
    /**
     * @return original return type: 'java.time.chrono.ChronoPeriod'
     */
    negated(): Promise<ChronoPeriod | null>;
    /**
     * @return original return type: 'java.time.chrono.ChronoPeriod'
     */
    negatedSync(): ChronoPeriod | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.time.chrono.ChronoPeriod'
     */
    multipliedBy(var0: java_lang_Integer | number): Promise<ChronoPeriod | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.time.chrono.ChronoPeriod'
     */
    multipliedBySync(var0: java_lang_Integer | number): ChronoPeriod | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAmount'
     * @return original return type: 'java.time.chrono.ChronoPeriod'
     */
    minus(var0: java_time_temporal_TemporalAmount | JavaInterfaceProxy<java_time_temporal_TemporalAmountInterface> | null): Promise<ChronoPeriod | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAmount'
     * @return original return type: 'java.time.chrono.ChronoPeriod'
     */
    minusSync(var0: java_time_temporal_TemporalAmount | JavaInterfaceProxy<java_time_temporal_TemporalAmountInterface> | null): ChronoPeriod | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createChronoPeriodProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface ChronoPeriodInterface {
    /**
     * @param var0 original type: 'java.time.temporal.TemporalUnit'
     * @return original return type: 'long'
     */
    get(var0: java_time_temporal_TemporalUnit | JavaInterfaceProxy<java_time_temporal_TemporalUnitInterface> | null): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): number;
    /**
     * @return original return type: 'java.time.chrono.ChronoPeriod'
     */
    normalized(): ChronoPeriod | null;
    /**
     * @return original return type: 'boolean'
     */
    isNegative?(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isZero?(): boolean;
    /**
     * @return original return type: 'java.time.chrono.Chronology'
     */
    getChronology(): java_time_chrono_Chronology | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAmount'
     * @return original return type: 'java.time.chrono.ChronoPeriod'
     */
    plus(var0: java_time_temporal_TemporalAmount | JavaInterfaceProxy<java_time_temporal_TemporalAmountInterface> | null): ChronoPeriod | null;
    /**
     * @param var0 original type: 'java.time.temporal.Temporal'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    addTo(var0: java_time_temporal_Temporal | JavaInterfaceProxy<java_time_temporal_TemporalInterface> | null): java_time_temporal_Temporal | null;
    /**
     * @return original return type: 'java.util.List'
     */
    getUnits(): java_util_List | null;
    /**
     * @param var0 original type: 'java.time.temporal.Temporal'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    subtractFrom(var0: java_time_temporal_Temporal | JavaInterfaceProxy<java_time_temporal_TemporalInterface> | null): java_time_temporal_Temporal | null;
    /**
     * @return original return type: 'java.time.chrono.ChronoPeriod'
     */
    negated?(): ChronoPeriod | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.time.chrono.ChronoPeriod'
     */
    multipliedBy(var0: java_lang_Integer | number): ChronoPeriod | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAmount'
     * @return original return type: 'java.time.chrono.ChronoPeriod'
     */
    minus(var0: java_time_temporal_TemporalAmount | JavaInterfaceProxy<java_time_temporal_TemporalAmountInterface> | null): ChronoPeriod | null;
}
/**
 * Create a proxy for the {@link ChronoPeriod} interface.
 * All required methods in {@link ChronoPeriodInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createChronoPeriodProxy(methods: ChronoPeriodInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<ChronoPeriodInterface>;
declare const ChronoPeriod_base: typeof ChronoPeriodClass;
/**
 * Class java.time.chrono.ChronoPeriod.
 *
 * This actually imports the java class for further use.
 * The class {@link ChronoPeriodClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ChronoPeriod extends ChronoPeriod_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default ChronoPeriod;
//# sourceMappingURL=ChronoPeriod.d.ts.map