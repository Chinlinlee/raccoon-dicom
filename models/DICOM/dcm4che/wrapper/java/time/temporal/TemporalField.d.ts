import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { TemporalAccessor as java_time_temporal_TemporalAccessor, TemporalAccessorInterface as java_time_temporal_TemporalAccessorInterface } from "./TemporalAccessor";
import { Map as java_util_Map, MapInterface as java_util_MapInterface } from "./../../util/Map";
import { ResolverStyle as java_time_format_ResolverStyle } from "./../format/ResolverStyle";
import { ValueRange as java_time_temporal_ValueRange } from "./ValueRange";
import { Locale as java_util_Locale } from "./../../util/Locale";
import { TemporalUnit as java_time_temporal_TemporalUnit } from "./TemporalUnit";
import { Temporal as java_time_temporal_Temporal, TemporalInterface as java_time_temporal_TemporalInterface } from "./Temporal";
import { Long as java_lang_Long } from "./../../lang/Long";
/**
 * This class just defines types, you should import {@link TemporalField} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class TemporalFieldClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @param var0 original type: 'java.util.Map'
     * @param var1 original type: 'java.time.temporal.TemporalAccessor'
     * @param var2 original type: 'java.time.format.ResolverStyle'
     * @return original return type: 'java.time.temporal.TemporalAccessor'
     */
    resolve(var0: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null, var1: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null, var2: java_time_format_ResolverStyle | null): Promise<java_time_temporal_TemporalAccessor | null>;
    /**
     * @param var0 original type: 'java.util.Map'
     * @param var1 original type: 'java.time.temporal.TemporalAccessor'
     * @param var2 original type: 'java.time.format.ResolverStyle'
     * @return original return type: 'java.time.temporal.TemporalAccessor'
     */
    resolveSync(var0: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null, var1: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null, var2: java_time_format_ResolverStyle | null): java_time_temporal_TemporalAccessor | null;
    /**
     * @return original return type: 'java.time.temporal.ValueRange'
     */
    range(): Promise<java_time_temporal_ValueRange | null>;
    /**
     * @return original return type: 'java.time.temporal.ValueRange'
     */
    rangeSync(): java_time_temporal_ValueRange | null;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getDisplayName(var0: java_util_Locale | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getDisplayNameSync(var0: java_util_Locale | null): string | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'java.time.temporal.ValueRange'
     */
    rangeRefinedBy(var0: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null): Promise<java_time_temporal_ValueRange | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'java.time.temporal.ValueRange'
     */
    rangeRefinedBySync(var0: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null): java_time_temporal_ValueRange | null;
    /**
     * @return original return type: 'java.time.temporal.TemporalUnit'
     */
    getBaseUnit(): Promise<java_time_temporal_TemporalUnit | null>;
    /**
     * @return original return type: 'java.time.temporal.TemporalUnit'
     */
    getBaseUnitSync(): java_time_temporal_TemporalUnit | null;
    /**
     * @return original return type: 'java.time.temporal.TemporalUnit'
     */
    getRangeUnit(): Promise<java_time_temporal_TemporalUnit | null>;
    /**
     * @return original return type: 'java.time.temporal.TemporalUnit'
     */
    getRangeUnitSync(): java_time_temporal_TemporalUnit | null;
    /**
     * @return original return type: 'boolean'
     */
    isDateBased(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isDateBasedSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isTimeBased(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isTimeBasedSync(): boolean;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'boolean'
     */
    isSupportedBy(var0: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'boolean'
     */
    isSupportedBySync(var0: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'long'
     */
    getFrom(var0: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null): Promise<number>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'long'
     */
    getFromSync(var0: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null): number;
    /**
     * @param var0 original type: 'java.time.temporal.Temporal'
     * @param var1 original type: 'long'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    adjustInto(var0: java_time_temporal_Temporal | JavaInterfaceProxy<java_time_temporal_TemporalInterface> | null, var1: java_lang_Long | bigint | number): Promise<java_time_temporal_Temporal | null>;
    /**
     * @param var0 original type: 'java.time.temporal.Temporal'
     * @param var1 original type: 'long'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    adjustIntoSync(var0: java_time_temporal_Temporal | JavaInterfaceProxy<java_time_temporal_TemporalInterface> | null, var1: java_lang_Long | bigint | number): java_time_temporal_Temporal | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createTemporalFieldProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface TemporalFieldInterface {
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): string;
    /**
     * @param var0 original type: 'java.util.Map'
     * @param var1 original type: 'java.time.temporal.TemporalAccessor'
     * @param var2 original type: 'java.time.format.ResolverStyle'
     * @return original return type: 'java.time.temporal.TemporalAccessor'
     */
    resolve?(var0: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null, var1: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null, var2: java_time_format_ResolverStyle | null): java_time_temporal_TemporalAccessor | null;
    /**
     * @return original return type: 'java.time.temporal.ValueRange'
     */
    range(): java_time_temporal_ValueRange | null;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getDisplayName?(var0: java_util_Locale | null): string | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'java.time.temporal.ValueRange'
     */
    rangeRefinedBy(var0: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null): java_time_temporal_ValueRange | null;
    /**
     * @return original return type: 'java.time.temporal.TemporalUnit'
     */
    getBaseUnit(): java_time_temporal_TemporalUnit | null;
    /**
     * @return original return type: 'java.time.temporal.TemporalUnit'
     */
    getRangeUnit(): java_time_temporal_TemporalUnit | null;
    /**
     * @return original return type: 'boolean'
     */
    isDateBased(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isTimeBased(): boolean;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'boolean'
     */
    isSupportedBy(var0: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'long'
     */
    getFrom(var0: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null): number;
    /**
     * @param var0 original type: 'java.time.temporal.Temporal'
     * @param var1 original type: 'long'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    adjustInto(var0: java_time_temporal_Temporal | JavaInterfaceProxy<java_time_temporal_TemporalInterface> | null, var1: java_lang_Long | bigint | number): java_time_temporal_Temporal | null;
}
/**
 * Create a proxy for the {@link TemporalField} interface.
 * All required methods in {@link TemporalFieldInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createTemporalFieldProxy(methods: TemporalFieldInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<TemporalFieldInterface>;
declare const TemporalField_base: typeof TemporalFieldClass;
/**
 * Class java.time.temporal.TemporalField.
 *
 * This actually imports the java class for further use.
 * The class {@link TemporalFieldClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class TemporalField extends TemporalField_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default TemporalField;
//# sourceMappingURL=TemporalField.d.ts.map