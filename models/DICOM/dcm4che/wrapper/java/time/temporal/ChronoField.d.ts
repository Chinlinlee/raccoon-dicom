import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { Enum as java_lang_Enum } from "./../../lang/Enum";
import { Class as java_lang_Class } from "./../../lang/Class";
import { ValueRange as java_time_temporal_ValueRange } from "./ValueRange";
import { Locale as java_util_Locale } from "./../../util/Locale";
import { TemporalAccessor as java_time_temporal_TemporalAccessor, TemporalAccessorInterface as java_time_temporal_TemporalAccessorInterface } from "./TemporalAccessor";
import { TemporalUnit as java_time_temporal_TemporalUnit } from "./TemporalUnit";
import { Temporal as java_time_temporal_Temporal, TemporalInterface as java_time_temporal_TemporalInterface } from "./Temporal";
import { Long as java_lang_Long } from "./../../lang/Long";
import { Optional as java_util_Optional } from "./../../util/Optional";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
import { Map as java_util_Map, MapInterface as java_util_MapInterface } from "./../../util/Map";
import { ResolverStyle as java_time_format_ResolverStyle } from "./../format/ResolverStyle";
/**
 * This class just defines types, you should import {@link ChronoField} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ChronoFieldClass extends JavaClass {
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly NANO_OF_SECOND: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly NANO_OF_DAY: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly MICRO_OF_SECOND: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly MICRO_OF_DAY: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly MILLI_OF_SECOND: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly MILLI_OF_DAY: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly SECOND_OF_MINUTE: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly SECOND_OF_DAY: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly MINUTE_OF_HOUR: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly MINUTE_OF_DAY: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly HOUR_OF_AMPM: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly CLOCK_HOUR_OF_AMPM: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly HOUR_OF_DAY: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly CLOCK_HOUR_OF_DAY: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly AMPM_OF_DAY: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly DAY_OF_WEEK: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly ALIGNED_DAY_OF_WEEK_IN_MONTH: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly ALIGNED_DAY_OF_WEEK_IN_YEAR: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly DAY_OF_MONTH: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly DAY_OF_YEAR: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly EPOCH_DAY: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly ALIGNED_WEEK_OF_MONTH: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly ALIGNED_WEEK_OF_YEAR: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly MONTH_OF_YEAR: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly PROLEPTIC_MONTH: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly YEAR_OF_ERA: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly YEAR: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly ERA: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly INSTANT_SECONDS: ChronoFieldClass | null;
    /**
     * Original type: 'java.time.temporal.ChronoField'
     */
    static readonly OFFSET_SECONDS: ChronoFieldClass | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'java.time.temporal.ChronoField[]'
     */
    static values(): Promise<(ChronoField | null)[] | null>;
    /**
     * @return original return type: 'java.time.temporal.ChronoField[]'
     */
    static valuesSync(): (ChronoField | null)[] | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.time.temporal.ChronoField'
     */
    static valueOf(var0: string | null): Promise<ChronoField | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.time.temporal.ChronoField'
     */
    static valueOfSync(var0: string | null): ChronoField | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Enum'
     */
    static valueOf(var0: java_lang_Class | null, var1: string | null): Promise<java_lang_Enum | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Enum'
     */
    static valueOfSync(var0: java_lang_Class | null, var1: string | null): java_lang_Enum | null;
    /**
     * @return original return type: 'java.time.temporal.ValueRange'
     */
    range(): Promise<java_time_temporal_ValueRange | null>;
    /**
     * @return original return type: 'java.time.temporal.ValueRange'
     */
    rangeSync(): java_time_temporal_ValueRange | null;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getDisplayName(var0: java_util_Locale | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getDisplayNameSync(var0: java_util_Locale | null): string | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'java.time.temporal.ValueRange'
     */
    rangeRefinedBy(var0: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null): Promise<java_time_temporal_ValueRange | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'java.time.temporal.ValueRange'
     */
    rangeRefinedBySync(var0: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null): java_time_temporal_ValueRange | null;
    /**
     * @return original return type: 'java.time.temporal.TemporalUnit'
     */
    getBaseUnit(): Promise<java_time_temporal_TemporalUnit | null>;
    /**
     * @return original return type: 'java.time.temporal.TemporalUnit'
     */
    getBaseUnitSync(): java_time_temporal_TemporalUnit | null;
    /**
     * @return original return type: 'java.time.temporal.TemporalUnit'
     */
    getRangeUnit(): Promise<java_time_temporal_TemporalUnit | null>;
    /**
     * @return original return type: 'java.time.temporal.TemporalUnit'
     */
    getRangeUnitSync(): java_time_temporal_TemporalUnit | null;
    /**
     * @return original return type: 'boolean'
     */
    isDateBased(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isDateBasedSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isTimeBased(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isTimeBasedSync(): boolean;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'boolean'
     */
    isSupportedBy(var0: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'boolean'
     */
    isSupportedBySync(var0: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'long'
     */
    getFrom(var0: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null): Promise<number>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'long'
     */
    getFromSync(var0: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null): number;
    /**
     * @param var0 original type: 'java.time.temporal.Temporal'
     * @param var1 original type: 'long'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    adjustInto(var0: java_time_temporal_Temporal | JavaInterfaceProxy<java_time_temporal_TemporalInterface> | null, var1: java_lang_Long | bigint | number): Promise<java_time_temporal_Temporal | null>;
    /**
     * @param var0 original type: 'java.time.temporal.Temporal'
     * @param var1 original type: 'long'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    adjustIntoSync(var0: java_time_temporal_Temporal | JavaInterfaceProxy<java_time_temporal_TemporalInterface> | null, var1: java_lang_Long | bigint | number): java_time_temporal_Temporal | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'long'
     */
    checkValidValue(var0: java_lang_Long | bigint | number): Promise<number>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'long'
     */
    checkValidValueSync(var0: java_lang_Long | bigint | number): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'int'
     */
    checkValidIntValue(var0: java_lang_Long | bigint | number): Promise<number>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'int'
     */
    checkValidIntValueSync(var0: java_lang_Long | bigint | number): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    name(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    nameSync(): string | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareTo(var0: BasicOrJavaType | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareToSync(var0: BasicOrJavaType | null): number;
    /**
     * @param var0 original type: 'java.lang.Enum'
     * @return original return type: 'int'
     */
    compareTo(var0: java_lang_Enum | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Enum'
     * @return original return type: 'int'
     */
    compareToSync(var0: java_lang_Enum | null): number;
    /**
     * @return original return type: 'java.util.Optional'
     */
    describeConstable(): Promise<java_util_Optional | null>;
    /**
     * @return original return type: 'java.util.Optional'
     */
    describeConstableSync(): java_util_Optional | null;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getDeclaringClass(): Promise<java_lang_Class | null>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getDeclaringClassSync(): java_lang_Class | null;
    /**
     * @return original return type: 'int'
     */
    ordinal(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    ordinalSync(): number;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'java.util.Map'
     * @param var1 original type: 'java.time.temporal.TemporalAccessor'
     * @param var2 original type: 'java.time.format.ResolverStyle'
     * @return original return type: 'java.time.temporal.TemporalAccessor'
     */
    resolve(var0: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null, var1: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null, var2: java_time_format_ResolverStyle | null): Promise<java_time_temporal_TemporalAccessor | null>;
    /**
     * @param var0 original type: 'java.util.Map'
     * @param var1 original type: 'java.time.temporal.TemporalAccessor'
     * @param var2 original type: 'java.time.format.ResolverStyle'
     * @return original return type: 'java.time.temporal.TemporalAccessor'
     */
    resolveSync(var0: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null, var1: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null, var2: java_time_format_ResolverStyle | null): java_time_temporal_TemporalAccessor | null;
}
declare const ChronoField_base: typeof ChronoFieldClass;
/**
 * Class java.time.temporal.ChronoField.
 *
 * This actually imports the java class for further use.
 * The class {@link ChronoFieldClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ChronoField extends ChronoField_base {
}
export default ChronoField;
//# sourceMappingURL=ChronoField.d.ts.map