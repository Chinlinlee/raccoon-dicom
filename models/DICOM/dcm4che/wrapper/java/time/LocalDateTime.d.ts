import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { TemporalField as java_time_temporal_TemporalField, TemporalFieldInterface as java_time_temporal_TemporalFieldInterface } from "./temporal/TemporalField";
import { ChronoLocalDateTime as java_time_chrono_ChronoLocalDateTime, ChronoLocalDateTimeInterface as java_time_chrono_ChronoLocalDateTimeInterface } from "./chrono/ChronoLocalDateTime";
import { DateTimeFormatter as java_time_format_DateTimeFormatter } from "./format/DateTimeFormatter";
import { Integer as java_lang_Integer } from "./../lang/Integer";
import { Month as java_time_Month } from "./Month";
import { LocalDate as java_time_LocalDate } from "./LocalDate";
import { LocalTime as java_time_LocalTime } from "./LocalTime";
import { TemporalAccessor as java_time_temporal_TemporalAccessor, TemporalAccessorInterface as java_time_temporal_TemporalAccessorInterface } from "./temporal/TemporalAccessor";
import { TemporalQuery as java_time_temporal_TemporalQuery, TemporalQueryInterface as java_time_temporal_TemporalQueryInterface } from "./temporal/TemporalQuery";
import { ValueRange as java_time_temporal_ValueRange } from "./temporal/ValueRange";
import { TemporalUnit as java_time_temporal_TemporalUnit, TemporalUnitInterface as java_time_temporal_TemporalUnitInterface } from "./temporal/TemporalUnit";
import { CharSequence as java_lang_CharSequence, CharSequenceInterface as java_lang_CharSequenceInterface } from "./../lang/CharSequence";
import { Instant as java_time_Instant } from "./Instant";
import { ZoneId as java_time_ZoneId } from "./ZoneId";
import { Long as java_lang_Long } from "./../lang/Long";
import { ZoneOffset as java_time_ZoneOffset } from "./ZoneOffset";
import { Clock as java_time_Clock } from "./Clock";
import { Temporal as java_time_temporal_Temporal, TemporalInterface as java_time_temporal_TemporalInterface } from "./temporal/Temporal";
import { TemporalAdjuster as java_time_temporal_TemporalAdjuster, TemporalAdjusterInterface as java_time_temporal_TemporalAdjusterInterface } from "./temporal/TemporalAdjuster";
import { TemporalAmount as java_time_temporal_TemporalAmount, TemporalAmountInterface as java_time_temporal_TemporalAmountInterface } from "./temporal/TemporalAmount";
import { DayOfWeek as java_time_DayOfWeek } from "./DayOfWeek";
import { ChronoLocalDate as java_time_chrono_ChronoLocalDate } from "./chrono/ChronoLocalDate";
import { ZonedDateTime as java_time_ZonedDateTime } from "./ZonedDateTime";
import { ChronoZonedDateTime as java_time_chrono_ChronoZonedDateTime } from "./chrono/ChronoZonedDateTime";
import { OffsetDateTime as java_time_OffsetDateTime } from "./OffsetDateTime";
import { Class as java_lang_Class } from "./../lang/Class";
import { Chronology as java_time_chrono_Chronology } from "./chrono/Chronology";
/**
 * This class just defines types, you should import {@link LocalDateTime} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class LocalDateTimeClass extends JavaClass {
    /**
     * Original type: 'java.time.LocalDateTime'
     */
    static readonly MIN: LocalDateTimeClass | null;
    /**
     * Original type: 'java.time.LocalDateTime'
     */
    static readonly MAX: LocalDateTimeClass | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalField'
     * @return original return type: 'int'
     */
    get(var0: java_time_temporal_TemporalField | JavaInterfaceProxy<java_time_temporal_TemporalFieldInterface> | null): Promise<number>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalField'
     * @return original return type: 'int'
     */
    getSync(var0: java_time_temporal_TemporalField | JavaInterfaceProxy<java_time_temporal_TemporalFieldInterface> | null): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'java.time.chrono.ChronoLocalDateTime'
     * @return original return type: 'int'
     */
    compareTo(var0: java_time_chrono_ChronoLocalDateTime | JavaInterfaceProxy<java_time_chrono_ChronoLocalDateTimeInterface> | null): Promise<number>;
    /**
     * @param var0 original type: 'java.time.chrono.ChronoLocalDateTime'
     * @return original return type: 'int'
     */
    compareToSync(var0: java_time_chrono_ChronoLocalDateTime | JavaInterfaceProxy<java_time_chrono_ChronoLocalDateTimeInterface> | null): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareTo(var0: BasicOrJavaType | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareToSync(var0: BasicOrJavaType | null): number;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalField'
     * @return original return type: 'long'
     */
    getLong(var0: java_time_temporal_TemporalField | JavaInterfaceProxy<java_time_temporal_TemporalFieldInterface> | null): Promise<number>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalField'
     * @return original return type: 'long'
     */
    getLongSync(var0: java_time_temporal_TemporalField | JavaInterfaceProxy<java_time_temporal_TemporalFieldInterface> | null): number;
    /**
     * @param var0 original type: 'java.time.format.DateTimeFormatter'
     * @return original return type: 'java.lang.String'
     */
    format(var0: java_time_format_DateTimeFormatter | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.time.format.DateTimeFormatter'
     * @return original return type: 'java.lang.String'
     */
    formatSync(var0: java_time_format_DateTimeFormatter | null): string | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.time.Month'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @param var5 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static of(var0: java_lang_Integer | number, var1: java_time_Month | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Integer | number, var5: java_lang_Integer | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.time.Month'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @param var5 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static ofSync(var0: java_lang_Integer | number, var1: java_time_Month | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Integer | number, var5: java_lang_Integer | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.time.Month'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @param var5 original type: 'int'
     * @param var6 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static of(var0: java_lang_Integer | number, var1: java_time_Month | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Integer | number, var5: java_lang_Integer | number, var6: java_lang_Integer | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.time.Month'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @param var5 original type: 'int'
     * @param var6 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static ofSync(var0: java_lang_Integer | number, var1: java_time_Month | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Integer | number, var5: java_lang_Integer | number, var6: java_lang_Integer | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static of(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Integer | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static ofSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Integer | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.time.Month'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static of(var0: java_lang_Integer | number, var1: java_time_Month | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Integer | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.time.Month'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static ofSync(var0: java_lang_Integer | number, var1: java_time_Month | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Integer | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'java.time.LocalDate'
     * @param var1 original type: 'java.time.LocalTime'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static of(var0: java_time_LocalDate | null, var1: java_time_LocalTime | null): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'java.time.LocalDate'
     * @param var1 original type: 'java.time.LocalTime'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static ofSync(var0: java_time_LocalDate | null, var1: java_time_LocalTime | null): LocalDateTime | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @param var5 original type: 'int'
     * @param var6 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static of(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Integer | number, var5: java_lang_Integer | number, var6: java_lang_Integer | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @param var5 original type: 'int'
     * @param var6 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static ofSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Integer | number, var5: java_lang_Integer | number, var6: java_lang_Integer | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @param var5 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static of(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Integer | number, var5: java_lang_Integer | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @param var5 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static ofSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Integer | number, var5: java_lang_Integer | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static from(var0: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static fromSync(var0: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null): LocalDateTime | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalQuery'
     * @return original return type: 'java.lang.Object'
     */
    query(var0: java_time_temporal_TemporalQuery | JavaInterfaceProxy<java_time_temporal_TemporalQueryInterface> | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalQuery'
     * @return original return type: 'java.lang.Object'
     */
    querySync(var0: java_time_temporal_TemporalQuery | JavaInterfaceProxy<java_time_temporal_TemporalQueryInterface> | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalField'
     * @return original return type: 'java.time.temporal.ValueRange'
     */
    range(var0: java_time_temporal_TemporalField | JavaInterfaceProxy<java_time_temporal_TemporalFieldInterface> | null): Promise<java_time_temporal_ValueRange | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalField'
     * @return original return type: 'java.time.temporal.ValueRange'
     */
    rangeSync(var0: java_time_temporal_TemporalField | JavaInterfaceProxy<java_time_temporal_TemporalFieldInterface> | null): java_time_temporal_ValueRange | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalField'
     * @return original return type: 'boolean'
     */
    isSupported(var0: java_time_temporal_TemporalField | JavaInterfaceProxy<java_time_temporal_TemporalFieldInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalField'
     * @return original return type: 'boolean'
     */
    isSupportedSync(var0: java_time_temporal_TemporalField | JavaInterfaceProxy<java_time_temporal_TemporalFieldInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalUnit'
     * @return original return type: 'boolean'
     */
    isSupported(var0: java_time_temporal_TemporalUnit | JavaInterfaceProxy<java_time_temporal_TemporalUnitInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalUnit'
     * @return original return type: 'boolean'
     */
    isSupportedSync(var0: java_time_temporal_TemporalUnit | JavaInterfaceProxy<java_time_temporal_TemporalUnitInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static parse(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static parseSync(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null): LocalDateTime | null;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'java.time.format.DateTimeFormatter'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static parse(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_time_format_DateTimeFormatter | null): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'java.time.format.DateTimeFormatter'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static parseSync(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_time_format_DateTimeFormatter | null): LocalDateTime | null;
    /**
     * @param var0 original type: 'java.time.chrono.ChronoLocalDateTime'
     * @return original return type: 'boolean'
     */
    isEqual(var0: java_time_chrono_ChronoLocalDateTime | JavaInterfaceProxy<java_time_chrono_ChronoLocalDateTimeInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.time.chrono.ChronoLocalDateTime'
     * @return original return type: 'boolean'
     */
    isEqualSync(var0: java_time_chrono_ChronoLocalDateTime | JavaInterfaceProxy<java_time_chrono_ChronoLocalDateTimeInterface> | null): boolean;
    /**
     * @return original return type: 'int'
     */
    getYear(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getYearSync(): number;
    /**
     * @return original return type: 'int'
     */
    getMonthValue(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getMonthValueSync(): number;
    /**
     * @return original return type: 'int'
     */
    getDayOfMonth(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getDayOfMonthSync(): number;
    /**
     * @return original return type: 'int'
     */
    getHour(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getHourSync(): number;
    /**
     * @return original return type: 'int'
     */
    getMinute(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getMinuteSync(): number;
    /**
     * @return original return type: 'int'
     */
    getSecond(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getSecondSync(): number;
    /**
     * @param var0 original type: 'java.time.Instant'
     * @param var1 original type: 'java.time.ZoneId'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static ofInstant(var0: java_time_Instant | null, var1: java_time_ZoneId | null): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'java.time.Instant'
     * @param var1 original type: 'java.time.ZoneId'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static ofInstantSync(var0: java_time_Instant | null, var1: java_time_ZoneId | null): LocalDateTime | null;
    /**
     * @return original return type: 'int'
     */
    getNano(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getNanoSync(): number;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.time.ZoneOffset'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static ofEpochSecond(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number, var2: java_time_ZoneOffset | null): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.time.ZoneOffset'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static ofEpochSecondSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number, var2: java_time_ZoneOffset | null): LocalDateTime | null;
    /**
     * @return original return type: 'java.time.LocalDateTime'
     */
    static now(): Promise<LocalDateTime | null>;
    /**
     * @return original return type: 'java.time.LocalDateTime'
     */
    static nowSync(): LocalDateTime | null;
    /**
     * @param var0 original type: 'java.time.Clock'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static now(var0: java_time_Clock | null): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'java.time.Clock'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static nowSync(var0: java_time_Clock | null): LocalDateTime | null;
    /**
     * @param var0 original type: 'java.time.ZoneId'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static now(var0: java_time_ZoneId | null): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'java.time.ZoneId'
     * @return original return type: 'java.time.LocalDateTime'
     */
    static nowSync(var0: java_time_ZoneId | null): LocalDateTime | null;
    /**
     * @param var0 original type: 'java.time.temporal.Temporal'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    adjustInto(var0: java_time_temporal_Temporal | JavaInterfaceProxy<java_time_temporal_TemporalInterface> | null): Promise<java_time_temporal_Temporal | null>;
    /**
     * @param var0 original type: 'java.time.temporal.Temporal'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    adjustIntoSync(var0: java_time_temporal_Temporal | JavaInterfaceProxy<java_time_temporal_TemporalInterface> | null): java_time_temporal_Temporal | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAdjuster'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    with(var0: java_time_temporal_TemporalAdjuster | JavaInterfaceProxy<java_time_temporal_TemporalAdjusterInterface> | null): Promise<java_time_temporal_Temporal | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAdjuster'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    withSync(var0: java_time_temporal_TemporalAdjuster | JavaInterfaceProxy<java_time_temporal_TemporalAdjusterInterface> | null): java_time_temporal_Temporal | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAdjuster'
     * @return original return type: 'java.time.chrono.ChronoLocalDateTime'
     */
    with(var0: java_time_temporal_TemporalAdjuster | JavaInterfaceProxy<java_time_temporal_TemporalAdjusterInterface> | null): Promise<java_time_chrono_ChronoLocalDateTime | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAdjuster'
     * @return original return type: 'java.time.chrono.ChronoLocalDateTime'
     */
    withSync(var0: java_time_temporal_TemporalAdjuster | JavaInterfaceProxy<java_time_temporal_TemporalAdjusterInterface> | null): java_time_chrono_ChronoLocalDateTime | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAdjuster'
     * @return original return type: 'java.time.LocalDateTime'
     */
    with(var0: java_time_temporal_TemporalAdjuster | JavaInterfaceProxy<java_time_temporal_TemporalAdjusterInterface> | null): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAdjuster'
     * @return original return type: 'java.time.LocalDateTime'
     */
    withSync(var0: java_time_temporal_TemporalAdjuster | JavaInterfaceProxy<java_time_temporal_TemporalAdjusterInterface> | null): LocalDateTime | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalField'
     * @param var1 original type: 'long'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    with(var0: java_time_temporal_TemporalField | JavaInterfaceProxy<java_time_temporal_TemporalFieldInterface> | null, var1: java_lang_Long | bigint | number): Promise<java_time_temporal_Temporal | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalField'
     * @param var1 original type: 'long'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    withSync(var0: java_time_temporal_TemporalField | JavaInterfaceProxy<java_time_temporal_TemporalFieldInterface> | null, var1: java_lang_Long | bigint | number): java_time_temporal_Temporal | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalField'
     * @param var1 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    with(var0: java_time_temporal_TemporalField | JavaInterfaceProxy<java_time_temporal_TemporalFieldInterface> | null, var1: java_lang_Long | bigint | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalField'
     * @param var1 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    withSync(var0: java_time_temporal_TemporalField | JavaInterfaceProxy<java_time_temporal_TemporalFieldInterface> | null, var1: java_lang_Long | bigint | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalField'
     * @param var1 original type: 'long'
     * @return original return type: 'java.time.chrono.ChronoLocalDateTime'
     */
    with(var0: java_time_temporal_TemporalField | JavaInterfaceProxy<java_time_temporal_TemporalFieldInterface> | null, var1: java_lang_Long | bigint | number): Promise<java_time_chrono_ChronoLocalDateTime | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalField'
     * @param var1 original type: 'long'
     * @return original return type: 'java.time.chrono.ChronoLocalDateTime'
     */
    withSync(var0: java_time_temporal_TemporalField | JavaInterfaceProxy<java_time_temporal_TemporalFieldInterface> | null, var1: java_lang_Long | bigint | number): java_time_chrono_ChronoLocalDateTime | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.time.temporal.TemporalUnit'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    plus(var0: java_lang_Long | bigint | number, var1: java_time_temporal_TemporalUnit | JavaInterfaceProxy<java_time_temporal_TemporalUnitInterface> | null): Promise<java_time_temporal_Temporal | null>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.time.temporal.TemporalUnit'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    plusSync(var0: java_lang_Long | bigint | number, var1: java_time_temporal_TemporalUnit | JavaInterfaceProxy<java_time_temporal_TemporalUnitInterface> | null): java_time_temporal_Temporal | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.time.temporal.TemporalUnit'
     * @return original return type: 'java.time.chrono.ChronoLocalDateTime'
     */
    plus(var0: java_lang_Long | bigint | number, var1: java_time_temporal_TemporalUnit | JavaInterfaceProxy<java_time_temporal_TemporalUnitInterface> | null): Promise<java_time_chrono_ChronoLocalDateTime | null>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.time.temporal.TemporalUnit'
     * @return original return type: 'java.time.chrono.ChronoLocalDateTime'
     */
    plusSync(var0: java_lang_Long | bigint | number, var1: java_time_temporal_TemporalUnit | JavaInterfaceProxy<java_time_temporal_TemporalUnitInterface> | null): java_time_chrono_ChronoLocalDateTime | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.time.temporal.TemporalUnit'
     * @return original return type: 'java.time.LocalDateTime'
     */
    plus(var0: java_lang_Long | bigint | number, var1: java_time_temporal_TemporalUnit | JavaInterfaceProxy<java_time_temporal_TemporalUnitInterface> | null): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.time.temporal.TemporalUnit'
     * @return original return type: 'java.time.LocalDateTime'
     */
    plusSync(var0: java_lang_Long | bigint | number, var1: java_time_temporal_TemporalUnit | JavaInterfaceProxy<java_time_temporal_TemporalUnitInterface> | null): LocalDateTime | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAmount'
     * @return original return type: 'java.time.chrono.ChronoLocalDateTime'
     */
    plus(var0: java_time_temporal_TemporalAmount | JavaInterfaceProxy<java_time_temporal_TemporalAmountInterface> | null): Promise<java_time_chrono_ChronoLocalDateTime | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAmount'
     * @return original return type: 'java.time.chrono.ChronoLocalDateTime'
     */
    plusSync(var0: java_time_temporal_TemporalAmount | JavaInterfaceProxy<java_time_temporal_TemporalAmountInterface> | null): java_time_chrono_ChronoLocalDateTime | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAmount'
     * @return original return type: 'java.time.LocalDateTime'
     */
    plus(var0: java_time_temporal_TemporalAmount | JavaInterfaceProxy<java_time_temporal_TemporalAmountInterface> | null): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAmount'
     * @return original return type: 'java.time.LocalDateTime'
     */
    plusSync(var0: java_time_temporal_TemporalAmount | JavaInterfaceProxy<java_time_temporal_TemporalAmountInterface> | null): LocalDateTime | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAmount'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    plus(var0: java_time_temporal_TemporalAmount | JavaInterfaceProxy<java_time_temporal_TemporalAmountInterface> | null): Promise<java_time_temporal_Temporal | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAmount'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    plusSync(var0: java_time_temporal_TemporalAmount | JavaInterfaceProxy<java_time_temporal_TemporalAmountInterface> | null): java_time_temporal_Temporal | null;
    /**
     * @param var0 original type: 'java.time.temporal.Temporal'
     * @param var1 original type: 'java.time.temporal.TemporalUnit'
     * @return original return type: 'long'
     */
    until(var0: java_time_temporal_Temporal | JavaInterfaceProxy<java_time_temporal_TemporalInterface> | null, var1: java_time_temporal_TemporalUnit | JavaInterfaceProxy<java_time_temporal_TemporalUnitInterface> | null): Promise<number>;
    /**
     * @param var0 original type: 'java.time.temporal.Temporal'
     * @param var1 original type: 'java.time.temporal.TemporalUnit'
     * @return original return type: 'long'
     */
    untilSync(var0: java_time_temporal_Temporal | JavaInterfaceProxy<java_time_temporal_TemporalInterface> | null, var1: java_time_temporal_TemporalUnit | JavaInterfaceProxy<java_time_temporal_TemporalUnitInterface> | null): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    plusNanos(var0: java_lang_Long | bigint | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    plusNanosSync(var0: java_lang_Long | bigint | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    plusSeconds(var0: java_lang_Long | bigint | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    plusSecondsSync(var0: java_lang_Long | bigint | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    plusDays(var0: java_lang_Long | bigint | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    plusDaysSync(var0: java_lang_Long | bigint | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    plusHours(var0: java_lang_Long | bigint | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    plusHoursSync(var0: java_lang_Long | bigint | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    plusMinutes(var0: java_lang_Long | bigint | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    plusMinutesSync(var0: java_lang_Long | bigint | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.time.temporal.TemporalUnit'
     * @return original return type: 'java.time.chrono.ChronoLocalDateTime'
     */
    minus(var0: java_lang_Long | bigint | number, var1: java_time_temporal_TemporalUnit | JavaInterfaceProxy<java_time_temporal_TemporalUnitInterface> | null): Promise<java_time_chrono_ChronoLocalDateTime | null>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.time.temporal.TemporalUnit'
     * @return original return type: 'java.time.chrono.ChronoLocalDateTime'
     */
    minusSync(var0: java_lang_Long | bigint | number, var1: java_time_temporal_TemporalUnit | JavaInterfaceProxy<java_time_temporal_TemporalUnitInterface> | null): java_time_chrono_ChronoLocalDateTime | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.time.temporal.TemporalUnit'
     * @return original return type: 'java.time.LocalDateTime'
     */
    minus(var0: java_lang_Long | bigint | number, var1: java_time_temporal_TemporalUnit | JavaInterfaceProxy<java_time_temporal_TemporalUnitInterface> | null): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.time.temporal.TemporalUnit'
     * @return original return type: 'java.time.LocalDateTime'
     */
    minusSync(var0: java_lang_Long | bigint | number, var1: java_time_temporal_TemporalUnit | JavaInterfaceProxy<java_time_temporal_TemporalUnitInterface> | null): LocalDateTime | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.time.temporal.TemporalUnit'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    minus(var0: java_lang_Long | bigint | number, var1: java_time_temporal_TemporalUnit | JavaInterfaceProxy<java_time_temporal_TemporalUnitInterface> | null): Promise<java_time_temporal_Temporal | null>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.time.temporal.TemporalUnit'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    minusSync(var0: java_lang_Long | bigint | number, var1: java_time_temporal_TemporalUnit | JavaInterfaceProxy<java_time_temporal_TemporalUnitInterface> | null): java_time_temporal_Temporal | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAmount'
     * @return original return type: 'java.time.chrono.ChronoLocalDateTime'
     */
    minus(var0: java_time_temporal_TemporalAmount | JavaInterfaceProxy<java_time_temporal_TemporalAmountInterface> | null): Promise<java_time_chrono_ChronoLocalDateTime | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAmount'
     * @return original return type: 'java.time.chrono.ChronoLocalDateTime'
     */
    minusSync(var0: java_time_temporal_TemporalAmount | JavaInterfaceProxy<java_time_temporal_TemporalAmountInterface> | null): java_time_chrono_ChronoLocalDateTime | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAmount'
     * @return original return type: 'java.time.LocalDateTime'
     */
    minus(var0: java_time_temporal_TemporalAmount | JavaInterfaceProxy<java_time_temporal_TemporalAmountInterface> | null): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAmount'
     * @return original return type: 'java.time.LocalDateTime'
     */
    minusSync(var0: java_time_temporal_TemporalAmount | JavaInterfaceProxy<java_time_temporal_TemporalAmountInterface> | null): LocalDateTime | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAmount'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    minus(var0: java_time_temporal_TemporalAmount | JavaInterfaceProxy<java_time_temporal_TemporalAmountInterface> | null): Promise<java_time_temporal_Temporal | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAmount'
     * @return original return type: 'java.time.temporal.Temporal'
     */
    minusSync(var0: java_time_temporal_TemporalAmount | JavaInterfaceProxy<java_time_temporal_TemporalAmountInterface> | null): java_time_temporal_Temporal | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    minusDays(var0: java_lang_Long | bigint | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    minusDaysSync(var0: java_lang_Long | bigint | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    minusHours(var0: java_lang_Long | bigint | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    minusHoursSync(var0: java_lang_Long | bigint | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    minusMinutes(var0: java_lang_Long | bigint | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    minusMinutesSync(var0: java_lang_Long | bigint | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    minusSeconds(var0: java_lang_Long | bigint | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    minusSecondsSync(var0: java_lang_Long | bigint | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    minusNanos(var0: java_lang_Long | bigint | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    minusNanosSync(var0: java_lang_Long | bigint | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalUnit'
     * @return original return type: 'java.time.LocalDateTime'
     */
    truncatedTo(var0: java_time_temporal_TemporalUnit | JavaInterfaceProxy<java_time_temporal_TemporalUnitInterface> | null): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalUnit'
     * @return original return type: 'java.time.LocalDateTime'
     */
    truncatedToSync(var0: java_time_temporal_TemporalUnit | JavaInterfaceProxy<java_time_temporal_TemporalUnitInterface> | null): LocalDateTime | null;
    /**
     * @return original return type: 'java.time.DayOfWeek'
     */
    getDayOfWeek(): Promise<java_time_DayOfWeek | null>;
    /**
     * @return original return type: 'java.time.DayOfWeek'
     */
    getDayOfWeekSync(): java_time_DayOfWeek | null;
    /**
     * @return original return type: 'int'
     */
    getDayOfYear(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getDayOfYearSync(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    withDayOfYear(var0: java_lang_Integer | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    withDayOfYearSync(var0: java_lang_Integer | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    minusYears(var0: java_lang_Long | bigint | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    minusYearsSync(var0: java_lang_Long | bigint | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    plusMonths(var0: java_lang_Long | bigint | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    plusMonthsSync(var0: java_lang_Long | bigint | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    plusWeeks(var0: java_lang_Long | bigint | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    plusWeeksSync(var0: java_lang_Long | bigint | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    plusYears(var0: java_lang_Long | bigint | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    plusYearsSync(var0: java_lang_Long | bigint | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    minusMonths(var0: java_lang_Long | bigint | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    minusMonthsSync(var0: java_lang_Long | bigint | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'java.time.chrono.ChronoLocalDateTime'
     * @return original return type: 'boolean'
     */
    isAfter(var0: java_time_chrono_ChronoLocalDateTime | JavaInterfaceProxy<java_time_chrono_ChronoLocalDateTimeInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.time.chrono.ChronoLocalDateTime'
     * @return original return type: 'boolean'
     */
    isAfterSync(var0: java_time_chrono_ChronoLocalDateTime | JavaInterfaceProxy<java_time_chrono_ChronoLocalDateTimeInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.time.chrono.ChronoLocalDateTime'
     * @return original return type: 'boolean'
     */
    isBefore(var0: java_time_chrono_ChronoLocalDateTime | JavaInterfaceProxy<java_time_chrono_ChronoLocalDateTimeInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.time.chrono.ChronoLocalDateTime'
     * @return original return type: 'boolean'
     */
    isBeforeSync(var0: java_time_chrono_ChronoLocalDateTime | JavaInterfaceProxy<java_time_chrono_ChronoLocalDateTimeInterface> | null): boolean;
    /**
     * @return original return type: 'java.time.Month'
     */
    getMonth(): Promise<java_time_Month | null>;
    /**
     * @return original return type: 'java.time.Month'
     */
    getMonthSync(): java_time_Month | null;
    /**
     * @return original return type: 'java.time.LocalDate'
     */
    toLocalDate(): Promise<java_time_LocalDate | null>;
    /**
     * @return original return type: 'java.time.LocalDate'
     */
    toLocalDateSync(): java_time_LocalDate | null;
    /**
     * @return original return type: 'java.time.chrono.ChronoLocalDate'
     */
    toLocalDate(): Promise<java_time_chrono_ChronoLocalDate | null>;
    /**
     * @return original return type: 'java.time.chrono.ChronoLocalDate'
     */
    toLocalDateSync(): java_time_chrono_ChronoLocalDate | null;
    /**
     * @return original return type: 'java.time.LocalTime'
     */
    toLocalTime(): Promise<java_time_LocalTime | null>;
    /**
     * @return original return type: 'java.time.LocalTime'
     */
    toLocalTimeSync(): java_time_LocalTime | null;
    /**
     * @param var0 original type: 'java.time.ZoneId'
     * @return original return type: 'java.time.ZonedDateTime'
     */
    atZone(var0: java_time_ZoneId | null): Promise<java_time_ZonedDateTime | null>;
    /**
     * @param var0 original type: 'java.time.ZoneId'
     * @return original return type: 'java.time.ZonedDateTime'
     */
    atZoneSync(var0: java_time_ZoneId | null): java_time_ZonedDateTime | null;
    /**
     * @param var0 original type: 'java.time.ZoneId'
     * @return original return type: 'java.time.chrono.ChronoZonedDateTime'
     */
    atZone(var0: java_time_ZoneId | null): Promise<java_time_chrono_ChronoZonedDateTime | null>;
    /**
     * @param var0 original type: 'java.time.ZoneId'
     * @return original return type: 'java.time.chrono.ChronoZonedDateTime'
     */
    atZoneSync(var0: java_time_ZoneId | null): java_time_chrono_ChronoZonedDateTime | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    withYear(var0: java_lang_Integer | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    withYearSync(var0: java_lang_Integer | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    withMonth(var0: java_lang_Integer | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    withMonthSync(var0: java_lang_Integer | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    withDayOfMonth(var0: java_lang_Integer | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    withDayOfMonthSync(var0: java_lang_Integer | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    withHour(var0: java_lang_Integer | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    withHourSync(var0: java_lang_Integer | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    withMinute(var0: java_lang_Integer | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    withMinuteSync(var0: java_lang_Integer | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    withSecond(var0: java_lang_Integer | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    withSecondSync(var0: java_lang_Integer | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    withNano(var0: java_lang_Integer | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.time.LocalDateTime'
     */
    withNanoSync(var0: java_lang_Integer | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    minusWeeks(var0: java_lang_Long | bigint | number): Promise<LocalDateTime | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.LocalDateTime'
     */
    minusWeeksSync(var0: java_lang_Long | bigint | number): LocalDateTime | null;
    /**
     * @param var0 original type: 'java.time.ZoneOffset'
     * @return original return type: 'java.time.OffsetDateTime'
     */
    atOffset(var0: java_time_ZoneOffset | null): Promise<java_time_OffsetDateTime | null>;
    /**
     * @param var0 original type: 'java.time.ZoneOffset'
     * @return original return type: 'java.time.OffsetDateTime'
     */
    atOffsetSync(var0: java_time_ZoneOffset | null): java_time_OffsetDateTime | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'java.time.ZoneOffset'
     * @return original return type: 'long'
     */
    toEpochSecond(var0: java_time_ZoneOffset | null): Promise<number>;
    /**
     * @param var0 original type: 'java.time.ZoneOffset'
     * @return original return type: 'long'
     */
    toEpochSecondSync(var0: java_time_ZoneOffset | null): number;
    /**
     * @param var0 original type: 'java.time.ZoneOffset'
     * @return original return type: 'java.time.Instant'
     */
    toInstant(var0: java_time_ZoneOffset | null): Promise<java_time_Instant | null>;
    /**
     * @param var0 original type: 'java.time.ZoneOffset'
     * @return original return type: 'java.time.Instant'
     */
    toInstantSync(var0: java_time_ZoneOffset | null): java_time_Instant | null;
    /**
     * @return original return type: 'java.time.chrono.Chronology'
     */
    getChronology(): Promise<java_time_chrono_Chronology | null>;
    /**
     * @return original return type: 'java.time.chrono.Chronology'
     */
    getChronologySync(): java_time_chrono_Chronology | null;
}
declare const LocalDateTime_base: typeof LocalDateTimeClass;
/**
 * Class java.time.LocalDateTime.
 *
 * This actually imports the java class for further use.
 * The class {@link LocalDateTimeClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class LocalDateTime extends LocalDateTime_base {
}
export default LocalDateTime;
//# sourceMappingURL=LocalDateTime.d.ts.map