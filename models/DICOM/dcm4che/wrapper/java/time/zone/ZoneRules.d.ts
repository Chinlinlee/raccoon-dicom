import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { ZoneOffset as java_time_ZoneOffset } from "./../ZoneOffset";
import { List as java_util_List, ListInterface as java_util_ListInterface } from "./../../util/List";
import { LocalDateTime as java_time_LocalDateTime } from "./../LocalDateTime";
import { Instant as java_time_Instant } from "./../Instant";
import { ZoneOffsetTransition as java_time_zone_ZoneOffsetTransition } from "./ZoneOffsetTransition";
import { Duration as java_time_Duration } from "./../Duration";
import { Long as java_lang_Long } from "./../../lang/Long";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
import { Class as java_lang_Class } from "./../../lang/Class";
/**
 * This class just defines types, you should import {@link ZoneRules} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ZoneRulesClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'java.time.ZoneOffset'
     * @param var1 original type: 'java.time.ZoneOffset'
     * @param var2 original type: 'java.util.List'
     * @param var3 original type: 'java.util.List'
     * @param var4 original type: 'java.util.List'
     * @return original return type: 'java.time.zone.ZoneRules'
     */
    static of(var0: java_time_ZoneOffset | null, var1: java_time_ZoneOffset | null, var2: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var3: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var4: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null): Promise<ZoneRules | null>;
    /**
     * @param var0 original type: 'java.time.ZoneOffset'
     * @param var1 original type: 'java.time.ZoneOffset'
     * @param var2 original type: 'java.util.List'
     * @param var3 original type: 'java.util.List'
     * @param var4 original type: 'java.util.List'
     * @return original return type: 'java.time.zone.ZoneRules'
     */
    static ofSync(var0: java_time_ZoneOffset | null, var1: java_time_ZoneOffset | null, var2: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var3: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var4: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null): ZoneRules | null;
    /**
     * @param var0 original type: 'java.time.ZoneOffset'
     * @return original return type: 'java.time.zone.ZoneRules'
     */
    static of(var0: java_time_ZoneOffset | null): Promise<ZoneRules | null>;
    /**
     * @param var0 original type: 'java.time.ZoneOffset'
     * @return original return type: 'java.time.zone.ZoneRules'
     */
    static ofSync(var0: java_time_ZoneOffset | null): ZoneRules | null;
    /**
     * @param var0 original type: 'java.time.LocalDateTime'
     * @return original return type: 'java.time.ZoneOffset'
     */
    getOffset(var0: java_time_LocalDateTime | null): Promise<java_time_ZoneOffset | null>;
    /**
     * @param var0 original type: 'java.time.LocalDateTime'
     * @return original return type: 'java.time.ZoneOffset'
     */
    getOffsetSync(var0: java_time_LocalDateTime | null): java_time_ZoneOffset | null;
    /**
     * @param var0 original type: 'java.time.Instant'
     * @return original return type: 'java.time.ZoneOffset'
     */
    getOffset(var0: java_time_Instant | null): Promise<java_time_ZoneOffset | null>;
    /**
     * @param var0 original type: 'java.time.Instant'
     * @return original return type: 'java.time.ZoneOffset'
     */
    getOffsetSync(var0: java_time_Instant | null): java_time_ZoneOffset | null;
    /**
     * @return original return type: 'boolean'
     */
    isFixedOffset(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isFixedOffsetSync(): boolean;
    /**
     * @param var0 original type: 'java.time.LocalDateTime'
     * @return original return type: 'java.util.List'
     */
    getValidOffsets(var0: java_time_LocalDateTime | null): Promise<java_util_List | null>;
    /**
     * @param var0 original type: 'java.time.LocalDateTime'
     * @return original return type: 'java.util.List'
     */
    getValidOffsetsSync(var0: java_time_LocalDateTime | null): java_util_List | null;
    /**
     * @param var0 original type: 'java.time.Instant'
     * @return original return type: 'java.time.ZoneOffset'
     */
    getStandardOffset(var0: java_time_Instant | null): Promise<java_time_ZoneOffset | null>;
    /**
     * @param var0 original type: 'java.time.Instant'
     * @return original return type: 'java.time.ZoneOffset'
     */
    getStandardOffsetSync(var0: java_time_Instant | null): java_time_ZoneOffset | null;
    /**
     * @param var0 original type: 'java.time.LocalDateTime'
     * @return original return type: 'java.time.zone.ZoneOffsetTransition'
     */
    getTransition(var0: java_time_LocalDateTime | null): Promise<java_time_zone_ZoneOffsetTransition | null>;
    /**
     * @param var0 original type: 'java.time.LocalDateTime'
     * @return original return type: 'java.time.zone.ZoneOffsetTransition'
     */
    getTransitionSync(var0: java_time_LocalDateTime | null): java_time_zone_ZoneOffsetTransition | null;
    /**
     * @param var0 original type: 'java.time.Instant'
     * @return original return type: 'java.time.Duration'
     */
    getDaylightSavings(var0: java_time_Instant | null): Promise<java_time_Duration | null>;
    /**
     * @param var0 original type: 'java.time.Instant'
     * @return original return type: 'java.time.Duration'
     */
    getDaylightSavingsSync(var0: java_time_Instant | null): java_time_Duration | null;
    /**
     * @param var0 original type: 'java.time.Instant'
     * @return original return type: 'boolean'
     */
    isDaylightSavings(var0: java_time_Instant | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.time.Instant'
     * @return original return type: 'boolean'
     */
    isDaylightSavingsSync(var0: java_time_Instant | null): boolean;
    /**
     * @param var0 original type: 'java.time.LocalDateTime'
     * @param var1 original type: 'java.time.ZoneOffset'
     * @return original return type: 'boolean'
     */
    isValidOffset(var0: java_time_LocalDateTime | null, var1: java_time_ZoneOffset | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.time.LocalDateTime'
     * @param var1 original type: 'java.time.ZoneOffset'
     * @return original return type: 'boolean'
     */
    isValidOffsetSync(var0: java_time_LocalDateTime | null, var1: java_time_ZoneOffset | null): boolean;
    /**
     * @param var0 original type: 'java.time.Instant'
     * @return original return type: 'java.time.zone.ZoneOffsetTransition'
     */
    nextTransition(var0: java_time_Instant | null): Promise<java_time_zone_ZoneOffsetTransition | null>;
    /**
     * @param var0 original type: 'java.time.Instant'
     * @return original return type: 'java.time.zone.ZoneOffsetTransition'
     */
    nextTransitionSync(var0: java_time_Instant | null): java_time_zone_ZoneOffsetTransition | null;
    /**
     * @param var0 original type: 'java.time.Instant'
     * @return original return type: 'java.time.zone.ZoneOffsetTransition'
     */
    previousTransition(var0: java_time_Instant | null): Promise<java_time_zone_ZoneOffsetTransition | null>;
    /**
     * @param var0 original type: 'java.time.Instant'
     * @return original return type: 'java.time.zone.ZoneOffsetTransition'
     */
    previousTransitionSync(var0: java_time_Instant | null): java_time_zone_ZoneOffsetTransition | null;
    /**
     * @return original return type: 'java.util.List'
     */
    getTransitions(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    getTransitionsSync(): java_util_List | null;
    /**
     * @return original return type: 'java.util.List'
     */
    getTransitionRules(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    getTransitionRulesSync(): java_util_List | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const ZoneRules_base: typeof ZoneRulesClass;
/**
 * Class java.time.zone.ZoneRules.
 *
 * This actually imports the java class for further use.
 * The class {@link ZoneRulesClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ZoneRules extends ZoneRules_base {
}
export default ZoneRules;
//# sourceMappingURL=ZoneRules.d.ts.map