import { JavaClass, BasicOrJavaType } from "java-bridge";
import { LocalDateTime as java_time_LocalDateTime } from "./../LocalDateTime";
import { ZoneOffset as java_time_ZoneOffset } from "./../ZoneOffset";
import { Duration as java_time_Duration } from "./../Duration";
import { Instant as java_time_Instant } from "./../Instant";
import { Long as java_lang_Long } from "./../../lang/Long";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
import { Class as java_lang_Class } from "./../../lang/Class";
/**
 * This class just defines types, you should import {@link ZoneOffsetTransition} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ZoneOffsetTransitionClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'java.time.zone.ZoneOffsetTransition'
     * @return original return type: 'int'
     */
    compareTo(var0: ZoneOffsetTransitionClass | null): Promise<number>;
    /**
     * @param var0 original type: 'java.time.zone.ZoneOffsetTransition'
     * @return original return type: 'int'
     */
    compareToSync(var0: ZoneOffsetTransitionClass | null): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareTo(var0: BasicOrJavaType | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareToSync(var0: BasicOrJavaType | null): number;
    /**
     * @param var0 original type: 'java.time.LocalDateTime'
     * @param var1 original type: 'java.time.ZoneOffset'
     * @param var2 original type: 'java.time.ZoneOffset'
     * @return original return type: 'java.time.zone.ZoneOffsetTransition'
     */
    static of(var0: java_time_LocalDateTime | null, var1: java_time_ZoneOffset | null, var2: java_time_ZoneOffset | null): Promise<ZoneOffsetTransition | null>;
    /**
     * @param var0 original type: 'java.time.LocalDateTime'
     * @param var1 original type: 'java.time.ZoneOffset'
     * @param var2 original type: 'java.time.ZoneOffset'
     * @return original return type: 'java.time.zone.ZoneOffsetTransition'
     */
    static ofSync(var0: java_time_LocalDateTime | null, var1: java_time_ZoneOffset | null, var2: java_time_ZoneOffset | null): ZoneOffsetTransition | null;
    /**
     * @return original return type: 'long'
     */
    toEpochSecond(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    toEpochSecondSync(): number;
    /**
     * @return original return type: 'java.time.Duration'
     */
    getDuration(): Promise<java_time_Duration | null>;
    /**
     * @return original return type: 'java.time.Duration'
     */
    getDurationSync(): java_time_Duration | null;
    /**
     * @return original return type: 'java.time.ZoneOffset'
     */
    getOffsetAfter(): Promise<java_time_ZoneOffset | null>;
    /**
     * @return original return type: 'java.time.ZoneOffset'
     */
    getOffsetAfterSync(): java_time_ZoneOffset | null;
    /**
     * @return original return type: 'boolean'
     */
    isGap(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isGapSync(): boolean;
    /**
     * @return original return type: 'java.time.LocalDateTime'
     */
    getDateTimeBefore(): Promise<java_time_LocalDateTime | null>;
    /**
     * @return original return type: 'java.time.LocalDateTime'
     */
    getDateTimeBeforeSync(): java_time_LocalDateTime | null;
    /**
     * @return original return type: 'java.time.LocalDateTime'
     */
    getDateTimeAfter(): Promise<java_time_LocalDateTime | null>;
    /**
     * @return original return type: 'java.time.LocalDateTime'
     */
    getDateTimeAfterSync(): java_time_LocalDateTime | null;
    /**
     * @return original return type: 'java.time.ZoneOffset'
     */
    getOffsetBefore(): Promise<java_time_ZoneOffset | null>;
    /**
     * @return original return type: 'java.time.ZoneOffset'
     */
    getOffsetBeforeSync(): java_time_ZoneOffset | null;
    /**
     * @param var0 original type: 'java.time.ZoneOffset'
     * @return original return type: 'boolean'
     */
    isValidOffset(var0: java_time_ZoneOffset | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.time.ZoneOffset'
     * @return original return type: 'boolean'
     */
    isValidOffsetSync(var0: java_time_ZoneOffset | null): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isOverlap(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isOverlapSync(): boolean;
    /**
     * @return original return type: 'java.time.Instant'
     */
    getInstant(): Promise<java_time_Instant | null>;
    /**
     * @return original return type: 'java.time.Instant'
     */
    getInstantSync(): java_time_Instant | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const ZoneOffsetTransition_base: typeof ZoneOffsetTransitionClass;
/**
 * Class java.time.zone.ZoneOffsetTransition.
 *
 * This actually imports the java class for further use.
 * The class {@link ZoneOffsetTransitionClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ZoneOffsetTransition extends ZoneOffsetTransition_base {
}
export default ZoneOffsetTransition;
//# sourceMappingURL=ZoneOffsetTransition.d.ts.map