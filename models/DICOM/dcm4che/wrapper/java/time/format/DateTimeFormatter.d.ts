import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { TemporalAccessor as java_time_temporal_TemporalAccessor, TemporalAccessorInterface as java_time_temporal_TemporalAccessorInterface } from "./../temporal/TemporalAccessor";
import { CharSequence as java_lang_CharSequence, CharSequenceInterface as java_lang_CharSequenceInterface } from "./../../lang/CharSequence";
import { ParsePosition as java_text_ParsePosition } from "./../../text/ParsePosition";
import { TemporalQuery as java_time_temporal_TemporalQuery, TemporalQueryInterface as java_time_temporal_TemporalQueryInterface } from "./../temporal/TemporalQuery";
import { Locale as java_util_Locale } from "./../../util/Locale";
import { Appendable as java_lang_Appendable, AppendableInterface as java_lang_AppendableInterface } from "./../../lang/Appendable";
import { FormatStyle as java_time_format_FormatStyle } from "./FormatStyle";
import { DecimalStyle as java_time_format_DecimalStyle } from "./DecimalStyle";
import { Chronology as java_time_chrono_Chronology, ChronologyInterface as java_time_chrono_ChronologyInterface } from "./../chrono/Chronology";
import { ZoneId as java_time_ZoneId } from "./../ZoneId";
import { ResolverStyle as java_time_format_ResolverStyle } from "./ResolverStyle";
import { Set as java_util_Set, SetInterface as java_util_SetInterface } from "./../../util/Set";
import { TemporalField as java_time_temporal_TemporalField, TemporalFieldInterface as java_time_temporal_TemporalFieldInterface } from "./../temporal/TemporalField";
import { Format as java_text_Format } from "./../../text/Format";
import { Long as java_lang_Long } from "./../../lang/Long";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
import { Class as java_lang_Class } from "./../../lang/Class";
/**
 * This class just defines types, you should import {@link DateTimeFormatter} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DateTimeFormatterClass extends JavaClass {
    /**
     * Original type: 'java.time.format.DateTimeFormatter'
     */
    static readonly ISO_LOCAL_DATE: DateTimeFormatterClass | null;
    /**
     * Original type: 'java.time.format.DateTimeFormatter'
     */
    static readonly ISO_OFFSET_DATE: DateTimeFormatterClass | null;
    /**
     * Original type: 'java.time.format.DateTimeFormatter'
     */
    static readonly ISO_DATE: DateTimeFormatterClass | null;
    /**
     * Original type: 'java.time.format.DateTimeFormatter'
     */
    static readonly ISO_LOCAL_TIME: DateTimeFormatterClass | null;
    /**
     * Original type: 'java.time.format.DateTimeFormatter'
     */
    static readonly ISO_OFFSET_TIME: DateTimeFormatterClass | null;
    /**
     * Original type: 'java.time.format.DateTimeFormatter'
     */
    static readonly ISO_TIME: DateTimeFormatterClass | null;
    /**
     * Original type: 'java.time.format.DateTimeFormatter'
     */
    static readonly ISO_LOCAL_DATE_TIME: DateTimeFormatterClass | null;
    /**
     * Original type: 'java.time.format.DateTimeFormatter'
     */
    static readonly ISO_OFFSET_DATE_TIME: DateTimeFormatterClass | null;
    /**
     * Original type: 'java.time.format.DateTimeFormatter'
     */
    static readonly ISO_ZONED_DATE_TIME: DateTimeFormatterClass | null;
    /**
     * Original type: 'java.time.format.DateTimeFormatter'
     */
    static readonly ISO_DATE_TIME: DateTimeFormatterClass | null;
    /**
     * Original type: 'java.time.format.DateTimeFormatter'
     */
    static readonly ISO_ORDINAL_DATE: DateTimeFormatterClass | null;
    /**
     * Original type: 'java.time.format.DateTimeFormatter'
     */
    static readonly ISO_WEEK_DATE: DateTimeFormatterClass | null;
    /**
     * Original type: 'java.time.format.DateTimeFormatter'
     */
    static readonly ISO_INSTANT: DateTimeFormatterClass | null;
    /**
     * Original type: 'java.time.format.DateTimeFormatter'
     */
    static readonly BASIC_ISO_DATE: DateTimeFormatterClass | null;
    /**
     * Original type: 'java.time.format.DateTimeFormatter'
     */
    static readonly RFC_1123_DATE_TIME: DateTimeFormatterClass | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'java.lang.String'
     */
    format(var0: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'java.lang.String'
     */
    formatSync(var0: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null): string | null;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'java.text.ParsePosition'
     * @return original return type: 'java.time.temporal.TemporalAccessor'
     */
    parse(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_text_ParsePosition | null): Promise<java_time_temporal_TemporalAccessor | null>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'java.text.ParsePosition'
     * @return original return type: 'java.time.temporal.TemporalAccessor'
     */
    parseSync(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_text_ParsePosition | null): java_time_temporal_TemporalAccessor | null;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @return original return type: 'java.time.temporal.TemporalAccessor'
     */
    parse(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null): Promise<java_time_temporal_TemporalAccessor | null>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @return original return type: 'java.time.temporal.TemporalAccessor'
     */
    parseSync(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null): java_time_temporal_TemporalAccessor | null;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'java.time.temporal.TemporalQuery'
     * @return original return type: 'java.lang.Object'
     */
    parse(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_time_temporal_TemporalQuery | JavaInterfaceProxy<java_time_temporal_TemporalQueryInterface> | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'java.time.temporal.TemporalQuery'
     * @return original return type: 'java.lang.Object'
     */
    parseSync(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_time_temporal_TemporalQuery | JavaInterfaceProxy<java_time_temporal_TemporalQueryInterface> | null): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.util.Locale'
     */
    getLocale(): Promise<java_util_Locale | null>;
    /**
     * @return original return type: 'java.util.Locale'
     */
    getLocaleSync(): java_util_Locale | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @param var1 original type: 'java.lang.Appendable'
     * @return original return type: 'void'
     */
    formatTo(var0: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null, var1: java_lang_Appendable | JavaInterfaceProxy<java_lang_AppendableInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @param var1 original type: 'java.lang.Appendable'
     * @return original return type: 'void'
     */
    formatToSync(var0: java_time_temporal_TemporalAccessor | JavaInterfaceProxy<java_time_temporal_TemporalAccessorInterface> | null, var1: java_lang_Appendable | JavaInterfaceProxy<java_lang_AppendableInterface> | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    static ofPattern(var0: string | null): Promise<DateTimeFormatter | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    static ofPatternSync(var0: string | null): DateTimeFormatter | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.util.Locale'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    static ofPattern(var0: string | null, var1: java_util_Locale | null): Promise<DateTimeFormatter | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.util.Locale'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    static ofPatternSync(var0: string | null, var1: java_util_Locale | null): DateTimeFormatter | null;
    /**
     * @param var0 original type: 'java.time.format.FormatStyle'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    static ofLocalizedDate(var0: java_time_format_FormatStyle | null): Promise<DateTimeFormatter | null>;
    /**
     * @param var0 original type: 'java.time.format.FormatStyle'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    static ofLocalizedDateSync(var0: java_time_format_FormatStyle | null): DateTimeFormatter | null;
    /**
     * @param var0 original type: 'java.time.format.FormatStyle'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    static ofLocalizedTime(var0: java_time_format_FormatStyle | null): Promise<DateTimeFormatter | null>;
    /**
     * @param var0 original type: 'java.time.format.FormatStyle'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    static ofLocalizedTimeSync(var0: java_time_format_FormatStyle | null): DateTimeFormatter | null;
    /**
     * @param var0 original type: 'java.time.format.FormatStyle'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    static ofLocalizedDateTime(var0: java_time_format_FormatStyle | null): Promise<DateTimeFormatter | null>;
    /**
     * @param var0 original type: 'java.time.format.FormatStyle'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    static ofLocalizedDateTimeSync(var0: java_time_format_FormatStyle | null): DateTimeFormatter | null;
    /**
     * @param var0 original type: 'java.time.format.FormatStyle'
     * @param var1 original type: 'java.time.format.FormatStyle'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    static ofLocalizedDateTime(var0: java_time_format_FormatStyle | null, var1: java_time_format_FormatStyle | null): Promise<DateTimeFormatter | null>;
    /**
     * @param var0 original type: 'java.time.format.FormatStyle'
     * @param var1 original type: 'java.time.format.FormatStyle'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    static ofLocalizedDateTimeSync(var0: java_time_format_FormatStyle | null, var1: java_time_format_FormatStyle | null): DateTimeFormatter | null;
    /**
     * @return original return type: 'java.time.temporal.TemporalQuery'
     */
    static parsedExcessDays(): Promise<java_time_temporal_TemporalQuery | null>;
    /**
     * @return original return type: 'java.time.temporal.TemporalQuery'
     */
    static parsedExcessDaysSync(): java_time_temporal_TemporalQuery | null;
    /**
     * @return original return type: 'java.time.temporal.TemporalQuery'
     */
    static parsedLeapSecond(): Promise<java_time_temporal_TemporalQuery | null>;
    /**
     * @return original return type: 'java.time.temporal.TemporalQuery'
     */
    static parsedLeapSecondSync(): java_time_temporal_TemporalQuery | null;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    withLocale(var0: java_util_Locale | null): Promise<DateTimeFormatter | null>;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    withLocaleSync(var0: java_util_Locale | null): DateTimeFormatter | null;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    localizedBy(var0: java_util_Locale | null): Promise<DateTimeFormatter | null>;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    localizedBySync(var0: java_util_Locale | null): DateTimeFormatter | null;
    /**
     * @return original return type: 'java.time.format.DecimalStyle'
     */
    getDecimalStyle(): Promise<java_time_format_DecimalStyle | null>;
    /**
     * @return original return type: 'java.time.format.DecimalStyle'
     */
    getDecimalStyleSync(): java_time_format_DecimalStyle | null;
    /**
     * @param var0 original type: 'java.time.format.DecimalStyle'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    withDecimalStyle(var0: java_time_format_DecimalStyle | null): Promise<DateTimeFormatter | null>;
    /**
     * @param var0 original type: 'java.time.format.DecimalStyle'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    withDecimalStyleSync(var0: java_time_format_DecimalStyle | null): DateTimeFormatter | null;
    /**
     * @return original return type: 'java.time.chrono.Chronology'
     */
    getChronology(): Promise<java_time_chrono_Chronology | null>;
    /**
     * @return original return type: 'java.time.chrono.Chronology'
     */
    getChronologySync(): java_time_chrono_Chronology | null;
    /**
     * @param var0 original type: 'java.time.chrono.Chronology'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    withChronology(var0: java_time_chrono_Chronology | JavaInterfaceProxy<java_time_chrono_ChronologyInterface> | null): Promise<DateTimeFormatter | null>;
    /**
     * @param var0 original type: 'java.time.chrono.Chronology'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    withChronologySync(var0: java_time_chrono_Chronology | JavaInterfaceProxy<java_time_chrono_ChronologyInterface> | null): DateTimeFormatter | null;
    /**
     * @return original return type: 'java.time.ZoneId'
     */
    getZone(): Promise<java_time_ZoneId | null>;
    /**
     * @return original return type: 'java.time.ZoneId'
     */
    getZoneSync(): java_time_ZoneId | null;
    /**
     * @param var0 original type: 'java.time.ZoneId'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    withZone(var0: java_time_ZoneId | null): Promise<DateTimeFormatter | null>;
    /**
     * @param var0 original type: 'java.time.ZoneId'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    withZoneSync(var0: java_time_ZoneId | null): DateTimeFormatter | null;
    /**
     * @return original return type: 'java.time.format.ResolverStyle'
     */
    getResolverStyle(): Promise<java_time_format_ResolverStyle | null>;
    /**
     * @return original return type: 'java.time.format.ResolverStyle'
     */
    getResolverStyleSync(): java_time_format_ResolverStyle | null;
    /**
     * @param var0 original type: 'java.time.format.ResolverStyle'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    withResolverStyle(var0: java_time_format_ResolverStyle | null): Promise<DateTimeFormatter | null>;
    /**
     * @param var0 original type: 'java.time.format.ResolverStyle'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    withResolverStyleSync(var0: java_time_format_ResolverStyle | null): DateTimeFormatter | null;
    /**
     * @return original return type: 'java.util.Set'
     */
    getResolverFields(): Promise<java_util_Set | null>;
    /**
     * @return original return type: 'java.util.Set'
     */
    getResolverFieldsSync(): java_util_Set | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalField[]'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    withResolverFields(var0: (java_time_temporal_TemporalField | JavaInterfaceProxy<java_time_temporal_TemporalFieldInterface> | null)[] | null): Promise<DateTimeFormatter | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalField[]'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    withResolverFieldsSync(var0: (java_time_temporal_TemporalField | JavaInterfaceProxy<java_time_temporal_TemporalFieldInterface> | null)[] | null): DateTimeFormatter | null;
    /**
     * @param var0 original type: 'java.util.Set'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    withResolverFields(var0: java_util_Set | JavaInterfaceProxy<java_util_SetInterface> | null): Promise<DateTimeFormatter | null>;
    /**
     * @param var0 original type: 'java.util.Set'
     * @return original return type: 'java.time.format.DateTimeFormatter'
     */
    withResolverFieldsSync(var0: java_util_Set | JavaInterfaceProxy<java_util_SetInterface> | null): DateTimeFormatter | null;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'java.time.temporal.TemporalQuery[]'
     * @return original return type: 'java.time.temporal.TemporalAccessor'
     */
    parseBest(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: (java_time_temporal_TemporalQuery | JavaInterfaceProxy<java_time_temporal_TemporalQueryInterface> | null)[] | null): Promise<java_time_temporal_TemporalAccessor | null>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'java.time.temporal.TemporalQuery[]'
     * @return original return type: 'java.time.temporal.TemporalAccessor'
     */
    parseBestSync(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: (java_time_temporal_TemporalQuery | JavaInterfaceProxy<java_time_temporal_TemporalQueryInterface> | null)[] | null): java_time_temporal_TemporalAccessor | null;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'java.text.ParsePosition'
     * @return original return type: 'java.time.temporal.TemporalAccessor'
     */
    parseUnresolved(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_text_ParsePosition | null): Promise<java_time_temporal_TemporalAccessor | null>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'java.text.ParsePosition'
     * @return original return type: 'java.time.temporal.TemporalAccessor'
     */
    parseUnresolvedSync(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_text_ParsePosition | null): java_time_temporal_TemporalAccessor | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalQuery'
     * @return original return type: 'java.text.Format'
     */
    toFormat(var0: java_time_temporal_TemporalQuery | JavaInterfaceProxy<java_time_temporal_TemporalQueryInterface> | null): Promise<java_text_Format | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalQuery'
     * @return original return type: 'java.text.Format'
     */
    toFormatSync(var0: java_time_temporal_TemporalQuery | JavaInterfaceProxy<java_time_temporal_TemporalQueryInterface> | null): java_text_Format | null;
    /**
     * @return original return type: 'java.text.Format'
     */
    toFormat(): Promise<java_text_Format | null>;
    /**
     * @return original return type: 'java.text.Format'
     */
    toFormatSync(): java_text_Format | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const DateTimeFormatter_base: typeof DateTimeFormatterClass;
/**
 * Class java.time.format.DateTimeFormatter.
 *
 * This actually imports the java class for further use.
 * The class {@link DateTimeFormatterClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DateTimeFormatter extends DateTimeFormatter_base {
}
export default DateTimeFormatter;
//# sourceMappingURL=DateTimeFormatter.d.ts.map