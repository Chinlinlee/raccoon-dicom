import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Integer as java_lang_Integer } from "./Integer";
import { IntStream as java_util_stream_IntStream } from "./../util/stream/IntStream";
/**
 * This class just defines types, you should import {@link CharSequence} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class CharSequenceClass extends JavaClass {
    /**
     * @return original return type: 'int'
     */
    length(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    lengthSync(): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'java.lang.CharSequence'
     * @return original return type: 'int'
     */
    static compare(var0: CharSequenceClass | JavaInterfaceProxy<CharSequenceInterface> | null, var1: CharSequenceClass | JavaInterfaceProxy<CharSequenceInterface> | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'java.lang.CharSequence'
     * @return original return type: 'int'
     */
    static compareSync(var0: CharSequenceClass | JavaInterfaceProxy<CharSequenceInterface> | null, var1: CharSequenceClass | JavaInterfaceProxy<CharSequenceInterface> | null): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'char'
     */
    charAt(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'char'
     */
    charAtSync(var0: java_lang_Integer | number): string | null;
    /**
     * @return original return type: 'boolean'
     */
    isEmpty(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isEmptySync(): boolean;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    codePoints(): Promise<java_util_stream_IntStream | null>;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    codePointsSync(): java_util_stream_IntStream | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.CharSequence'
     */
    subSequence(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<CharSequence | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.CharSequence'
     */
    subSequenceSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): CharSequence | null;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    chars(): Promise<java_util_stream_IntStream | null>;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    charsSync(): java_util_stream_IntStream | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createCharSequenceProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface CharSequenceInterface {
    /**
     * @return original return type: 'int'
     */
    length(): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): string;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'char'
     */
    charAt(var0: java_lang_Integer | number): string | null;
    /**
     * @return original return type: 'boolean'
     */
    isEmpty?(): boolean;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    codePoints?(): java_util_stream_IntStream | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.CharSequence'
     */
    subSequence(var0: java_lang_Integer | number, var1: java_lang_Integer | number): CharSequence | null;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    chars?(): java_util_stream_IntStream | null;
}
/**
 * Create a proxy for the {@link CharSequence} interface.
 * All required methods in {@link CharSequenceInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createCharSequenceProxy(methods: CharSequenceInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<CharSequenceInterface>;
declare const CharSequence_base: typeof CharSequenceClass;
/**
 * Class java.lang.CharSequence.
 *
 * This actually imports the java class for further use.
 * The class {@link CharSequenceClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class CharSequence extends CharSequence_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default CharSequence;
//# sourceMappingURL=CharSequence.d.ts.map