import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { CharSequence as java_lang_CharSequence, CharSequenceInterface as java_lang_CharSequenceInterface } from "./CharSequence";
import { Integer as java_lang_Integer } from "./Integer";
/**
 * This class just defines types, you should import {@link Appendable} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class AppendableClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @return original return type: 'java.lang.Appendable'
     */
    append(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null): Promise<Appendable | null>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @return original return type: 'java.lang.Appendable'
     */
    appendSync(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null): Appendable | null;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.lang.Appendable'
     */
    append(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<Appendable | null>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.lang.Appendable'
     */
    appendSync(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Appendable | null;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'java.lang.Appendable'
     */
    append(var0: string | null): Promise<Appendable | null>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'java.lang.Appendable'
     */
    appendSync(var0: string | null): Appendable | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createAppendableProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface AppendableInterface {
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @return original return type: 'java.lang.Appendable'
     */
    append(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null): Appendable | null;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.lang.Appendable'
     */
    append(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Appendable | null;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'java.lang.Appendable'
     */
    append(var0: string | null): Appendable | null;
}
/**
 * Create a proxy for the {@link Appendable} interface.
 * All required methods in {@link AppendableInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createAppendableProxy(methods: AppendableInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<AppendableInterface>;
declare const Appendable_base: typeof AppendableClass;
/**
 * Class java.lang.Appendable.
 *
 * This actually imports the java class for further use.
 * The class {@link AppendableClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Appendable extends Appendable_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Appendable;
//# sourceMappingURL=Appendable.d.ts.map