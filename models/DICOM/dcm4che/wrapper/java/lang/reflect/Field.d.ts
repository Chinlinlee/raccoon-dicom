import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Integer as java_lang_Integer } from "./../Integer";
import { Class as java_lang_Class } from "./../Class";
import { Annotation as java_lang_annotation_Annotation } from "./../annotation/Annotation";
import { Boolean as java_lang_Boolean } from "./../Boolean";
import { AccessibleObject as java_lang_reflect_AccessibleObject } from "./AccessibleObject";
import { Type as java_lang_reflect_Type } from "./Type";
import { Byte as java_lang_Byte } from "./../Byte";
import { Short as java_lang_Short } from "./../Short";
import { Long as java_lang_Long } from "./../Long";
import { Float as java_lang_Float } from "./../Float";
import { Double as java_lang_Double } from "./../Double";
import { AnnotatedType as java_lang_reflect_AnnotatedType } from "./AnnotatedType";
/**
 * This class just defines types, you should import {@link Field} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class FieldClass extends JavaClass {
    /**
     * Original type: 'int'
     */
    static readonly PUBLIC: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly DECLARED: java_lang_Integer | number;
    /**
     * @return original return type: 'java.lang.String'
     */
    getName(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getNameSync(): string | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    get(var0: BasicOrJavaType | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    getSync(var0: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'int'
     */
    getModifiers(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getModifiersSync(): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    getBoolean(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    getBooleanSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'byte'
     */
    getByte(var0: BasicOrJavaType | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'byte'
     */
    getByteSync(var0: BasicOrJavaType | null): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'short'
     */
    getShort(var0: BasicOrJavaType | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'short'
     */
    getShortSync(var0: BasicOrJavaType | null): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'char'
     */
    getChar(var0: BasicOrJavaType | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'char'
     */
    getCharSync(var0: BasicOrJavaType | null): string | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    getInt(var0: BasicOrJavaType | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    getIntSync(var0: BasicOrJavaType | null): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'long'
     */
    getLong(var0: BasicOrJavaType | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'long'
     */
    getLongSync(var0: BasicOrJavaType | null): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'float'
     */
    getFloat(var0: BasicOrJavaType | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'float'
     */
    getFloatSync(var0: BasicOrJavaType | null): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'double'
     */
    getDouble(var0: BasicOrJavaType | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'double'
     */
    getDoubleSync(var0: BasicOrJavaType | null): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    toGenericString(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toGenericStringSync(): string | null;
    /**
     * @return original return type: 'boolean'
     */
    isSynthetic(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isSyntheticSync(): boolean;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getDeclaringClass(): Promise<java_lang_Class | null>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getDeclaringClassSync(): java_lang_Class | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation'
     */
    getAnnotation(var0: java_lang_Class | null): Promise<java_lang_annotation_Annotation | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation'
     */
    getAnnotationSync(var0: java_lang_Class | null): java_lang_annotation_Annotation | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    getAnnotationsByType(var0: java_lang_Class | null): Promise<(java_lang_annotation_Annotation | null)[] | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    getAnnotationsByTypeSync(var0: java_lang_Class | null): (java_lang_annotation_Annotation | null)[] | null;
    /**
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    getDeclaredAnnotations(): Promise<(java_lang_annotation_Annotation | null)[] | null>;
    /**
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    getDeclaredAnnotationsSync(): (java_lang_annotation_Annotation | null)[] | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    set(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    setSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setAccessible(var0: java_lang_Boolean | boolean): Promise<void>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setAccessibleSync(var0: java_lang_Boolean | boolean): void;
    /**
     * @param var0 original type: 'java.lang.reflect.AccessibleObject[]'
     * @param var1 original type: 'boolean'
     * @return original return type: 'void'
     */
    static setAccessible(var0: (java_lang_reflect_AccessibleObject | null)[] | null, var1: java_lang_Boolean | boolean): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.reflect.AccessibleObject[]'
     * @param var1 original type: 'boolean'
     * @return original return type: 'void'
     */
    static setAccessibleSync(var0: (java_lang_reflect_AccessibleObject | null)[] | null, var1: java_lang_Boolean | boolean): void;
    /**
     * @return original return type: 'java.lang.reflect.Type'
     */
    getGenericType(): Promise<java_lang_reflect_Type | null>;
    /**
     * @return original return type: 'java.lang.reflect.Type'
     */
    getGenericTypeSync(): java_lang_reflect_Type | null;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getType(): Promise<java_lang_Class | null>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getTypeSync(): java_lang_Class | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'boolean'
     * @return original return type: 'void'
     */
    setBoolean(var0: BasicOrJavaType | null, var1: java_lang_Boolean | boolean): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'boolean'
     * @return original return type: 'void'
     */
    setBooleanSync(var0: BasicOrJavaType | null, var1: java_lang_Boolean | boolean): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'byte'
     * @return original return type: 'void'
     */
    setByte(var0: BasicOrJavaType | null, var1: java_lang_Byte | number): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'byte'
     * @return original return type: 'void'
     */
    setByteSync(var0: BasicOrJavaType | null, var1: java_lang_Byte | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'char'
     * @return original return type: 'void'
     */
    setChar(var0: BasicOrJavaType | null, var1: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'char'
     * @return original return type: 'void'
     */
    setCharSync(var0: BasicOrJavaType | null, var1: string | null): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'short'
     * @return original return type: 'void'
     */
    setShort(var0: BasicOrJavaType | null, var1: java_lang_Short | number): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'short'
     * @return original return type: 'void'
     */
    setShortSync(var0: BasicOrJavaType | null, var1: java_lang_Short | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    setInt(var0: BasicOrJavaType | null, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    setIntSync(var0: BasicOrJavaType | null, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'long'
     * @return original return type: 'void'
     */
    setLong(var0: BasicOrJavaType | null, var1: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'long'
     * @return original return type: 'void'
     */
    setLongSync(var0: BasicOrJavaType | null, var1: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'float'
     * @return original return type: 'void'
     */
    setFloat(var0: BasicOrJavaType | null, var1: java_lang_Float | number): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'float'
     * @return original return type: 'void'
     */
    setFloatSync(var0: BasicOrJavaType | null, var1: java_lang_Float | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'double'
     * @return original return type: 'void'
     */
    setDouble(var0: BasicOrJavaType | null, var1: java_lang_Double | number): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'double'
     * @return original return type: 'void'
     */
    setDoubleSync(var0: BasicOrJavaType | null, var1: java_lang_Double | number): void;
    /**
     * @return original return type: 'boolean'
     */
    isEnumConstant(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isEnumConstantSync(): boolean;
    /**
     * @return original return type: 'java.lang.reflect.AnnotatedType'
     */
    getAnnotatedType(): Promise<java_lang_reflect_AnnotatedType | null>;
    /**
     * @return original return type: 'java.lang.reflect.AnnotatedType'
     */
    getAnnotatedTypeSync(): java_lang_reflect_AnnotatedType | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'boolean'
     */
    isAnnotationPresent(var0: java_lang_Class | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'boolean'
     */
    isAnnotationPresentSync(var0: java_lang_Class | null): boolean;
    /**
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    getAnnotations(): Promise<(java_lang_annotation_Annotation | null)[] | null>;
    /**
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    getAnnotationsSync(): (java_lang_annotation_Annotation | null)[] | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation'
     */
    getDeclaredAnnotation(var0: java_lang_Class | null): Promise<java_lang_annotation_Annotation | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation'
     */
    getDeclaredAnnotationSync(var0: java_lang_Class | null): java_lang_annotation_Annotation | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    getDeclaredAnnotationsByType(var0: java_lang_Class | null): Promise<(java_lang_annotation_Annotation | null)[] | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    getDeclaredAnnotationsByTypeSync(var0: java_lang_Class | null): (java_lang_annotation_Annotation | null)[] | null;
    /**
     * @return original return type: 'boolean'
     */
    trySetAccessible(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    trySetAccessibleSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isAccessible(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isAccessibleSync(): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    canAccess(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    canAccessSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const Field_base: typeof FieldClass;
/**
 * Class java.lang.reflect.Field.
 *
 * This actually imports the java class for further use.
 * The class {@link FieldClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Field extends Field_base {
}
export default Field;
//# sourceMappingURL=Field.d.ts.map