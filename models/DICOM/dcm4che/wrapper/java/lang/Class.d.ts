import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Boolean as java_lang_Boolean } from "./Boolean";
import { ClassLoader as java_lang_ClassLoader } from "./ClassLoader";
import { Module as java_lang_Module } from "./Module";
import { ProtectionDomain as java_security_ProtectionDomain } from "./../security/ProtectionDomain";
import { TypeDescriptor$OfField as java_lang_invoke_TypeDescriptor$OfField } from "./invoke/TypeDescriptor$OfField";
import { Optional as java_util_Optional } from "./../util/Optional";
import { TypeVariable as java_lang_reflect_TypeVariable } from "./reflect/TypeVariable";
import { InputStream as java_io_InputStream } from "./../io/InputStream";
import { URL as java_net_URL } from "./../net/URL";
import { Method as java_lang_reflect_Method } from "./reflect/Method";
import { Type as java_lang_reflect_Type } from "./reflect/Type";
import { Package as java_lang_Package } from "./Package";
import { Constructor as java_lang_reflect_Constructor } from "./reflect/Constructor";
import { Field as java_lang_reflect_Field } from "./reflect/Field";
import { RecordComponent as java_lang_reflect_RecordComponent } from "./reflect/RecordComponent";
import { Annotation as java_lang_annotation_Annotation } from "./annotation/Annotation";
import { AnnotatedType as java_lang_reflect_AnnotatedType } from "./reflect/AnnotatedType";
import { Long as java_lang_Long } from "./Long";
import { Integer as java_lang_Integer } from "./Integer";
/**
 * This class just defines types, you should import {@link Class} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ClassClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.String'
     */
    getName(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getNameSync(): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'boolean'
     * @param var2 original type: 'java.lang.ClassLoader'
     * @return original return type: 'java.lang.Class'
     */
    static forName(var0: string | null, var1: java_lang_Boolean | boolean, var2: java_lang_ClassLoader | null): Promise<Class | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'boolean'
     * @param var2 original type: 'java.lang.ClassLoader'
     * @return original return type: 'java.lang.Class'
     */
    static forNameSync(var0: string | null, var1: java_lang_Boolean | boolean, var2: java_lang_ClassLoader | null): Class | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Class'
     */
    static forName(var0: string | null): Promise<Class | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Class'
     */
    static forNameSync(var0: string | null): Class | null;
    /**
     * @param var0 original type: 'java.lang.Module'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Class'
     */
    static forName(var0: java_lang_Module | null, var1: string | null): Promise<Class | null>;
    /**
     * @param var0 original type: 'java.lang.Module'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Class'
     */
    static forNameSync(var0: java_lang_Module | null, var1: string | null): Class | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'java.lang.Module'
     */
    getModule(): Promise<java_lang_Module | null>;
    /**
     * @return original return type: 'java.lang.Module'
     */
    getModuleSync(): java_lang_Module | null;
    /**
     * @return original return type: 'java.security.ProtectionDomain'
     */
    getProtectionDomain(): Promise<java_security_ProtectionDomain | null>;
    /**
     * @return original return type: 'java.security.ProtectionDomain'
     */
    getProtectionDomainSync(): java_security_ProtectionDomain | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'boolean'
     */
    isAssignableFrom(var0: ClassClass | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'boolean'
     */
    isAssignableFromSync(var0: ClassClass | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    isInstance(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    isInstanceSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    getModifiers(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getModifiersSync(): number;
    /**
     * @return original return type: 'boolean'
     */
    isInterface(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isInterfaceSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isArray(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isArraySync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isPrimitive(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isPrimitiveSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isHidden(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isHiddenSync(): boolean;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getSuperclass(): Promise<Class | null>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getSuperclassSync(): Class | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    cast(var0: BasicOrJavaType | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    castSync(var0: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfField'
     */
    componentType(): Promise<java_lang_invoke_TypeDescriptor$OfField | null>;
    /**
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfField'
     */
    componentTypeSync(): java_lang_invoke_TypeDescriptor$OfField | null;
    /**
     * @return original return type: 'java.lang.Class'
     */
    componentType(): Promise<Class | null>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    componentTypeSync(): Class | null;
    /**
     * @return original return type: 'java.util.Optional'
     */
    describeConstable(): Promise<java_util_Optional | null>;
    /**
     * @return original return type: 'java.util.Optional'
     */
    describeConstableSync(): java_util_Optional | null;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getComponentType(): Promise<Class | null>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getComponentTypeSync(): Class | null;
    /**
     * @return original return type: 'boolean'
     */
    isAnnotation(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isAnnotationSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isEnum(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isEnumSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isRecord(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isRecordSync(): boolean;
    /**
     * @return original return type: 'java.lang.reflect.TypeVariable[]'
     */
    getTypeParameters(): Promise<(java_lang_reflect_TypeVariable | null)[] | null>;
    /**
     * @return original return type: 'java.lang.reflect.TypeVariable[]'
     */
    getTypeParametersSync(): (java_lang_reflect_TypeVariable | null)[] | null;
    /**
     * @return original return type: 'java.lang.ClassLoader'
     */
    getClassLoader(): Promise<java_lang_ClassLoader | null>;
    /**
     * @return original return type: 'java.lang.ClassLoader'
     */
    getClassLoaderSync(): java_lang_ClassLoader | null;
    /**
     * @return original return type: 'java.lang.Object'
     */
    newInstance(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    newInstanceSync(): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.lang.Class[]'
     */
    getInterfaces(): Promise<(Class | null)[] | null>;
    /**
     * @return original return type: 'java.lang.Class[]'
     */
    getInterfacesSync(): (Class | null)[] | null;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getEnclosingClass(): Promise<Class | null>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getEnclosingClassSync(): Class | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getSimpleName(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getSimpleNameSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getCanonicalName(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getCanonicalNameSync(): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.io.InputStream'
     */
    getResourceAsStream(var0: string | null): Promise<java_io_InputStream | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.io.InputStream'
     */
    getResourceAsStreamSync(var0: string | null): java_io_InputStream | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.net.URL'
     */
    getResource(var0: string | null): Promise<java_net_URL | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.net.URL'
     */
    getResourceSync(var0: string | null): java_net_URL | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPackageName(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPackageNameSync(): string | null;
    /**
     * @return original return type: 'boolean'
     */
    desiredAssertionStatus(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    desiredAssertionStatusSync(): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Class[]'
     * @return original return type: 'java.lang.reflect.Method'
     */
    getMethod(var0: string | null, var1: (ClassClass | null)[] | null): Promise<java_lang_reflect_Method | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Class[]'
     * @return original return type: 'java.lang.reflect.Method'
     */
    getMethodSync(var0: string | null, var1: (ClassClass | null)[] | null): java_lang_reflect_Method | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'boolean'
     */
    isAnnotationPresent(var0: ClassClass | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'boolean'
     */
    isAnnotationPresentSync(var0: ClassClass | null): boolean;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getNestHost(): Promise<Class | null>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getNestHostSync(): Class | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    descriptorString(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    descriptorStringSync(): string | null;
    /**
     * @return original return type: 'java.lang.Class[]'
     */
    getPermittedSubclasses(): Promise<(Class | null)[] | null>;
    /**
     * @return original return type: 'java.lang.Class[]'
     */
    getPermittedSubclassesSync(): (Class | null)[] | null;
    /**
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfField'
     */
    arrayType(): Promise<java_lang_invoke_TypeDescriptor$OfField | null>;
    /**
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfField'
     */
    arrayTypeSync(): java_lang_invoke_TypeDescriptor$OfField | null;
    /**
     * @return original return type: 'java.lang.Class'
     */
    arrayType(): Promise<Class | null>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    arrayTypeSync(): Class | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    toGenericString(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toGenericStringSync(): string | null;
    /**
     * @return original return type: 'boolean'
     */
    isSynthetic(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isSyntheticSync(): boolean;
    /**
     * @return original return type: 'java.lang.reflect.Type'
     */
    getGenericSuperclass(): Promise<java_lang_reflect_Type | null>;
    /**
     * @return original return type: 'java.lang.reflect.Type'
     */
    getGenericSuperclassSync(): java_lang_reflect_Type | null;
    /**
     * @return original return type: 'java.lang.Package'
     */
    getPackage(): Promise<java_lang_Package | null>;
    /**
     * @return original return type: 'java.lang.Package'
     */
    getPackageSync(): java_lang_Package | null;
    /**
     * @return original return type: 'java.lang.reflect.Type[]'
     */
    getGenericInterfaces(): Promise<(java_lang_reflect_Type | null)[] | null>;
    /**
     * @return original return type: 'java.lang.reflect.Type[]'
     */
    getGenericInterfacesSync(): (java_lang_reflect_Type | null)[] | null;
    /**
     * @return original return type: 'java.lang.Object[]'
     */
    getSigners(): Promise<(BasicOrJavaType | null)[] | null>;
    /**
     * @return original return type: 'java.lang.Object[]'
     */
    getSignersSync(): (BasicOrJavaType | null)[] | null;
    /**
     * @return original return type: 'java.lang.reflect.Method'
     */
    getEnclosingMethod(): Promise<java_lang_reflect_Method | null>;
    /**
     * @return original return type: 'java.lang.reflect.Method'
     */
    getEnclosingMethodSync(): java_lang_reflect_Method | null;
    /**
     * @return original return type: 'java.lang.reflect.Constructor'
     */
    getEnclosingConstructor(): Promise<java_lang_reflect_Constructor | null>;
    /**
     * @return original return type: 'java.lang.reflect.Constructor'
     */
    getEnclosingConstructorSync(): java_lang_reflect_Constructor | null;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getDeclaringClass(): Promise<Class | null>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getDeclaringClassSync(): Class | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getTypeName(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getTypeNameSync(): string | null;
    /**
     * @return original return type: 'boolean'
     */
    isAnonymousClass(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isAnonymousClassSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isLocalClass(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isLocalClassSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isMemberClass(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isMemberClassSync(): boolean;
    /**
     * @return original return type: 'java.lang.Class[]'
     */
    getClasses(): Promise<(Class | null)[] | null>;
    /**
     * @return original return type: 'java.lang.Class[]'
     */
    getClassesSync(): (Class | null)[] | null;
    /**
     * @return original return type: 'java.lang.reflect.Field[]'
     */
    getFields(): Promise<(java_lang_reflect_Field | null)[] | null>;
    /**
     * @return original return type: 'java.lang.reflect.Field[]'
     */
    getFieldsSync(): (java_lang_reflect_Field | null)[] | null;
    /**
     * @return original return type: 'java.lang.reflect.Method[]'
     */
    getMethods(): Promise<(java_lang_reflect_Method | null)[] | null>;
    /**
     * @return original return type: 'java.lang.reflect.Method[]'
     */
    getMethodsSync(): (java_lang_reflect_Method | null)[] | null;
    /**
     * @return original return type: 'java.lang.reflect.Constructor[]'
     */
    getConstructors(): Promise<(java_lang_reflect_Constructor | null)[] | null>;
    /**
     * @return original return type: 'java.lang.reflect.Constructor[]'
     */
    getConstructorsSync(): (java_lang_reflect_Constructor | null)[] | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.reflect.Field'
     */
    getField(var0: string | null): Promise<java_lang_reflect_Field | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.reflect.Field'
     */
    getFieldSync(var0: string | null): java_lang_reflect_Field | null;
    /**
     * @param var0 original type: 'java.lang.Class[]'
     * @return original return type: 'java.lang.reflect.Constructor'
     */
    getConstructor(var0: (ClassClass | null)[] | null): Promise<java_lang_reflect_Constructor | null>;
    /**
     * @param var0 original type: 'java.lang.Class[]'
     * @return original return type: 'java.lang.reflect.Constructor'
     */
    getConstructorSync(var0: (ClassClass | null)[] | null): java_lang_reflect_Constructor | null;
    /**
     * @return original return type: 'java.lang.Class[]'
     */
    getDeclaredClasses(): Promise<(Class | null)[] | null>;
    /**
     * @return original return type: 'java.lang.Class[]'
     */
    getDeclaredClassesSync(): (Class | null)[] | null;
    /**
     * @return original return type: 'java.lang.reflect.Field[]'
     */
    getDeclaredFields(): Promise<(java_lang_reflect_Field | null)[] | null>;
    /**
     * @return original return type: 'java.lang.reflect.Field[]'
     */
    getDeclaredFieldsSync(): (java_lang_reflect_Field | null)[] | null;
    /**
     * @return original return type: 'java.lang.reflect.RecordComponent[]'
     */
    getRecordComponents(): Promise<(java_lang_reflect_RecordComponent | null)[] | null>;
    /**
     * @return original return type: 'java.lang.reflect.RecordComponent[]'
     */
    getRecordComponentsSync(): (java_lang_reflect_RecordComponent | null)[] | null;
    /**
     * @return original return type: 'java.lang.reflect.Method[]'
     */
    getDeclaredMethods(): Promise<(java_lang_reflect_Method | null)[] | null>;
    /**
     * @return original return type: 'java.lang.reflect.Method[]'
     */
    getDeclaredMethodsSync(): (java_lang_reflect_Method | null)[] | null;
    /**
     * @return original return type: 'java.lang.reflect.Constructor[]'
     */
    getDeclaredConstructors(): Promise<(java_lang_reflect_Constructor | null)[] | null>;
    /**
     * @return original return type: 'java.lang.reflect.Constructor[]'
     */
    getDeclaredConstructorsSync(): (java_lang_reflect_Constructor | null)[] | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.reflect.Field'
     */
    getDeclaredField(var0: string | null): Promise<java_lang_reflect_Field | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.reflect.Field'
     */
    getDeclaredFieldSync(var0: string | null): java_lang_reflect_Field | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Class[]'
     * @return original return type: 'java.lang.reflect.Method'
     */
    getDeclaredMethod(var0: string | null, var1: (ClassClass | null)[] | null): Promise<java_lang_reflect_Method | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Class[]'
     * @return original return type: 'java.lang.reflect.Method'
     */
    getDeclaredMethodSync(var0: string | null, var1: (ClassClass | null)[] | null): java_lang_reflect_Method | null;
    /**
     * @param var0 original type: 'java.lang.Class[]'
     * @return original return type: 'java.lang.reflect.Constructor'
     */
    getDeclaredConstructor(var0: (ClassClass | null)[] | null): Promise<java_lang_reflect_Constructor | null>;
    /**
     * @param var0 original type: 'java.lang.Class[]'
     * @return original return type: 'java.lang.reflect.Constructor'
     */
    getDeclaredConstructorSync(var0: (ClassClass | null)[] | null): java_lang_reflect_Constructor | null;
    /**
     * @return original return type: 'java.lang.Object[]'
     */
    getEnumConstants(): Promise<(BasicOrJavaType | null)[] | null>;
    /**
     * @return original return type: 'java.lang.Object[]'
     */
    getEnumConstantsSync(): (BasicOrJavaType | null)[] | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.Class'
     */
    asSubclass(var0: ClassClass | null): Promise<Class | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.Class'
     */
    asSubclassSync(var0: ClassClass | null): Class | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation'
     */
    getAnnotation(var0: ClassClass | null): Promise<java_lang_annotation_Annotation | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation'
     */
    getAnnotationSync(var0: ClassClass | null): java_lang_annotation_Annotation | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    getAnnotationsByType(var0: ClassClass | null): Promise<(java_lang_annotation_Annotation | null)[] | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    getAnnotationsByTypeSync(var0: ClassClass | null): (java_lang_annotation_Annotation | null)[] | null;
    /**
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    getAnnotations(): Promise<(java_lang_annotation_Annotation | null)[] | null>;
    /**
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    getAnnotationsSync(): (java_lang_annotation_Annotation | null)[] | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation'
     */
    getDeclaredAnnotation(var0: ClassClass | null): Promise<java_lang_annotation_Annotation | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation'
     */
    getDeclaredAnnotationSync(var0: ClassClass | null): java_lang_annotation_Annotation | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    getDeclaredAnnotationsByType(var0: ClassClass | null): Promise<(java_lang_annotation_Annotation | null)[] | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    getDeclaredAnnotationsByTypeSync(var0: ClassClass | null): (java_lang_annotation_Annotation | null)[] | null;
    /**
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    getDeclaredAnnotations(): Promise<(java_lang_annotation_Annotation | null)[] | null>;
    /**
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    getDeclaredAnnotationsSync(): (java_lang_annotation_Annotation | null)[] | null;
    /**
     * @return original return type: 'java.lang.reflect.AnnotatedType'
     */
    getAnnotatedSuperclass(): Promise<java_lang_reflect_AnnotatedType | null>;
    /**
     * @return original return type: 'java.lang.reflect.AnnotatedType'
     */
    getAnnotatedSuperclassSync(): java_lang_reflect_AnnotatedType | null;
    /**
     * @return original return type: 'java.lang.reflect.AnnotatedType[]'
     */
    getAnnotatedInterfaces(): Promise<(java_lang_reflect_AnnotatedType | null)[] | null>;
    /**
     * @return original return type: 'java.lang.reflect.AnnotatedType[]'
     */
    getAnnotatedInterfacesSync(): (java_lang_reflect_AnnotatedType | null)[] | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'boolean'
     */
    isNestmateOf(var0: ClassClass | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'boolean'
     */
    isNestmateOfSync(var0: ClassClass | null): boolean;
    /**
     * @return original return type: 'java.lang.Class[]'
     */
    getNestMembers(): Promise<(Class | null)[] | null>;
    /**
     * @return original return type: 'java.lang.Class[]'
     */
    getNestMembersSync(): (Class | null)[] | null;
    /**
     * @return original return type: 'boolean'
     */
    isSealed(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isSealedSync(): boolean;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const Class_base: typeof ClassClass;
/**
 * Class java.lang.Class.
 *
 * This actually imports the java class for further use.
 * The class {@link ClassClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Class extends Class_base {
}
export default Class;
//# sourceMappingURL=Class.d.ts.map