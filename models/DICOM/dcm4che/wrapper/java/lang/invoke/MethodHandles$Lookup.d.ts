/// <reference types="node" />
import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Integer as java_lang_Integer } from "./../Integer";
import { Class as java_lang_Class } from "./../Class";
import { MethodHandleInfo as java_lang_invoke_MethodHandleInfo } from "./MethodHandleInfo";
import { MethodHandle as java_lang_invoke_MethodHandle } from "./MethodHandle";
import { MethodType as java_lang_invoke_MethodType } from "./MethodType";
import { Boolean as java_lang_Boolean } from "./../Boolean";
import { MethodHandles$Lookup$ClassOption as java_lang_invoke_MethodHandles$Lookup$ClassOption } from "./MethodHandles$Lookup$ClassOption";
import { VarHandle as java_lang_invoke_VarHandle } from "./VarHandle";
import { Method as java_lang_reflect_Method } from "./../reflect/Method";
import { Constructor as java_lang_reflect_Constructor } from "./../reflect/Constructor";
import { Field as java_lang_reflect_Field } from "./../reflect/Field";
import { Long as java_lang_Long } from "./../Long";
/**
 * This class just defines types, you should import {@link MethodHandles$Lookup} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class MethodHandles$LookupClass extends JavaClass {
    /**
     * Original type: 'int'
     */
    static readonly PUBLIC: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly PRIVATE: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly PROTECTED: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly PACKAGE: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly MODULE: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly UNCONDITIONAL: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly ORIGINAL: java_lang_Integer | number;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Class'
     */
    findClass(var0: string | null): Promise<java_lang_Class | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Class'
     */
    findClassSync(var0: string | null): java_lang_Class | null;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'java.lang.Class'
     */
    defineClass(var0: Buffer | null): Promise<java_lang_Class | null>;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'java.lang.Class'
     */
    defineClassSync(var0: Buffer | null): java_lang_Class | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.invoke.MethodHandles$Lookup'
     */
    in(var0: java_lang_Class | null): Promise<MethodHandles$Lookup | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.invoke.MethodHandles$Lookup'
     */
    inSync(var0: java_lang_Class | null): MethodHandles$Lookup | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.Class'
     */
    ensureInitialized(var0: java_lang_Class | null): Promise<java_lang_Class | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.Class'
     */
    ensureInitializedSync(var0: java_lang_Class | null): java_lang_Class | null;
    /**
     * @param var0 original type: 'java.lang.invoke.MethodHandle'
     * @return original return type: 'java.lang.invoke.MethodHandleInfo'
     */
    revealDirect(var0: java_lang_invoke_MethodHandle | null): Promise<java_lang_invoke_MethodHandleInfo | null>;
    /**
     * @param var0 original type: 'java.lang.invoke.MethodHandle'
     * @return original return type: 'java.lang.invoke.MethodHandleInfo'
     */
    revealDirectSync(var0: java_lang_invoke_MethodHandle | null): java_lang_invoke_MethodHandleInfo | null;
    /**
     * @return original return type: 'java.lang.Class'
     */
    lookupClass(): Promise<java_lang_Class | null>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    lookupClassSync(): java_lang_Class | null;
    /**
     * @return original return type: 'java.lang.Class'
     */
    previousLookupClass(): Promise<java_lang_Class | null>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    previousLookupClassSync(): java_lang_Class | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.invoke.MethodType'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    findVirtual(var0: java_lang_Class | null, var1: string | null, var2: java_lang_invoke_MethodType | null): Promise<java_lang_invoke_MethodHandle | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.invoke.MethodType'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    findVirtualSync(var0: java_lang_Class | null, var1: string | null, var2: java_lang_invoke_MethodType | null): java_lang_invoke_MethodHandle | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.invoke.MethodType'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    findStatic(var0: java_lang_Class | null, var1: string | null, var2: java_lang_invoke_MethodType | null): Promise<java_lang_invoke_MethodHandle | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.invoke.MethodType'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    findStaticSync(var0: java_lang_Class | null, var1: string | null, var2: java_lang_invoke_MethodType | null): java_lang_invoke_MethodHandle | null;
    /**
     * @return original return type: 'int'
     */
    lookupModes(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    lookupModesSync(): number;
    /**
     * @return original return type: 'boolean'
     */
    hasFullPrivilegeAccess(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasFullPrivilegeAccessSync(): boolean;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.Class'
     */
    accessClass(var0: java_lang_Class | null): Promise<java_lang_Class | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.Class'
     */
    accessClassSync(var0: java_lang_Class | null): java_lang_Class | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.invoke.MethodHandles$Lookup'
     */
    dropLookupMode(var0: java_lang_Integer | number): Promise<MethodHandles$Lookup | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.invoke.MethodHandles$Lookup'
     */
    dropLookupModeSync(var0: java_lang_Integer | number): MethodHandles$Lookup | null;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'boolean'
     * @param var2 original type: 'java.lang.invoke.MethodHandles$Lookup$ClassOption[]'
     * @return original return type: 'java.lang.invoke.MethodHandles$Lookup'
     */
    defineHiddenClass(var0: Buffer | null, var1: java_lang_Boolean | boolean, var2: (java_lang_invoke_MethodHandles$Lookup$ClassOption | null)[] | null): Promise<MethodHandles$Lookup | null>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'boolean'
     * @param var2 original type: 'java.lang.invoke.MethodHandles$Lookup$ClassOption[]'
     * @return original return type: 'java.lang.invoke.MethodHandles$Lookup'
     */
    defineHiddenClassSync(var0: Buffer | null, var1: java_lang_Boolean | boolean, var2: (java_lang_invoke_MethodHandles$Lookup$ClassOption | null)[] | null): MethodHandles$Lookup | null;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'boolean'
     * @param var3 original type: 'java.lang.invoke.MethodHandles$Lookup$ClassOption[]'
     * @return original return type: 'java.lang.invoke.MethodHandles$Lookup'
     */
    defineHiddenClassWithClassData(var0: Buffer | null, var1: BasicOrJavaType | null, var2: java_lang_Boolean | boolean, var3: (java_lang_invoke_MethodHandles$Lookup$ClassOption | null)[] | null): Promise<MethodHandles$Lookup | null>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'boolean'
     * @param var3 original type: 'java.lang.invoke.MethodHandles$Lookup$ClassOption[]'
     * @return original return type: 'java.lang.invoke.MethodHandles$Lookup'
     */
    defineHiddenClassWithClassDataSync(var0: Buffer | null, var1: BasicOrJavaType | null, var2: java_lang_Boolean | boolean, var3: (java_lang_invoke_MethodHandles$Lookup$ClassOption | null)[] | null): MethodHandles$Lookup | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.invoke.MethodType'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    findConstructor(var0: java_lang_Class | null, var1: java_lang_invoke_MethodType | null): Promise<java_lang_invoke_MethodHandle | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.invoke.MethodType'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    findConstructorSync(var0: java_lang_Class | null, var1: java_lang_invoke_MethodType | null): java_lang_invoke_MethodHandle | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.invoke.MethodType'
     * @param var3 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    findSpecial(var0: java_lang_Class | null, var1: string | null, var2: java_lang_invoke_MethodType | null, var3: java_lang_Class | null): Promise<java_lang_invoke_MethodHandle | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.invoke.MethodType'
     * @param var3 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    findSpecialSync(var0: java_lang_Class | null, var1: string | null, var2: java_lang_invoke_MethodType | null, var3: java_lang_Class | null): java_lang_invoke_MethodHandle | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    findGetter(var0: java_lang_Class | null, var1: string | null, var2: java_lang_Class | null): Promise<java_lang_invoke_MethodHandle | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    findGetterSync(var0: java_lang_Class | null, var1: string | null, var2: java_lang_Class | null): java_lang_invoke_MethodHandle | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    findSetter(var0: java_lang_Class | null, var1: string | null, var2: java_lang_Class | null): Promise<java_lang_invoke_MethodHandle | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    findSetterSync(var0: java_lang_Class | null, var1: string | null, var2: java_lang_Class | null): java_lang_invoke_MethodHandle | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.invoke.VarHandle'
     */
    findVarHandle(var0: java_lang_Class | null, var1: string | null, var2: java_lang_Class | null): Promise<java_lang_invoke_VarHandle | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.invoke.VarHandle'
     */
    findVarHandleSync(var0: java_lang_Class | null, var1: string | null, var2: java_lang_Class | null): java_lang_invoke_VarHandle | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    findStaticGetter(var0: java_lang_Class | null, var1: string | null, var2: java_lang_Class | null): Promise<java_lang_invoke_MethodHandle | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    findStaticGetterSync(var0: java_lang_Class | null, var1: string | null, var2: java_lang_Class | null): java_lang_invoke_MethodHandle | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    findStaticSetter(var0: java_lang_Class | null, var1: string | null, var2: java_lang_Class | null): Promise<java_lang_invoke_MethodHandle | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    findStaticSetterSync(var0: java_lang_Class | null, var1: string | null, var2: java_lang_Class | null): java_lang_invoke_MethodHandle | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.invoke.VarHandle'
     */
    findStaticVarHandle(var0: java_lang_Class | null, var1: string | null, var2: java_lang_Class | null): Promise<java_lang_invoke_VarHandle | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.invoke.VarHandle'
     */
    findStaticVarHandleSync(var0: java_lang_Class | null, var1: string | null, var2: java_lang_Class | null): java_lang_invoke_VarHandle | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.invoke.MethodType'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    bind(var0: BasicOrJavaType | null, var1: string | null, var2: java_lang_invoke_MethodType | null): Promise<java_lang_invoke_MethodHandle | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.invoke.MethodType'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    bindSync(var0: BasicOrJavaType | null, var1: string | null, var2: java_lang_invoke_MethodType | null): java_lang_invoke_MethodHandle | null;
    /**
     * @param var0 original type: 'java.lang.reflect.Method'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    unreflect(var0: java_lang_reflect_Method | null): Promise<java_lang_invoke_MethodHandle | null>;
    /**
     * @param var0 original type: 'java.lang.reflect.Method'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    unreflectSync(var0: java_lang_reflect_Method | null): java_lang_invoke_MethodHandle | null;
    /**
     * @param var0 original type: 'java.lang.reflect.Method'
     * @param var1 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    unreflectSpecial(var0: java_lang_reflect_Method | null, var1: java_lang_Class | null): Promise<java_lang_invoke_MethodHandle | null>;
    /**
     * @param var0 original type: 'java.lang.reflect.Method'
     * @param var1 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    unreflectSpecialSync(var0: java_lang_reflect_Method | null, var1: java_lang_Class | null): java_lang_invoke_MethodHandle | null;
    /**
     * @param var0 original type: 'java.lang.reflect.Constructor'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    unreflectConstructor(var0: java_lang_reflect_Constructor | null): Promise<java_lang_invoke_MethodHandle | null>;
    /**
     * @param var0 original type: 'java.lang.reflect.Constructor'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    unreflectConstructorSync(var0: java_lang_reflect_Constructor | null): java_lang_invoke_MethodHandle | null;
    /**
     * @param var0 original type: 'java.lang.reflect.Field'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    unreflectGetter(var0: java_lang_reflect_Field | null): Promise<java_lang_invoke_MethodHandle | null>;
    /**
     * @param var0 original type: 'java.lang.reflect.Field'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    unreflectGetterSync(var0: java_lang_reflect_Field | null): java_lang_invoke_MethodHandle | null;
    /**
     * @param var0 original type: 'java.lang.reflect.Field'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    unreflectSetter(var0: java_lang_reflect_Field | null): Promise<java_lang_invoke_MethodHandle | null>;
    /**
     * @param var0 original type: 'java.lang.reflect.Field'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    unreflectSetterSync(var0: java_lang_reflect_Field | null): java_lang_invoke_MethodHandle | null;
    /**
     * @param var0 original type: 'java.lang.reflect.Field'
     * @return original return type: 'java.lang.invoke.VarHandle'
     */
    unreflectVarHandle(var0: java_lang_reflect_Field | null): Promise<java_lang_invoke_VarHandle | null>;
    /**
     * @param var0 original type: 'java.lang.reflect.Field'
     * @return original return type: 'java.lang.invoke.VarHandle'
     */
    unreflectVarHandleSync(var0: java_lang_reflect_Field | null): java_lang_invoke_VarHandle | null;
    /**
     * @return original return type: 'boolean'
     */
    hasPrivateAccess(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasPrivateAccessSync(): boolean;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const MethodHandles$Lookup_base: typeof MethodHandles$LookupClass;
/**
 * Class java.lang.invoke.MethodHandles$Lookup.
 *
 * This actually imports the java class for further use.
 * The class {@link MethodHandles$LookupClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class MethodHandles$Lookup extends MethodHandles$Lookup_base {
}
export default MethodHandles$Lookup;
//# sourceMappingURL=MethodHandles$Lookup.d.ts.map