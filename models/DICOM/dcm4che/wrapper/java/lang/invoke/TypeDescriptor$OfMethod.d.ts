import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { TypeDescriptor$OfField as java_lang_invoke_TypeDescriptor$OfField, TypeDescriptor$OfFieldInterface as java_lang_invoke_TypeDescriptor$OfFieldInterface } from "./TypeDescriptor$OfField";
import { Integer as java_lang_Integer } from "./../Integer";
import { List as java_util_List } from "./../../util/List";
/**
 * This class just defines types, you should import {@link TypeDescriptor$OfMethod} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class TypeDescriptor$OfMethodClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfField'
     */
    returnType(): Promise<java_lang_invoke_TypeDescriptor$OfField | null>;
    /**
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfField'
     */
    returnTypeSync(): java_lang_invoke_TypeDescriptor$OfField | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfField'
     */
    parameterType(var0: java_lang_Integer | number): Promise<java_lang_invoke_TypeDescriptor$OfField | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfField'
     */
    parameterTypeSync(var0: java_lang_Integer | number): java_lang_invoke_TypeDescriptor$OfField | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.lang.invoke.TypeDescriptor$OfField[]'
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfMethod'
     */
    insertParameterTypes(var0: java_lang_Integer | number, var1: (java_lang_invoke_TypeDescriptor$OfField | JavaInterfaceProxy<java_lang_invoke_TypeDescriptor$OfFieldInterface> | null)[] | null): Promise<TypeDescriptor$OfMethod | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.lang.invoke.TypeDescriptor$OfField[]'
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfMethod'
     */
    insertParameterTypesSync(var0: java_lang_Integer | number, var1: (java_lang_invoke_TypeDescriptor$OfField | JavaInterfaceProxy<java_lang_invoke_TypeDescriptor$OfFieldInterface> | null)[] | null): TypeDescriptor$OfMethod | null;
    /**
     * @param var0 original type: 'java.lang.invoke.TypeDescriptor$OfField'
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfMethod'
     */
    changeReturnType(var0: java_lang_invoke_TypeDescriptor$OfField | JavaInterfaceProxy<java_lang_invoke_TypeDescriptor$OfFieldInterface> | null): Promise<TypeDescriptor$OfMethod | null>;
    /**
     * @param var0 original type: 'java.lang.invoke.TypeDescriptor$OfField'
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfMethod'
     */
    changeReturnTypeSync(var0: java_lang_invoke_TypeDescriptor$OfField | JavaInterfaceProxy<java_lang_invoke_TypeDescriptor$OfFieldInterface> | null): TypeDescriptor$OfMethod | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfMethod'
     */
    dropParameterTypes(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<TypeDescriptor$OfMethod | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfMethod'
     */
    dropParameterTypesSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): TypeDescriptor$OfMethod | null;
    /**
     * @return original return type: 'int'
     */
    parameterCount(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    parameterCountSync(): number;
    /**
     * @return original return type: 'java.util.List'
     */
    parameterList(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    parameterListSync(): java_util_List | null;
    /**
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfField[]'
     */
    parameterArray(): Promise<(java_lang_invoke_TypeDescriptor$OfField | null)[] | null>;
    /**
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfField[]'
     */
    parameterArraySync(): (java_lang_invoke_TypeDescriptor$OfField | null)[] | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.lang.invoke.TypeDescriptor$OfField'
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfMethod'
     */
    changeParameterType(var0: java_lang_Integer | number, var1: java_lang_invoke_TypeDescriptor$OfField | JavaInterfaceProxy<java_lang_invoke_TypeDescriptor$OfFieldInterface> | null): Promise<TypeDescriptor$OfMethod | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.lang.invoke.TypeDescriptor$OfField'
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfMethod'
     */
    changeParameterTypeSync(var0: java_lang_Integer | number, var1: java_lang_invoke_TypeDescriptor$OfField | JavaInterfaceProxy<java_lang_invoke_TypeDescriptor$OfFieldInterface> | null): TypeDescriptor$OfMethod | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    descriptorString(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    descriptorStringSync(): string | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createTypeDescriptor$OfMethodProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface TypeDescriptor$OfMethodInterface {
    /**
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfField'
     */
    returnType(): java_lang_invoke_TypeDescriptor$OfField | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfField'
     */
    parameterType(var0: java_lang_Integer | number): java_lang_invoke_TypeDescriptor$OfField | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.lang.invoke.TypeDescriptor$OfField[]'
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfMethod'
     */
    insertParameterTypes(var0: java_lang_Integer | number, var1: (java_lang_invoke_TypeDescriptor$OfField | JavaInterfaceProxy<java_lang_invoke_TypeDescriptor$OfFieldInterface> | null)[] | null): TypeDescriptor$OfMethod | null;
    /**
     * @param var0 original type: 'java.lang.invoke.TypeDescriptor$OfField'
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfMethod'
     */
    changeReturnType(var0: java_lang_invoke_TypeDescriptor$OfField | JavaInterfaceProxy<java_lang_invoke_TypeDescriptor$OfFieldInterface> | null): TypeDescriptor$OfMethod | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfMethod'
     */
    dropParameterTypes(var0: java_lang_Integer | number, var1: java_lang_Integer | number): TypeDescriptor$OfMethod | null;
    /**
     * @return original return type: 'int'
     */
    parameterCount(): number;
    /**
     * @return original return type: 'java.util.List'
     */
    parameterList(): java_util_List | null;
    /**
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfField[]'
     */
    parameterArray(): (java_lang_invoke_TypeDescriptor$OfField | null)[] | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.lang.invoke.TypeDescriptor$OfField'
     * @return original return type: 'java.lang.invoke.TypeDescriptor$OfMethod'
     */
    changeParameterType(var0: java_lang_Integer | number, var1: java_lang_invoke_TypeDescriptor$OfField | JavaInterfaceProxy<java_lang_invoke_TypeDescriptor$OfFieldInterface> | null): TypeDescriptor$OfMethod | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    descriptorString(): string | null;
}
/**
 * Create a proxy for the {@link TypeDescriptor$OfMethod} interface.
 * All required methods in {@link TypeDescriptor$OfMethodInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createTypeDescriptor$OfMethodProxy(methods: TypeDescriptor$OfMethodInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<TypeDescriptor$OfMethodInterface>;
declare const TypeDescriptor$OfMethod_base: typeof TypeDescriptor$OfMethodClass;
/**
 * Class java.lang.invoke.TypeDescriptor$OfMethod.
 *
 * This actually imports the java class for further use.
 * The class {@link TypeDescriptor$OfMethodClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class TypeDescriptor$OfMethod extends TypeDescriptor$OfMethod_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default TypeDescriptor$OfMethod;
//# sourceMappingURL=TypeDescriptor$OfMethod.d.ts.map