import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Path as java_nio_file_Path, PathInterface as java_nio_file_PathInterface } from "./../../nio/file/Path";
import { Optional as java_util_Optional } from "./../../util/Optional";
import { Set as java_util_Set } from "./../../util/Set";
/**
 * This class just defines types, you should import {@link ModuleFinder} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ModuleFinderClass extends JavaClass {
    /**
     * @param var0 original type: 'java.nio.file.Path[]'
     * @return original return type: 'java.lang.module.ModuleFinder'
     */
    static of(var0: (java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null)[] | null): Promise<ModuleFinder | null>;
    /**
     * @param var0 original type: 'java.nio.file.Path[]'
     * @return original return type: 'java.lang.module.ModuleFinder'
     */
    static ofSync(var0: (java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null)[] | null): ModuleFinder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.Optional'
     */
    find(var0: string | null): Promise<java_util_Optional | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.Optional'
     */
    findSync(var0: string | null): java_util_Optional | null;
    /**
     * @return original return type: 'java.lang.module.ModuleFinder'
     */
    static ofSystem(): Promise<ModuleFinder | null>;
    /**
     * @return original return type: 'java.lang.module.ModuleFinder'
     */
    static ofSystemSync(): ModuleFinder | null;
    /**
     * @param var0 original type: 'java.lang.module.ModuleFinder[]'
     * @return original return type: 'java.lang.module.ModuleFinder'
     */
    static compose(var0: (ModuleFinderClass | JavaInterfaceProxy<ModuleFinderInterface> | null)[] | null): Promise<ModuleFinder | null>;
    /**
     * @param var0 original type: 'java.lang.module.ModuleFinder[]'
     * @return original return type: 'java.lang.module.ModuleFinder'
     */
    static composeSync(var0: (ModuleFinderClass | JavaInterfaceProxy<ModuleFinderInterface> | null)[] | null): ModuleFinder | null;
    /**
     * @return original return type: 'java.util.Set'
     */
    findAll(): Promise<java_util_Set | null>;
    /**
     * @return original return type: 'java.util.Set'
     */
    findAllSync(): java_util_Set | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createModuleFinderProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface ModuleFinderInterface {
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.Optional'
     */
    find(var0: string | null): java_util_Optional | null;
    /**
     * @return original return type: 'java.util.Set'
     */
    findAll(): java_util_Set | null;
}
/**
 * Create a proxy for the {@link ModuleFinder} interface.
 * All required methods in {@link ModuleFinderInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createModuleFinderProxy(methods: ModuleFinderInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<ModuleFinderInterface>;
declare const ModuleFinder_base: typeof ModuleFinderClass;
/**
 * Class java.lang.module.ModuleFinder.
 *
 * This actually imports the java class for further use.
 * The class {@link ModuleFinderClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ModuleFinder extends ModuleFinder_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default ModuleFinder;
//# sourceMappingURL=ModuleFinder.d.ts.map