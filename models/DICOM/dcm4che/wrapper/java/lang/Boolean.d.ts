import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Class as java_lang_Class } from "./Class";
import { Optional as java_util_Optional } from "./../util/Optional";
import { Long as java_lang_Long } from "./Long";
import { Integer as java_lang_Integer } from "./Integer";
/**
 * This class just defines types, you should import {@link Boolean} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BooleanClass extends JavaClass {
    /**
     * Original type: 'java.lang.Boolean'
     */
    static readonly TRUE: BooleanClass | boolean | null;
    /**
     * Original type: 'java.lang.Boolean'
     */
    static readonly FALSE: BooleanClass | boolean | null;
    /**
     * Original type: 'java.lang.Class'
     */
    static readonly TYPE: java_lang_Class | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'java.lang.String'
     */
    static toString(var0: BooleanClass | boolean): Promise<string>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'java.lang.String'
     */
    static toStringSync(var0: BooleanClass | boolean): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'int'
     */
    static hashCode(var0: BooleanClass | boolean): Promise<number>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'int'
     */
    static hashCodeSync(var0: BooleanClass | boolean): number;
    /**
     * @param var0 original type: 'java.lang.Boolean'
     * @return original return type: 'int'
     */
    compareTo(var0: BooleanClass | boolean | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Boolean'
     * @return original return type: 'int'
     */
    compareToSync(var0: BooleanClass | boolean | null): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareTo(var0: BasicOrJavaType | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareToSync(var0: BasicOrJavaType | null): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    static getBoolean(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    static getBooleanSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'boolean'
     * @param var1 original type: 'boolean'
     * @return original return type: 'int'
     */
    static compare(var0: BooleanClass | boolean, var1: BooleanClass | boolean): Promise<number>;
    /**
     * @param var0 original type: 'boolean'
     * @param var1 original type: 'boolean'
     * @return original return type: 'int'
     */
    static compareSync(var0: BooleanClass | boolean, var1: BooleanClass | boolean): number;
    /**
     * @return original return type: 'boolean'
     */
    booleanValue(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    booleanValueSync(): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Boolean'
     */
    static valueOf(var0: string | null): Promise<boolean | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Boolean'
     */
    static valueOfSync(var0: string | null): boolean | null;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'java.lang.Boolean'
     */
    static valueOf(var0: BooleanClass | boolean): Promise<boolean | null>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'java.lang.Boolean'
     */
    static valueOfSync(var0: BooleanClass | boolean): boolean | null;
    /**
     * @return original return type: 'java.util.Optional'
     */
    describeConstable(): Promise<java_util_Optional | null>;
    /**
     * @return original return type: 'java.util.Optional'
     */
    describeConstableSync(): java_util_Optional | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    static parseBoolean(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    static parseBooleanSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'boolean'
     * @param var1 original type: 'boolean'
     * @return original return type: 'boolean'
     */
    static logicalAnd(var0: BooleanClass | boolean, var1: BooleanClass | boolean): Promise<boolean>;
    /**
     * @param var0 original type: 'boolean'
     * @param var1 original type: 'boolean'
     * @return original return type: 'boolean'
     */
    static logicalAndSync(var0: BooleanClass | boolean, var1: BooleanClass | boolean): boolean;
    /**
     * @param var0 original type: 'boolean'
     * @param var1 original type: 'boolean'
     * @return original return type: 'boolean'
     */
    static logicalOr(var0: BooleanClass | boolean, var1: BooleanClass | boolean): Promise<boolean>;
    /**
     * @param var0 original type: 'boolean'
     * @param var1 original type: 'boolean'
     * @return original return type: 'boolean'
     */
    static logicalOrSync(var0: BooleanClass | boolean, var1: BooleanClass | boolean): boolean;
    /**
     * @param var0 original type: 'boolean'
     * @param var1 original type: 'boolean'
     * @return original return type: 'boolean'
     */
    static logicalXor(var0: BooleanClass | boolean, var1: BooleanClass | boolean): Promise<boolean>;
    /**
     * @param var0 original type: 'boolean'
     * @param var1 original type: 'boolean'
     * @return original return type: 'boolean'
     */
    static logicalXorSync(var0: BooleanClass | boolean, var1: BooleanClass | boolean): boolean;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'java.lang.Boolean'
     */
    static newInstance(var0: BooleanClass | boolean): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Boolean'
     */
    static newInstance(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'boolean'
     */
    constructor(var0: BooleanClass | boolean);
    /**
     * @param var0 original type: 'java.lang.String'
     */
    constructor(var0: string | null);
}
declare const Boolean_base: typeof BooleanClass;
/**
 * Class java.lang.Boolean.
 *
 * This actually imports the java class for further use.
 * The class {@link BooleanClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Boolean extends Boolean_base {
}
export default Boolean;
//# sourceMappingURL=Boolean.d.ts.map