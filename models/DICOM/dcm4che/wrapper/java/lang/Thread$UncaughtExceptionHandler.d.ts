import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Thread as java_lang_Thread } from "./Thread";
import { Throwable as java_lang_Throwable } from "./Throwable";
/**
 * This class just defines types, you should import {@link Thread$UncaughtExceptionHandler} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Thread$UncaughtExceptionHandlerClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.Thread'
     * @param var1 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    uncaughtException(var0: java_lang_Thread | null, var1: java_lang_Throwable | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Thread'
     * @param var1 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    uncaughtExceptionSync(var0: java_lang_Thread | null, var1: java_lang_Throwable | null): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createThread$UncaughtExceptionHandlerProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface Thread$UncaughtExceptionHandlerInterface {
    /**
     * @param var0 original type: 'java.lang.Thread'
     * @param var1 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    uncaughtException(var0: java_lang_Thread | null, var1: java_lang_Throwable | null): void;
}
/**
 * Create a proxy for the {@link Thread$UncaughtExceptionHandler} interface.
 * All required methods in {@link Thread$UncaughtExceptionHandlerInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createThread$UncaughtExceptionHandlerProxy(methods: Thread$UncaughtExceptionHandlerInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<Thread$UncaughtExceptionHandlerInterface>;
declare const Thread$UncaughtExceptionHandler_base: typeof Thread$UncaughtExceptionHandlerClass;
/**
 * Class java.lang.Thread$UncaughtExceptionHandler.
 *
 * This actually imports the java class for further use.
 * The class {@link Thread$UncaughtExceptionHandlerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Thread$UncaughtExceptionHandler extends Thread$UncaughtExceptionHandler_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Thread$UncaughtExceptionHandler;
//# sourceMappingURL=Thread$UncaughtExceptionHandler.d.ts.map