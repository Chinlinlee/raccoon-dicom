import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Raster as java_awt_image_Raster } from "./image/Raster";
import { WritableRaster as java_awt_image_WritableRaster } from "./image/WritableRaster";
/**
 * This class just defines types, you should import {@link CompositeContext} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class CompositeContextClass extends JavaClass {
    /**
     * @param var0 original type: 'java.awt.image.Raster'
     * @param var1 original type: 'java.awt.image.Raster'
     * @param var2 original type: 'java.awt.image.WritableRaster'
     * @return original return type: 'void'
     */
    compose(var0: java_awt_image_Raster | null, var1: java_awt_image_Raster | null, var2: java_awt_image_WritableRaster | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.image.Raster'
     * @param var1 original type: 'java.awt.image.Raster'
     * @param var2 original type: 'java.awt.image.WritableRaster'
     * @return original return type: 'void'
     */
    composeSync(var0: java_awt_image_Raster | null, var1: java_awt_image_Raster | null, var2: java_awt_image_WritableRaster | null): void;
    /**
     * @return original return type: 'void'
     */
    dispose(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    disposeSync(): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createCompositeContextProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface CompositeContextInterface {
    /**
     * @param var0 original type: 'java.awt.image.Raster'
     * @param var1 original type: 'java.awt.image.Raster'
     * @param var2 original type: 'java.awt.image.WritableRaster'
     * @return original return type: 'void'
     */
    compose(var0: java_awt_image_Raster | null, var1: java_awt_image_Raster | null, var2: java_awt_image_WritableRaster | null): void;
    /**
     * @return original return type: 'void'
     */
    dispose(): void;
}
/**
 * Create a proxy for the {@link CompositeContext} interface.
 * All required methods in {@link CompositeContextInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createCompositeContextProxy(methods: CompositeContextInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<CompositeContextInterface>;
declare const CompositeContext_base: typeof CompositeContextClass;
/**
 * Class java.awt.CompositeContext.
 *
 * This actually imports the java class for further use.
 * The class {@link CompositeContextClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class CompositeContext extends CompositeContext_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default CompositeContext;
//# sourceMappingURL=CompositeContext.d.ts.map