import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
import { Float as java_lang_Float } from "./../../lang/Float";
import { Double as java_lang_Double } from "./../../lang/Double";
/**
 * This class just defines types, you should import {@link PathIterator} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class PathIteratorClass extends JavaClass {
    /**
     * Original type: 'int'
     */
    static readonly WIND_EVEN_ODD: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly WIND_NON_ZERO: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly SEG_MOVETO: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly SEG_LINETO: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly SEG_QUADTO: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly SEG_CUBICTO: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly SEG_CLOSE: java_lang_Integer | number;
    /**
     * @return original return type: 'void'
     */
    next(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    nextSync(): void;
    /**
     * @return original return type: 'boolean'
     */
    isDone(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isDoneSync(): boolean;
    /**
     * @return original return type: 'int'
     */
    getWindingRule(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getWindingRuleSync(): number;
    /**
     * @param var0 original type: 'float[]'
     * @return original return type: 'int'
     */
    currentSegment(var0: (java_lang_Float | number)[] | null): Promise<number>;
    /**
     * @param var0 original type: 'float[]'
     * @return original return type: 'int'
     */
    currentSegmentSync(var0: (java_lang_Float | number)[] | null): number;
    /**
     * @param var0 original type: 'double[]'
     * @return original return type: 'int'
     */
    currentSegment(var0: (java_lang_Double | number)[] | null): Promise<number>;
    /**
     * @param var0 original type: 'double[]'
     * @return original return type: 'int'
     */
    currentSegmentSync(var0: (java_lang_Double | number)[] | null): number;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createPathIteratorProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface PathIteratorInterface {
    /**
     * @return original return type: 'void'
     */
    next(): void;
    /**
     * @return original return type: 'boolean'
     */
    isDone(): boolean;
    /**
     * @return original return type: 'int'
     */
    getWindingRule(): number;
    /**
     * @param var0 original type: 'float[]'
     * @return original return type: 'int'
     */
    currentSegment(var0: (java_lang_Float | number)[] | null): number;
    /**
     * @param var0 original type: 'double[]'
     * @return original return type: 'int'
     */
    currentSegment(var0: (java_lang_Double | number)[] | null): number;
}
/**
 * Create a proxy for the {@link PathIterator} interface.
 * All required methods in {@link PathIteratorInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createPathIteratorProxy(methods: PathIteratorInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<PathIteratorInterface>;
declare const PathIterator_base: typeof PathIteratorClass;
/**
 * Class java.awt.geom.PathIterator.
 *
 * This actually imports the java class for further use.
 * The class {@link PathIteratorClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class PathIterator extends PathIterator_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default PathIterator;
//# sourceMappingURL=PathIterator.d.ts.map