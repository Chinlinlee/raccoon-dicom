import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Double as java_lang_Double } from "./../../lang/Double";
import { Rectangle2D as java_awt_geom_Rectangle2D } from "./Rectangle2D";
import { Point2D as java_awt_geom_Point2D } from "./Point2D";
import { Rectangle as java_awt_Rectangle } from "./../Rectangle";
import { PathIterator as java_awt_geom_PathIterator } from "./PathIterator";
import { AffineTransform as java_awt_geom_AffineTransform } from "./AffineTransform";
import { Long as java_lang_Long } from "./../../lang/Long";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
import { Class as java_lang_Class } from "./../../lang/Class";
/**
 * This class just defines types, you should import {@link Line2D} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Line2DClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.Object'
     */
    clone(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    cloneSync(): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @return original return type: 'boolean'
     */
    contains(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number): Promise<boolean>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @return original return type: 'boolean'
     */
    containsSync(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number): boolean;
    /**
     * @param var0 original type: 'java.awt.geom.Rectangle2D'
     * @return original return type: 'boolean'
     */
    contains(var0: java_awt_geom_Rectangle2D | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.awt.geom.Rectangle2D'
     * @return original return type: 'boolean'
     */
    containsSync(var0: java_awt_geom_Rectangle2D | null): boolean;
    /**
     * @param var0 original type: 'java.awt.geom.Point2D'
     * @return original return type: 'boolean'
     */
    contains(var0: java_awt_geom_Point2D | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.awt.geom.Point2D'
     * @return original return type: 'boolean'
     */
    containsSync(var0: java_awt_geom_Point2D | null): boolean;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @return original return type: 'boolean'
     */
    contains(var0: java_lang_Double | number, var1: java_lang_Double | number): Promise<boolean>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @return original return type: 'boolean'
     */
    containsSync(var0: java_lang_Double | number, var1: java_lang_Double | number): boolean;
    /**
     * @return original return type: 'java.awt.Rectangle'
     */
    getBounds(): Promise<java_awt_Rectangle | null>;
    /**
     * @return original return type: 'java.awt.Rectangle'
     */
    getBoundsSync(): java_awt_Rectangle | null;
    /**
     * @param var0 original type: 'java.awt.geom.Rectangle2D'
     * @return original return type: 'boolean'
     */
    intersects(var0: java_awt_geom_Rectangle2D | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.awt.geom.Rectangle2D'
     * @return original return type: 'boolean'
     */
    intersectsSync(var0: java_awt_geom_Rectangle2D | null): boolean;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @return original return type: 'boolean'
     */
    intersects(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number): Promise<boolean>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @return original return type: 'boolean'
     */
    intersectsSync(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number): boolean;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @return original return type: 'java.awt.geom.PathIterator'
     */
    getPathIterator(var0: java_awt_geom_AffineTransform | null): Promise<java_awt_geom_PathIterator | null>;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @return original return type: 'java.awt.geom.PathIterator'
     */
    getPathIteratorSync(var0: java_awt_geom_AffineTransform | null): java_awt_geom_PathIterator | null;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @param var1 original type: 'double'
     * @return original return type: 'java.awt.geom.PathIterator'
     */
    getPathIterator(var0: java_awt_geom_AffineTransform | null, var1: java_lang_Double | number): Promise<java_awt_geom_PathIterator | null>;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @param var1 original type: 'double'
     * @return original return type: 'java.awt.geom.PathIterator'
     */
    getPathIteratorSync(var0: java_awt_geom_AffineTransform | null, var1: java_lang_Double | number): java_awt_geom_PathIterator | null;
    /**
     * @return original return type: 'double'
     */
    getX1(): Promise<number>;
    /**
     * @return original return type: 'double'
     */
    getX1Sync(): number;
    /**
     * @return original return type: 'double'
     */
    getY1(): Promise<number>;
    /**
     * @return original return type: 'double'
     */
    getY1Sync(): number;
    /**
     * @return original return type: 'double'
     */
    getX2(): Promise<number>;
    /**
     * @return original return type: 'double'
     */
    getX2Sync(): number;
    /**
     * @return original return type: 'double'
     */
    getY2(): Promise<number>;
    /**
     * @return original return type: 'double'
     */
    getY2Sync(): number;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @return original return type: 'boolean'
     */
    intersectsLine(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number): Promise<boolean>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @return original return type: 'boolean'
     */
    intersectsLineSync(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number): boolean;
    /**
     * @param var0 original type: 'java.awt.geom.Line2D'
     * @return original return type: 'boolean'
     */
    intersectsLine(var0: Line2DClass | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.awt.geom.Line2D'
     * @return original return type: 'boolean'
     */
    intersectsLineSync(var0: Line2DClass | null): boolean;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @return original return type: 'void'
     */
    setLine(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number): Promise<void>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @return original return type: 'void'
     */
    setLineSync(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number): void;
    /**
     * @param var0 original type: 'java.awt.geom.Point2D'
     * @param var1 original type: 'java.awt.geom.Point2D'
     * @return original return type: 'void'
     */
    setLine(var0: java_awt_geom_Point2D | null, var1: java_awt_geom_Point2D | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.geom.Point2D'
     * @param var1 original type: 'java.awt.geom.Point2D'
     * @return original return type: 'void'
     */
    setLineSync(var0: java_awt_geom_Point2D | null, var1: java_awt_geom_Point2D | null): void;
    /**
     * @param var0 original type: 'java.awt.geom.Line2D'
     * @return original return type: 'void'
     */
    setLine(var0: Line2DClass | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.geom.Line2D'
     * @return original return type: 'void'
     */
    setLineSync(var0: Line2DClass | null): void;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @return original return type: 'int'
     */
    relativeCCW(var0: java_lang_Double | number, var1: java_lang_Double | number): Promise<number>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @return original return type: 'int'
     */
    relativeCCWSync(var0: java_lang_Double | number, var1: java_lang_Double | number): number;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @param var4 original type: 'double'
     * @param var5 original type: 'double'
     * @return original return type: 'int'
     */
    static relativeCCW(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number, var4: java_lang_Double | number, var5: java_lang_Double | number): Promise<number>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @param var4 original type: 'double'
     * @param var5 original type: 'double'
     * @return original return type: 'int'
     */
    static relativeCCWSync(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number, var4: java_lang_Double | number, var5: java_lang_Double | number): number;
    /**
     * @param var0 original type: 'java.awt.geom.Point2D'
     * @return original return type: 'int'
     */
    relativeCCW(var0: java_awt_geom_Point2D | null): Promise<number>;
    /**
     * @param var0 original type: 'java.awt.geom.Point2D'
     * @return original return type: 'int'
     */
    relativeCCWSync(var0: java_awt_geom_Point2D | null): number;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @param var4 original type: 'double'
     * @param var5 original type: 'double'
     * @param var6 original type: 'double'
     * @param var7 original type: 'double'
     * @return original return type: 'boolean'
     */
    static linesIntersect(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number, var4: java_lang_Double | number, var5: java_lang_Double | number, var6: java_lang_Double | number, var7: java_lang_Double | number): Promise<boolean>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @param var4 original type: 'double'
     * @param var5 original type: 'double'
     * @param var6 original type: 'double'
     * @param var7 original type: 'double'
     * @return original return type: 'boolean'
     */
    static linesIntersectSync(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number, var4: java_lang_Double | number, var5: java_lang_Double | number, var6: java_lang_Double | number, var7: java_lang_Double | number): boolean;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @return original return type: 'double'
     */
    ptSegDistSq(var0: java_lang_Double | number, var1: java_lang_Double | number): Promise<number>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @return original return type: 'double'
     */
    ptSegDistSqSync(var0: java_lang_Double | number, var1: java_lang_Double | number): number;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @param var4 original type: 'double'
     * @param var5 original type: 'double'
     * @return original return type: 'double'
     */
    static ptSegDistSq(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number, var4: java_lang_Double | number, var5: java_lang_Double | number): Promise<number>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @param var4 original type: 'double'
     * @param var5 original type: 'double'
     * @return original return type: 'double'
     */
    static ptSegDistSqSync(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number, var4: java_lang_Double | number, var5: java_lang_Double | number): number;
    /**
     * @param var0 original type: 'java.awt.geom.Point2D'
     * @return original return type: 'double'
     */
    ptSegDistSq(var0: java_awt_geom_Point2D | null): Promise<number>;
    /**
     * @param var0 original type: 'java.awt.geom.Point2D'
     * @return original return type: 'double'
     */
    ptSegDistSqSync(var0: java_awt_geom_Point2D | null): number;
    /**
     * @param var0 original type: 'java.awt.geom.Point2D'
     * @return original return type: 'double'
     */
    ptSegDist(var0: java_awt_geom_Point2D | null): Promise<number>;
    /**
     * @param var0 original type: 'java.awt.geom.Point2D'
     * @return original return type: 'double'
     */
    ptSegDistSync(var0: java_awt_geom_Point2D | null): number;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @return original return type: 'double'
     */
    ptSegDist(var0: java_lang_Double | number, var1: java_lang_Double | number): Promise<number>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @return original return type: 'double'
     */
    ptSegDistSync(var0: java_lang_Double | number, var1: java_lang_Double | number): number;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @param var4 original type: 'double'
     * @param var5 original type: 'double'
     * @return original return type: 'double'
     */
    static ptSegDist(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number, var4: java_lang_Double | number, var5: java_lang_Double | number): Promise<number>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @param var4 original type: 'double'
     * @param var5 original type: 'double'
     * @return original return type: 'double'
     */
    static ptSegDistSync(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number, var4: java_lang_Double | number, var5: java_lang_Double | number): number;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @return original return type: 'double'
     */
    ptLineDistSq(var0: java_lang_Double | number, var1: java_lang_Double | number): Promise<number>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @return original return type: 'double'
     */
    ptLineDistSqSync(var0: java_lang_Double | number, var1: java_lang_Double | number): number;
    /**
     * @param var0 original type: 'java.awt.geom.Point2D'
     * @return original return type: 'double'
     */
    ptLineDistSq(var0: java_awt_geom_Point2D | null): Promise<number>;
    /**
     * @param var0 original type: 'java.awt.geom.Point2D'
     * @return original return type: 'double'
     */
    ptLineDistSqSync(var0: java_awt_geom_Point2D | null): number;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @param var4 original type: 'double'
     * @param var5 original type: 'double'
     * @return original return type: 'double'
     */
    static ptLineDistSq(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number, var4: java_lang_Double | number, var5: java_lang_Double | number): Promise<number>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @param var4 original type: 'double'
     * @param var5 original type: 'double'
     * @return original return type: 'double'
     */
    static ptLineDistSqSync(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number, var4: java_lang_Double | number, var5: java_lang_Double | number): number;
    /**
     * @param var0 original type: 'java.awt.geom.Point2D'
     * @return original return type: 'double'
     */
    ptLineDist(var0: java_awt_geom_Point2D | null): Promise<number>;
    /**
     * @param var0 original type: 'java.awt.geom.Point2D'
     * @return original return type: 'double'
     */
    ptLineDistSync(var0: java_awt_geom_Point2D | null): number;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @param var4 original type: 'double'
     * @param var5 original type: 'double'
     * @return original return type: 'double'
     */
    static ptLineDist(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number, var4: java_lang_Double | number, var5: java_lang_Double | number): Promise<number>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @param var4 original type: 'double'
     * @param var5 original type: 'double'
     * @return original return type: 'double'
     */
    static ptLineDistSync(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number, var4: java_lang_Double | number, var5: java_lang_Double | number): number;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @return original return type: 'double'
     */
    ptLineDist(var0: java_lang_Double | number, var1: java_lang_Double | number): Promise<number>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @return original return type: 'double'
     */
    ptLineDistSync(var0: java_lang_Double | number, var1: java_lang_Double | number): number;
    /**
     * @return original return type: 'java.awt.geom.Point2D'
     */
    getP1(): Promise<java_awt_geom_Point2D | null>;
    /**
     * @return original return type: 'java.awt.geom.Point2D'
     */
    getP1Sync(): java_awt_geom_Point2D | null;
    /**
     * @return original return type: 'java.awt.geom.Point2D'
     */
    getP2(): Promise<java_awt_geom_Point2D | null>;
    /**
     * @return original return type: 'java.awt.geom.Point2D'
     */
    getP2Sync(): java_awt_geom_Point2D | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @return original return type: 'java.awt.geom.Rectangle2D'
     */
    getBounds2D(): Promise<java_awt_geom_Rectangle2D | null>;
    /**
     * @return original return type: 'java.awt.geom.Rectangle2D'
     */
    getBounds2DSync(): java_awt_geom_Rectangle2D | null;
}
declare const Line2D_base: typeof Line2DClass;
/**
 * Class java.awt.geom.Line2D.
 *
 * This actually imports the java class for further use.
 * The class {@link Line2DClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Line2D extends Line2D_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Line2D;
//# sourceMappingURL=Line2D.d.ts.map