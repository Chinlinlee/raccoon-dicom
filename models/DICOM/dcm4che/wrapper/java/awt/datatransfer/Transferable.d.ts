import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { DataFlavor as java_awt_datatransfer_DataFlavor } from "./DataFlavor";
/**
 * This class just defines types, you should import {@link Transferable} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class TransferableClass extends JavaClass {
    /**
     * @return original return type: 'java.awt.datatransfer.DataFlavor[]'
     */
    getTransferDataFlavors(): Promise<(java_awt_datatransfer_DataFlavor | null)[] | null>;
    /**
     * @return original return type: 'java.awt.datatransfer.DataFlavor[]'
     */
    getTransferDataFlavorsSync(): (java_awt_datatransfer_DataFlavor | null)[] | null;
    /**
     * @param var0 original type: 'java.awt.datatransfer.DataFlavor'
     * @return original return type: 'boolean'
     */
    isDataFlavorSupported(var0: java_awt_datatransfer_DataFlavor | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.awt.datatransfer.DataFlavor'
     * @return original return type: 'boolean'
     */
    isDataFlavorSupportedSync(var0: java_awt_datatransfer_DataFlavor | null): boolean;
    /**
     * @param var0 original type: 'java.awt.datatransfer.DataFlavor'
     * @return original return type: 'java.lang.Object'
     */
    getTransferData(var0: java_awt_datatransfer_DataFlavor | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.awt.datatransfer.DataFlavor'
     * @return original return type: 'java.lang.Object'
     */
    getTransferDataSync(var0: java_awt_datatransfer_DataFlavor | null): BasicOrJavaType | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createTransferableProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface TransferableInterface {
    /**
     * @return original return type: 'java.awt.datatransfer.DataFlavor[]'
     */
    getTransferDataFlavors(): (java_awt_datatransfer_DataFlavor | null)[] | null;
    /**
     * @param var0 original type: 'java.awt.datatransfer.DataFlavor'
     * @return original return type: 'boolean'
     */
    isDataFlavorSupported(var0: java_awt_datatransfer_DataFlavor | null): boolean;
    /**
     * @param var0 original type: 'java.awt.datatransfer.DataFlavor'
     * @return original return type: 'java.lang.Object'
     */
    getTransferData(var0: java_awt_datatransfer_DataFlavor | null): BasicOrJavaType | null;
}
/**
 * Create a proxy for the {@link Transferable} interface.
 * All required methods in {@link TransferableInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createTransferableProxy(methods: TransferableInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<TransferableInterface>;
declare const Transferable_base: typeof TransferableClass;
/**
 * Class java.awt.datatransfer.Transferable.
 *
 * This actually imports the java class for further use.
 * The class {@link TransferableClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Transferable extends Transferable_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Transferable;
//# sourceMappingURL=Transferable.d.ts.map