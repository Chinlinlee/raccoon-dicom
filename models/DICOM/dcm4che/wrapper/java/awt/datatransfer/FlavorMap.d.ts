import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Map as java_util_Map } from "./../../util/Map";
import { DataFlavor as java_awt_datatransfer_DataFlavor } from "./DataFlavor";
/**
 * This class just defines types, you should import {@link FlavorMap} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class FlavorMapClass extends JavaClass {
    /**
     * @param var0 original type: 'java.awt.datatransfer.DataFlavor[]'
     * @return original return type: 'java.util.Map'
     */
    getNativesForFlavors(var0: (java_awt_datatransfer_DataFlavor | null)[] | null): Promise<java_util_Map | null>;
    /**
     * @param var0 original type: 'java.awt.datatransfer.DataFlavor[]'
     * @return original return type: 'java.util.Map'
     */
    getNativesForFlavorsSync(var0: (java_awt_datatransfer_DataFlavor | null)[] | null): java_util_Map | null;
    /**
     * @param var0 original type: 'java.lang.String[]'
     * @return original return type: 'java.util.Map'
     */
    getFlavorsForNatives(var0: (string | null)[] | null): Promise<java_util_Map | null>;
    /**
     * @param var0 original type: 'java.lang.String[]'
     * @return original return type: 'java.util.Map'
     */
    getFlavorsForNativesSync(var0: (string | null)[] | null): java_util_Map | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createFlavorMapProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface FlavorMapInterface {
    /**
     * @param var0 original type: 'java.awt.datatransfer.DataFlavor[]'
     * @return original return type: 'java.util.Map'
     */
    getNativesForFlavors(var0: (java_awt_datatransfer_DataFlavor | null)[] | null): java_util_Map | null;
    /**
     * @param var0 original type: 'java.lang.String[]'
     * @return original return type: 'java.util.Map'
     */
    getFlavorsForNatives(var0: (string | null)[] | null): java_util_Map | null;
}
/**
 * Create a proxy for the {@link FlavorMap} interface.
 * All required methods in {@link FlavorMapInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createFlavorMapProxy(methods: FlavorMapInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<FlavorMapInterface>;
declare const FlavorMap_base: typeof FlavorMapClass;
/**
 * Class java.awt.datatransfer.FlavorMap.
 *
 * This actually imports the java class for further use.
 * The class {@link FlavorMapClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class FlavorMap extends FlavorMap_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default FlavorMap;
//# sourceMappingURL=FlavorMap.d.ts.map