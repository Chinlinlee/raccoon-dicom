import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Integer as java_lang_Integer } from "./../lang/Integer";
import { PaintContext as java_awt_PaintContext } from "./PaintContext";
import { ColorModel as java_awt_image_ColorModel } from "./image/ColorModel";
import { Rectangle as java_awt_Rectangle } from "./Rectangle";
import { Rectangle2D as java_awt_geom_Rectangle2D } from "./geom/Rectangle2D";
import { AffineTransform as java_awt_geom_AffineTransform } from "./geom/AffineTransform";
import { RenderingHints as java_awt_RenderingHints } from "./RenderingHints";
/**
 * This class just defines types, you should import {@link Paint} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class PaintClass extends JavaClass {
    /**
     * Original type: 'int'
     */
    static readonly OPAQUE: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly BITMASK: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly TRANSLUCENT: java_lang_Integer | number;
    /**
     * @param var0 original type: 'java.awt.image.ColorModel'
     * @param var1 original type: 'java.awt.Rectangle'
     * @param var2 original type: 'java.awt.geom.Rectangle2D'
     * @param var3 original type: 'java.awt.geom.AffineTransform'
     * @param var4 original type: 'java.awt.RenderingHints'
     * @return original return type: 'java.awt.PaintContext'
     */
    createContext(var0: java_awt_image_ColorModel | null, var1: java_awt_Rectangle | null, var2: java_awt_geom_Rectangle2D | null, var3: java_awt_geom_AffineTransform | null, var4: java_awt_RenderingHints | null): Promise<java_awt_PaintContext | null>;
    /**
     * @param var0 original type: 'java.awt.image.ColorModel'
     * @param var1 original type: 'java.awt.Rectangle'
     * @param var2 original type: 'java.awt.geom.Rectangle2D'
     * @param var3 original type: 'java.awt.geom.AffineTransform'
     * @param var4 original type: 'java.awt.RenderingHints'
     * @return original return type: 'java.awt.PaintContext'
     */
    createContextSync(var0: java_awt_image_ColorModel | null, var1: java_awt_Rectangle | null, var2: java_awt_geom_Rectangle2D | null, var3: java_awt_geom_AffineTransform | null, var4: java_awt_RenderingHints | null): java_awt_PaintContext | null;
    /**
     * @return original return type: 'int'
     */
    getTransparency(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getTransparencySync(): number;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createPaintProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface PaintInterface {
    /**
     * @param var0 original type: 'java.awt.image.ColorModel'
     * @param var1 original type: 'java.awt.Rectangle'
     * @param var2 original type: 'java.awt.geom.Rectangle2D'
     * @param var3 original type: 'java.awt.geom.AffineTransform'
     * @param var4 original type: 'java.awt.RenderingHints'
     * @return original return type: 'java.awt.PaintContext'
     */
    createContext(var0: java_awt_image_ColorModel | null, var1: java_awt_Rectangle | null, var2: java_awt_geom_Rectangle2D | null, var3: java_awt_geom_AffineTransform | null, var4: java_awt_RenderingHints | null): java_awt_PaintContext | null;
    /**
     * @return original return type: 'int'
     */
    getTransparency(): number;
}
/**
 * Create a proxy for the {@link Paint} interface.
 * All required methods in {@link PaintInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createPaintProxy(methods: PaintInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<PaintInterface>;
declare const Paint_base: typeof PaintClass;
/**
 * Class java.awt.Paint.
 *
 * This actually imports the java class for further use.
 * The class {@link PaintClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Paint extends Paint_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Paint;
//# sourceMappingURL=Paint.d.ts.map