import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Vector as java_util_Vector } from "./../../../util/Vector";
import { RenderedImage as java_awt_image_RenderedImage } from "./../RenderedImage";
import { Integer as java_lang_Integer } from "./../../../lang/Integer";
import { RenderingHints as java_awt_RenderingHints } from "./../../RenderingHints";
import { RenderContext as java_awt_image_renderable_RenderContext } from "./RenderContext";
/**
 * This class just defines types, you should import {@link RenderableImage} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class RenderableImageClass extends JavaClass {
    /**
     * Original type: 'java.lang.String'
     */
    static readonly HINTS_OBSERVED: string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Object'
     */
    getProperty(var0: string | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Object'
     */
    getPropertySync(var0: string | null): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.util.Vector'
     */
    getSources(): Promise<java_util_Vector | null>;
    /**
     * @return original return type: 'java.util.Vector'
     */
    getSourcesSync(): java_util_Vector | null;
    /**
     * @return original return type: 'java.lang.String[]'
     */
    getPropertyNames(): Promise<(string | null)[] | null>;
    /**
     * @return original return type: 'java.lang.String[]'
     */
    getPropertyNamesSync(): (string | null)[] | null;
    /**
     * @return original return type: 'float'
     */
    getWidth(): Promise<number>;
    /**
     * @return original return type: 'float'
     */
    getWidthSync(): number;
    /**
     * @return original return type: 'float'
     */
    getHeight(): Promise<number>;
    /**
     * @return original return type: 'float'
     */
    getHeightSync(): number;
    /**
     * @return original return type: 'float'
     */
    getMinX(): Promise<number>;
    /**
     * @return original return type: 'float'
     */
    getMinXSync(): number;
    /**
     * @return original return type: 'float'
     */
    getMinY(): Promise<number>;
    /**
     * @return original return type: 'float'
     */
    getMinYSync(): number;
    /**
     * @return original return type: 'boolean'
     */
    isDynamic(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isDynamicSync(): boolean;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.awt.RenderingHints'
     * @return original return type: 'java.awt.image.RenderedImage'
     */
    createScaledRendering(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_awt_RenderingHints | null): Promise<java_awt_image_RenderedImage | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.awt.RenderingHints'
     * @return original return type: 'java.awt.image.RenderedImage'
     */
    createScaledRenderingSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_awt_RenderingHints | null): java_awt_image_RenderedImage | null;
    /**
     * @return original return type: 'java.awt.image.RenderedImage'
     */
    createDefaultRendering(): Promise<java_awt_image_RenderedImage | null>;
    /**
     * @return original return type: 'java.awt.image.RenderedImage'
     */
    createDefaultRenderingSync(): java_awt_image_RenderedImage | null;
    /**
     * @param var0 original type: 'java.awt.image.renderable.RenderContext'
     * @return original return type: 'java.awt.image.RenderedImage'
     */
    createRendering(var0: java_awt_image_renderable_RenderContext | null): Promise<java_awt_image_RenderedImage | null>;
    /**
     * @param var0 original type: 'java.awt.image.renderable.RenderContext'
     * @return original return type: 'java.awt.image.RenderedImage'
     */
    createRenderingSync(var0: java_awt_image_renderable_RenderContext | null): java_awt_image_RenderedImage | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createRenderableImageProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface RenderableImageInterface {
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Object'
     */
    getProperty(var0: string | null): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.util.Vector'
     */
    getSources(): java_util_Vector | null;
    /**
     * @return original return type: 'java.lang.String[]'
     */
    getPropertyNames(): (string | null)[] | null;
    /**
     * @return original return type: 'float'
     */
    getWidth(): number;
    /**
     * @return original return type: 'float'
     */
    getHeight(): number;
    /**
     * @return original return type: 'float'
     */
    getMinX(): number;
    /**
     * @return original return type: 'float'
     */
    getMinY(): number;
    /**
     * @return original return type: 'boolean'
     */
    isDynamic(): boolean;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.awt.RenderingHints'
     * @return original return type: 'java.awt.image.RenderedImage'
     */
    createScaledRendering(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_awt_RenderingHints | null): java_awt_image_RenderedImage | null;
    /**
     * @return original return type: 'java.awt.image.RenderedImage'
     */
    createDefaultRendering(): java_awt_image_RenderedImage | null;
    /**
     * @param var0 original type: 'java.awt.image.renderable.RenderContext'
     * @return original return type: 'java.awt.image.RenderedImage'
     */
    createRendering(var0: java_awt_image_renderable_RenderContext | null): java_awt_image_RenderedImage | null;
}
/**
 * Create a proxy for the {@link RenderableImage} interface.
 * All required methods in {@link RenderableImageInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createRenderableImageProxy(methods: RenderableImageInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<RenderableImageInterface>;
declare const RenderableImage_base: typeof RenderableImageClass;
/**
 * Class java.awt.image.renderable.RenderableImage.
 *
 * This actually imports the java class for further use.
 * The class {@link RenderableImageClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class RenderableImage extends RenderableImage_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default RenderableImage;
//# sourceMappingURL=RenderableImage.d.ts.map