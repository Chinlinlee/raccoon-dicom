import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { RenderingHints as java_awt_RenderingHints } from "./../../RenderingHints";
import { AffineTransform as java_awt_geom_AffineTransform } from "./../../geom/AffineTransform";
import { Shape as java_awt_Shape, ShapeInterface as java_awt_ShapeInterface } from "./../../Shape";
import { Long as java_lang_Long } from "./../../../lang/Long";
import { Integer as java_lang_Integer } from "./../../../lang/Integer";
import { Class as java_lang_Class } from "./../../../lang/Class";
/**
 * This class just defines types, you should import {@link RenderContext} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class RenderContextClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.Object'
     */
    clone(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    cloneSync(): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.awt.RenderingHints'
     * @return original return type: 'void'
     */
    setRenderingHints(var0: java_awt_RenderingHints | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.RenderingHints'
     * @return original return type: 'void'
     */
    setRenderingHintsSync(var0: java_awt_RenderingHints | null): void;
    /**
     * @return original return type: 'java.awt.RenderingHints'
     */
    getRenderingHints(): Promise<java_awt_RenderingHints | null>;
    /**
     * @return original return type: 'java.awt.RenderingHints'
     */
    getRenderingHintsSync(): java_awt_RenderingHints | null;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @return original return type: 'void'
     */
    setTransform(var0: java_awt_geom_AffineTransform | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @return original return type: 'void'
     */
    setTransformSync(var0: java_awt_geom_AffineTransform | null): void;
    /**
     * @return original return type: 'java.awt.geom.AffineTransform'
     */
    getTransform(): Promise<java_awt_geom_AffineTransform | null>;
    /**
     * @return original return type: 'java.awt.geom.AffineTransform'
     */
    getTransformSync(): java_awt_geom_AffineTransform | null;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @return original return type: 'void'
     */
    preConcetenateTransform(var0: java_awt_geom_AffineTransform | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @return original return type: 'void'
     */
    preConcetenateTransformSync(var0: java_awt_geom_AffineTransform | null): void;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @return original return type: 'void'
     */
    concetenateTransform(var0: java_awt_geom_AffineTransform | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @return original return type: 'void'
     */
    concetenateTransformSync(var0: java_awt_geom_AffineTransform | null): void;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @return original return type: 'void'
     */
    preConcatenateTransform(var0: java_awt_geom_AffineTransform | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @return original return type: 'void'
     */
    preConcatenateTransformSync(var0: java_awt_geom_AffineTransform | null): void;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @return original return type: 'void'
     */
    concatenateTransform(var0: java_awt_geom_AffineTransform | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @return original return type: 'void'
     */
    concatenateTransformSync(var0: java_awt_geom_AffineTransform | null): void;
    /**
     * @param var0 original type: 'java.awt.Shape'
     * @return original return type: 'void'
     */
    setAreaOfInterest(var0: java_awt_Shape | JavaInterfaceProxy<java_awt_ShapeInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.Shape'
     * @return original return type: 'void'
     */
    setAreaOfInterestSync(var0: java_awt_Shape | JavaInterfaceProxy<java_awt_ShapeInterface> | null): void;
    /**
     * @return original return type: 'java.awt.Shape'
     */
    getAreaOfInterest(): Promise<java_awt_Shape | null>;
    /**
     * @return original return type: 'java.awt.Shape'
     */
    getAreaOfInterestSync(): java_awt_Shape | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @param var1 original type: 'java.awt.Shape'
     * @return original return type: 'java.awt.image.renderable.RenderContext'
     */
    static newInstance(var0: java_awt_geom_AffineTransform | null, var1: java_awt_Shape | JavaInterfaceProxy<java_awt_ShapeInterface> | null): Promise<RenderContext>;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @param var1 original type: 'java.awt.RenderingHints'
     * @return original return type: 'java.awt.image.renderable.RenderContext'
     */
    static newInstance(var0: java_awt_geom_AffineTransform | null, var1: java_awt_RenderingHints | null): Promise<RenderContext>;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @return original return type: 'java.awt.image.renderable.RenderContext'
     */
    static newInstance(var0: java_awt_geom_AffineTransform | null): Promise<RenderContext>;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @param var1 original type: 'java.awt.Shape'
     * @param var2 original type: 'java.awt.RenderingHints'
     * @return original return type: 'java.awt.image.renderable.RenderContext'
     */
    static newInstance(var0: java_awt_geom_AffineTransform | null, var1: java_awt_Shape | JavaInterfaceProxy<java_awt_ShapeInterface> | null, var2: java_awt_RenderingHints | null): Promise<RenderContext>;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @param var1 original type: 'java.awt.Shape'
     */
    constructor(var0: java_awt_geom_AffineTransform | null, var1: java_awt_Shape | JavaInterfaceProxy<java_awt_ShapeInterface> | null);
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @param var1 original type: 'java.awt.RenderingHints'
     */
    constructor(var0: java_awt_geom_AffineTransform | null, var1: java_awt_RenderingHints | null);
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     */
    constructor(var0: java_awt_geom_AffineTransform | null);
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @param var1 original type: 'java.awt.Shape'
     * @param var2 original type: 'java.awt.RenderingHints'
     */
    constructor(var0: java_awt_geom_AffineTransform | null, var1: java_awt_Shape | JavaInterfaceProxy<java_awt_ShapeInterface> | null, var2: java_awt_RenderingHints | null);
}
declare const RenderContext_base: typeof RenderContextClass;
/**
 * Class java.awt.image.renderable.RenderContext.
 *
 * This actually imports the java class for further use.
 * The class {@link RenderContextClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class RenderContext extends RenderContext_base {
}
export default RenderContext;
//# sourceMappingURL=RenderContext.d.ts.map