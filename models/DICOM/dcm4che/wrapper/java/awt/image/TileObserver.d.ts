import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { WritableRenderedImage as java_awt_image_WritableRenderedImage, WritableRenderedImageInterface as java_awt_image_WritableRenderedImageInterface } from "./WritableRenderedImage";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
import { Boolean as java_lang_Boolean } from "./../../lang/Boolean";
/**
 * This class just defines types, you should import {@link TileObserver} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class TileObserverClass extends JavaClass {
    /**
     * @param var0 original type: 'java.awt.image.WritableRenderedImage'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'boolean'
     * @return original return type: 'void'
     */
    tileUpdate(var0: java_awt_image_WritableRenderedImage | JavaInterfaceProxy<java_awt_image_WritableRenderedImageInterface> | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Boolean | boolean): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.image.WritableRenderedImage'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'boolean'
     * @return original return type: 'void'
     */
    tileUpdateSync(var0: java_awt_image_WritableRenderedImage | JavaInterfaceProxy<java_awt_image_WritableRenderedImageInterface> | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Boolean | boolean): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createTileObserverProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface TileObserverInterface {
    /**
     * @param var0 original type: 'java.awt.image.WritableRenderedImage'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'boolean'
     * @return original return type: 'void'
     */
    tileUpdate(var0: java_awt_image_WritableRenderedImage | JavaInterfaceProxy<java_awt_image_WritableRenderedImageInterface> | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Boolean | boolean): void;
}
/**
 * Create a proxy for the {@link TileObserver} interface.
 * All required methods in {@link TileObserverInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createTileObserverProxy(methods: TileObserverInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<TileObserverInterface>;
declare const TileObserver_base: typeof TileObserverClass;
/**
 * Class java.awt.image.TileObserver.
 *
 * This actually imports the java class for further use.
 * The class {@link TileObserverClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class TileObserver extends TileObserver_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default TileObserver;
//# sourceMappingURL=TileObserver.d.ts.map