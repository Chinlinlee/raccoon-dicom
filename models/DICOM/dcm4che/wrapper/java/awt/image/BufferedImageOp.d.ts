import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { BufferedImage as java_awt_image_BufferedImage } from "./BufferedImage";
import { Rectangle2D as java_awt_geom_Rectangle2D } from "./../geom/Rectangle2D";
import { RenderingHints as java_awt_RenderingHints } from "./../RenderingHints";
import { ColorModel as java_awt_image_ColorModel } from "./ColorModel";
import { Point2D as java_awt_geom_Point2D } from "./../geom/Point2D";
/**
 * This class just defines types, you should import {@link BufferedImageOp} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BufferedImageOpClass extends JavaClass {
    /**
     * @param var0 original type: 'java.awt.image.BufferedImage'
     * @param var1 original type: 'java.awt.image.BufferedImage'
     * @return original return type: 'java.awt.image.BufferedImage'
     */
    filter(var0: java_awt_image_BufferedImage | null, var1: java_awt_image_BufferedImage | null): Promise<java_awt_image_BufferedImage | null>;
    /**
     * @param var0 original type: 'java.awt.image.BufferedImage'
     * @param var1 original type: 'java.awt.image.BufferedImage'
     * @return original return type: 'java.awt.image.BufferedImage'
     */
    filterSync(var0: java_awt_image_BufferedImage | null, var1: java_awt_image_BufferedImage | null): java_awt_image_BufferedImage | null;
    /**
     * @param var0 original type: 'java.awt.image.BufferedImage'
     * @return original return type: 'java.awt.geom.Rectangle2D'
     */
    getBounds2D(var0: java_awt_image_BufferedImage | null): Promise<java_awt_geom_Rectangle2D | null>;
    /**
     * @param var0 original type: 'java.awt.image.BufferedImage'
     * @return original return type: 'java.awt.geom.Rectangle2D'
     */
    getBounds2DSync(var0: java_awt_image_BufferedImage | null): java_awt_geom_Rectangle2D | null;
    /**
     * @return original return type: 'java.awt.RenderingHints'
     */
    getRenderingHints(): Promise<java_awt_RenderingHints | null>;
    /**
     * @return original return type: 'java.awt.RenderingHints'
     */
    getRenderingHintsSync(): java_awt_RenderingHints | null;
    /**
     * @param var0 original type: 'java.awt.image.BufferedImage'
     * @param var1 original type: 'java.awt.image.ColorModel'
     * @return original return type: 'java.awt.image.BufferedImage'
     */
    createCompatibleDestImage(var0: java_awt_image_BufferedImage | null, var1: java_awt_image_ColorModel | null): Promise<java_awt_image_BufferedImage | null>;
    /**
     * @param var0 original type: 'java.awt.image.BufferedImage'
     * @param var1 original type: 'java.awt.image.ColorModel'
     * @return original return type: 'java.awt.image.BufferedImage'
     */
    createCompatibleDestImageSync(var0: java_awt_image_BufferedImage | null, var1: java_awt_image_ColorModel | null): java_awt_image_BufferedImage | null;
    /**
     * @param var0 original type: 'java.awt.geom.Point2D'
     * @param var1 original type: 'java.awt.geom.Point2D'
     * @return original return type: 'java.awt.geom.Point2D'
     */
    getPoint2D(var0: java_awt_geom_Point2D | null, var1: java_awt_geom_Point2D | null): Promise<java_awt_geom_Point2D | null>;
    /**
     * @param var0 original type: 'java.awt.geom.Point2D'
     * @param var1 original type: 'java.awt.geom.Point2D'
     * @return original return type: 'java.awt.geom.Point2D'
     */
    getPoint2DSync(var0: java_awt_geom_Point2D | null, var1: java_awt_geom_Point2D | null): java_awt_geom_Point2D | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createBufferedImageOpProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface BufferedImageOpInterface {
    /**
     * @param var0 original type: 'java.awt.image.BufferedImage'
     * @param var1 original type: 'java.awt.image.BufferedImage'
     * @return original return type: 'java.awt.image.BufferedImage'
     */
    filter(var0: java_awt_image_BufferedImage | null, var1: java_awt_image_BufferedImage | null): java_awt_image_BufferedImage | null;
    /**
     * @param var0 original type: 'java.awt.image.BufferedImage'
     * @return original return type: 'java.awt.geom.Rectangle2D'
     */
    getBounds2D(var0: java_awt_image_BufferedImage | null): java_awt_geom_Rectangle2D | null;
    /**
     * @return original return type: 'java.awt.RenderingHints'
     */
    getRenderingHints(): java_awt_RenderingHints | null;
    /**
     * @param var0 original type: 'java.awt.image.BufferedImage'
     * @param var1 original type: 'java.awt.image.ColorModel'
     * @return original return type: 'java.awt.image.BufferedImage'
     */
    createCompatibleDestImage(var0: java_awt_image_BufferedImage | null, var1: java_awt_image_ColorModel | null): java_awt_image_BufferedImage | null;
    /**
     * @param var0 original type: 'java.awt.geom.Point2D'
     * @param var1 original type: 'java.awt.geom.Point2D'
     * @return original return type: 'java.awt.geom.Point2D'
     */
    getPoint2D(var0: java_awt_geom_Point2D | null, var1: java_awt_geom_Point2D | null): java_awt_geom_Point2D | null;
}
/**
 * Create a proxy for the {@link BufferedImageOp} interface.
 * All required methods in {@link BufferedImageOpInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createBufferedImageOpProxy(methods: BufferedImageOpInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<BufferedImageOpInterface>;
declare const BufferedImageOp_base: typeof BufferedImageOpClass;
/**
 * Class java.awt.image.BufferedImageOp.
 *
 * This actually imports the java class for further use.
 * The class {@link BufferedImageOpClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BufferedImageOp extends BufferedImageOp_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default BufferedImageOp;
//# sourceMappingURL=BufferedImageOp.d.ts.map