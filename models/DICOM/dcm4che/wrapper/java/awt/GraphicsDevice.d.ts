import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Integer as java_lang_Integer } from "./../lang/Integer";
import { GraphicsConfiguration as java_awt_GraphicsConfiguration } from "./GraphicsConfiguration";
import { GraphicsConfigTemplate as java_awt_GraphicsConfigTemplate } from "./GraphicsConfigTemplate";
import { Window as java_awt_Window } from "./Window";
import { DisplayMode as java_awt_DisplayMode } from "./DisplayMode";
import { GraphicsDevice$WindowTranslucency as java_awt_GraphicsDevice$WindowTranslucency } from "./GraphicsDevice$WindowTranslucency";
import { Long as java_lang_Long } from "./../lang/Long";
import { Class as java_lang_Class } from "./../lang/Class";
/**
 * This class just defines types, you should import {@link GraphicsDevice} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class GraphicsDeviceClass extends JavaClass {
    /**
     * Original type: 'int'
     */
    static readonly TYPE_RASTER_SCREEN: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly TYPE_PRINTER: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly TYPE_IMAGE_BUFFER: java_lang_Integer | number;
    /**
     * @return original return type: 'int'
     */
    getType(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getTypeSync(): number;
    /**
     * @return original return type: 'java.awt.GraphicsConfiguration[]'
     */
    getConfigurations(): Promise<(java_awt_GraphicsConfiguration | null)[] | null>;
    /**
     * @return original return type: 'java.awt.GraphicsConfiguration[]'
     */
    getConfigurationsSync(): (java_awt_GraphicsConfiguration | null)[] | null;
    /**
     * @param var0 original type: 'java.awt.GraphicsConfigTemplate'
     * @return original return type: 'java.awt.GraphicsConfiguration'
     */
    getBestConfiguration(var0: java_awt_GraphicsConfigTemplate | null): Promise<java_awt_GraphicsConfiguration | null>;
    /**
     * @param var0 original type: 'java.awt.GraphicsConfigTemplate'
     * @return original return type: 'java.awt.GraphicsConfiguration'
     */
    getBestConfigurationSync(var0: java_awt_GraphicsConfigTemplate | null): java_awt_GraphicsConfiguration | null;
    /**
     * @return original return type: 'java.awt.Window'
     */
    getFullScreenWindow(): Promise<java_awt_Window | null>;
    /**
     * @return original return type: 'java.awt.Window'
     */
    getFullScreenWindowSync(): java_awt_Window | null;
    /**
     * @param var0 original type: 'java.awt.Window'
     * @return original return type: 'void'
     */
    setFullScreenWindow(var0: java_awt_Window | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.Window'
     * @return original return type: 'void'
     */
    setFullScreenWindowSync(var0: java_awt_Window | null): void;
    /**
     * @return original return type: 'java.awt.GraphicsConfiguration'
     */
    getDefaultConfiguration(): Promise<java_awt_GraphicsConfiguration | null>;
    /**
     * @return original return type: 'java.awt.GraphicsConfiguration'
     */
    getDefaultConfigurationSync(): java_awt_GraphicsConfiguration | null;
    /**
     * @return original return type: 'java.awt.DisplayMode'
     */
    getDisplayMode(): Promise<java_awt_DisplayMode | null>;
    /**
     * @return original return type: 'java.awt.DisplayMode'
     */
    getDisplayModeSync(): java_awt_DisplayMode | null;
    /**
     * @param var0 original type: 'java.awt.GraphicsDevice$WindowTranslucency'
     * @return original return type: 'boolean'
     */
    isWindowTranslucencySupported(var0: java_awt_GraphicsDevice$WindowTranslucency | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.awt.GraphicsDevice$WindowTranslucency'
     * @return original return type: 'boolean'
     */
    isWindowTranslucencySupportedSync(var0: java_awt_GraphicsDevice$WindowTranslucency | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    getIDstring(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getIDstringSync(): string | null;
    /**
     * @return original return type: 'boolean'
     */
    isFullScreenSupported(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isFullScreenSupportedSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isDisplayChangeSupported(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isDisplayChangeSupportedSync(): boolean;
    /**
     * @param var0 original type: 'java.awt.DisplayMode'
     * @return original return type: 'void'
     */
    setDisplayMode(var0: java_awt_DisplayMode | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.DisplayMode'
     * @return original return type: 'void'
     */
    setDisplayModeSync(var0: java_awt_DisplayMode | null): void;
    /**
     * @return original return type: 'java.awt.DisplayMode[]'
     */
    getDisplayModes(): Promise<(java_awt_DisplayMode | null)[] | null>;
    /**
     * @return original return type: 'java.awt.DisplayMode[]'
     */
    getDisplayModesSync(): (java_awt_DisplayMode | null)[] | null;
    /**
     * @return original return type: 'int'
     */
    getAvailableAcceleratedMemory(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getAvailableAcceleratedMemorySync(): number;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const GraphicsDevice_base: typeof GraphicsDeviceClass;
/**
 * Class java.awt.GraphicsDevice.
 *
 * This actually imports the java class for further use.
 * The class {@link GraphicsDeviceClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class GraphicsDevice extends GraphicsDevice_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default GraphicsDevice;
//# sourceMappingURL=GraphicsDevice.d.ts.map