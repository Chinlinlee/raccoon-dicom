import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { CompositeContext as java_awt_CompositeContext } from "./CompositeContext";
import { ColorModel as java_awt_image_ColorModel } from "./image/ColorModel";
import { RenderingHints as java_awt_RenderingHints } from "./RenderingHints";
/**
 * This class just defines types, you should import {@link Composite} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class CompositeClass extends JavaClass {
    /**
     * @param var0 original type: 'java.awt.image.ColorModel'
     * @param var1 original type: 'java.awt.image.ColorModel'
     * @param var2 original type: 'java.awt.RenderingHints'
     * @return original return type: 'java.awt.CompositeContext'
     */
    createContext(var0: java_awt_image_ColorModel | null, var1: java_awt_image_ColorModel | null, var2: java_awt_RenderingHints | null): Promise<java_awt_CompositeContext | null>;
    /**
     * @param var0 original type: 'java.awt.image.ColorModel'
     * @param var1 original type: 'java.awt.image.ColorModel'
     * @param var2 original type: 'java.awt.RenderingHints'
     * @return original return type: 'java.awt.CompositeContext'
     */
    createContextSync(var0: java_awt_image_ColorModel | null, var1: java_awt_image_ColorModel | null, var2: java_awt_RenderingHints | null): java_awt_CompositeContext | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createCompositeProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface CompositeInterface {
    /**
     * @param var0 original type: 'java.awt.image.ColorModel'
     * @param var1 original type: 'java.awt.image.ColorModel'
     * @param var2 original type: 'java.awt.RenderingHints'
     * @return original return type: 'java.awt.CompositeContext'
     */
    createContext(var0: java_awt_image_ColorModel | null, var1: java_awt_image_ColorModel | null, var2: java_awt_RenderingHints | null): java_awt_CompositeContext | null;
}
/**
 * Create a proxy for the {@link Composite} interface.
 * All required methods in {@link CompositeInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createCompositeProxy(methods: CompositeInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<CompositeInterface>;
declare const Composite_base: typeof CompositeClass;
/**
 * Class java.awt.Composite.
 *
 * This actually imports the java class for further use.
 * The class {@link CompositeClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Composite extends Composite_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Composite;
//# sourceMappingURL=Composite.d.ts.map