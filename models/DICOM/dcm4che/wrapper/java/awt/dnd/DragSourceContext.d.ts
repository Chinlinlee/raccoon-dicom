import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { Cursor as java_awt_Cursor } from "./../Cursor";
import { Component as java_awt_Component } from "./../Component";
import { DragSourceDragEvent as java_awt_dnd_DragSourceDragEvent } from "./DragSourceDragEvent";
import { DragSourceEvent as java_awt_dnd_DragSourceEvent } from "./DragSourceEvent";
import { DragSourceDropEvent as java_awt_dnd_DragSourceDropEvent } from "./DragSourceDropEvent";
import { DragSourceListener as java_awt_dnd_DragSourceListener, DragSourceListenerInterface as java_awt_dnd_DragSourceListenerInterface } from "./DragSourceListener";
import { DragSource as java_awt_dnd_DragSource } from "./DragSource";
import { Transferable as java_awt_datatransfer_Transferable, TransferableInterface as java_awt_datatransfer_TransferableInterface } from "./../datatransfer/Transferable";
import { DragGestureEvent as java_awt_dnd_DragGestureEvent } from "./DragGestureEvent";
import { Long as java_lang_Long } from "./../../lang/Long";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
import { Class as java_lang_Class } from "./../../lang/Class";
import { Image as java_awt_Image } from "./../Image";
import { Point as java_awt_Point } from "./../Point";
/**
 * This class just defines types, you should import {@link DragSourceContext} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DragSourceContextClass extends JavaClass {
    /**
     * @param var0 original type: 'java.awt.Cursor'
     * @return original return type: 'void'
     */
    setCursor(var0: java_awt_Cursor | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.Cursor'
     * @return original return type: 'void'
     */
    setCursorSync(var0: java_awt_Cursor | null): void;
    /**
     * @return original return type: 'java.awt.Component'
     */
    getComponent(): Promise<java_awt_Component | null>;
    /**
     * @return original return type: 'java.awt.Component'
     */
    getComponentSync(): java_awt_Component | null;
    /**
     * @return original return type: 'java.awt.Cursor'
     */
    getCursor(): Promise<java_awt_Cursor | null>;
    /**
     * @return original return type: 'java.awt.Cursor'
     */
    getCursorSync(): java_awt_Cursor | null;
    /**
     * @param var0 original type: 'java.awt.dnd.DragSourceDragEvent'
     * @return original return type: 'void'
     */
    dragEnter(var0: java_awt_dnd_DragSourceDragEvent | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.dnd.DragSourceDragEvent'
     * @return original return type: 'void'
     */
    dragEnterSync(var0: java_awt_dnd_DragSourceDragEvent | null): void;
    /**
     * @param var0 original type: 'java.awt.dnd.DragSourceDragEvent'
     * @return original return type: 'void'
     */
    dragOver(var0: java_awt_dnd_DragSourceDragEvent | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.dnd.DragSourceDragEvent'
     * @return original return type: 'void'
     */
    dragOverSync(var0: java_awt_dnd_DragSourceDragEvent | null): void;
    /**
     * @param var0 original type: 'java.awt.dnd.DragSourceDragEvent'
     * @return original return type: 'void'
     */
    dropActionChanged(var0: java_awt_dnd_DragSourceDragEvent | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.dnd.DragSourceDragEvent'
     * @return original return type: 'void'
     */
    dropActionChangedSync(var0: java_awt_dnd_DragSourceDragEvent | null): void;
    /**
     * @param var0 original type: 'java.awt.dnd.DragSourceEvent'
     * @return original return type: 'void'
     */
    dragExit(var0: java_awt_dnd_DragSourceEvent | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.dnd.DragSourceEvent'
     * @return original return type: 'void'
     */
    dragExitSync(var0: java_awt_dnd_DragSourceEvent | null): void;
    /**
     * @param var0 original type: 'java.awt.dnd.DragSourceDropEvent'
     * @return original return type: 'void'
     */
    dragDropEnd(var0: java_awt_dnd_DragSourceDropEvent | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.dnd.DragSourceDropEvent'
     * @return original return type: 'void'
     */
    dragDropEndSync(var0: java_awt_dnd_DragSourceDropEvent | null): void;
    /**
     * @param var0 original type: 'java.awt.dnd.DragSourceDragEvent'
     * @return original return type: 'void'
     */
    dragMouseMoved(var0: java_awt_dnd_DragSourceDragEvent | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.dnd.DragSourceDragEvent'
     * @return original return type: 'void'
     */
    dragMouseMovedSync(var0: java_awt_dnd_DragSourceDragEvent | null): void;
    /**
     * @param var0 original type: 'java.awt.dnd.DragSourceListener'
     * @return original return type: 'void'
     */
    addDragSourceListener(var0: java_awt_dnd_DragSourceListener | JavaInterfaceProxy<java_awt_dnd_DragSourceListenerInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.dnd.DragSourceListener'
     * @return original return type: 'void'
     */
    addDragSourceListenerSync(var0: java_awt_dnd_DragSourceListener | JavaInterfaceProxy<java_awt_dnd_DragSourceListenerInterface> | null): void;
    /**
     * @param var0 original type: 'java.awt.dnd.DragSourceListener'
     * @return original return type: 'void'
     */
    removeDragSourceListener(var0: java_awt_dnd_DragSourceListener | JavaInterfaceProxy<java_awt_dnd_DragSourceListenerInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.dnd.DragSourceListener'
     * @return original return type: 'void'
     */
    removeDragSourceListenerSync(var0: java_awt_dnd_DragSourceListener | JavaInterfaceProxy<java_awt_dnd_DragSourceListenerInterface> | null): void;
    /**
     * @return original return type: 'java.awt.dnd.DragSource'
     */
    getDragSource(): Promise<java_awt_dnd_DragSource | null>;
    /**
     * @return original return type: 'java.awt.dnd.DragSource'
     */
    getDragSourceSync(): java_awt_dnd_DragSource | null;
    /**
     * @return original return type: 'int'
     */
    getSourceActions(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getSourceActionsSync(): number;
    /**
     * @return original return type: 'java.awt.datatransfer.Transferable'
     */
    getTransferable(): Promise<java_awt_datatransfer_Transferable | null>;
    /**
     * @return original return type: 'java.awt.datatransfer.Transferable'
     */
    getTransferableSync(): java_awt_datatransfer_Transferable | null;
    /**
     * @return original return type: 'void'
     */
    transferablesFlavorsChanged(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    transferablesFlavorsChangedSync(): void;
    /**
     * @return original return type: 'java.awt.dnd.DragGestureEvent'
     */
    getTrigger(): Promise<java_awt_dnd_DragGestureEvent | null>;
    /**
     * @return original return type: 'java.awt.dnd.DragGestureEvent'
     */
    getTriggerSync(): java_awt_dnd_DragGestureEvent | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'java.awt.dnd.DragGestureEvent'
     * @param var1 original type: 'java.awt.Cursor'
     * @param var2 original type: 'java.awt.Image'
     * @param var3 original type: 'java.awt.Point'
     * @param var4 original type: 'java.awt.datatransfer.Transferable'
     * @param var5 original type: 'java.awt.dnd.DragSourceListener'
     * @return original return type: 'java.awt.dnd.DragSourceContext'
     */
    static newInstance(var0: java_awt_dnd_DragGestureEvent | null, var1: java_awt_Cursor | null, var2: java_awt_Image | null, var3: java_awt_Point | null, var4: java_awt_datatransfer_Transferable | JavaInterfaceProxy<java_awt_datatransfer_TransferableInterface> | null, var5: java_awt_dnd_DragSourceListener | JavaInterfaceProxy<java_awt_dnd_DragSourceListenerInterface> | null): Promise<DragSourceContext>;
    /**
     * @param var0 original type: 'java.awt.dnd.DragGestureEvent'
     * @param var1 original type: 'java.awt.Cursor'
     * @param var2 original type: 'java.awt.Image'
     * @param var3 original type: 'java.awt.Point'
     * @param var4 original type: 'java.awt.datatransfer.Transferable'
     * @param var5 original type: 'java.awt.dnd.DragSourceListener'
     */
    constructor(var0: java_awt_dnd_DragGestureEvent | null, var1: java_awt_Cursor | null, var2: java_awt_Image | null, var3: java_awt_Point | null, var4: java_awt_datatransfer_Transferable | JavaInterfaceProxy<java_awt_datatransfer_TransferableInterface> | null, var5: java_awt_dnd_DragSourceListener | JavaInterfaceProxy<java_awt_dnd_DragSourceListenerInterface> | null);
}
declare const DragSourceContext_base: typeof DragSourceContextClass;
/**
 * Class java.awt.dnd.DragSourceContext.
 *
 * This actually imports the java class for further use.
 * The class {@link DragSourceContextClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DragSourceContext extends DragSourceContext_base {
}
export default DragSourceContext;
//# sourceMappingURL=DragSourceContext.d.ts.map