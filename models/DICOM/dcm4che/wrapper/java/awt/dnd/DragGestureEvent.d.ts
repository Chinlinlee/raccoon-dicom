import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { Iterator as java_util_Iterator } from "./../../util/Iterator";
import { Component as java_awt_Component } from "./../Component";
import { Cursor as java_awt_Cursor } from "./../Cursor";
import { Image as java_awt_Image } from "./../Image";
import { Point as java_awt_Point } from "./../Point";
import { Transferable as java_awt_datatransfer_Transferable, TransferableInterface as java_awt_datatransfer_TransferableInterface } from "./../datatransfer/Transferable";
import { DragSourceListener as java_awt_dnd_DragSourceListener, DragSourceListenerInterface as java_awt_dnd_DragSourceListenerInterface } from "./DragSourceListener";
import { DragSource as java_awt_dnd_DragSource } from "./DragSource";
import { InputEvent as java_awt_event_InputEvent } from "./../event/InputEvent";
import { DragGestureRecognizer as java_awt_dnd_DragGestureRecognizer } from "./DragGestureRecognizer";
import { Long as java_lang_Long } from "./../../lang/Long";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
import { Class as java_lang_Class } from "./../../lang/Class";
import { List as java_util_List, ListInterface as java_util_ListInterface } from "./../../util/List";
/**
 * This class just defines types, you should import {@link DragGestureEvent} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DragGestureEventClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.Object[]'
     * @return original return type: 'java.lang.Object[]'
     */
    toArray(var0: (BasicOrJavaType | null)[] | null): Promise<(BasicOrJavaType | null)[] | null>;
    /**
     * @param var0 original type: 'java.lang.Object[]'
     * @return original return type: 'java.lang.Object[]'
     */
    toArraySync(var0: (BasicOrJavaType | null)[] | null): (BasicOrJavaType | null)[] | null;
    /**
     * @return original return type: 'java.lang.Object[]'
     */
    toArray(): Promise<(BasicOrJavaType | null)[] | null>;
    /**
     * @return original return type: 'java.lang.Object[]'
     */
    toArraySync(): (BasicOrJavaType | null)[] | null;
    /**
     * @return original return type: 'java.util.Iterator'
     */
    iterator(): Promise<java_util_Iterator | null>;
    /**
     * @return original return type: 'java.util.Iterator'
     */
    iteratorSync(): java_util_Iterator | null;
    /**
     * @return original return type: 'java.awt.Component'
     */
    getComponent(): Promise<java_awt_Component | null>;
    /**
     * @return original return type: 'java.awt.Component'
     */
    getComponentSync(): java_awt_Component | null;
    /**
     * @param var0 original type: 'java.awt.Cursor'
     * @param var1 original type: 'java.awt.Image'
     * @param var2 original type: 'java.awt.Point'
     * @param var3 original type: 'java.awt.datatransfer.Transferable'
     * @param var4 original type: 'java.awt.dnd.DragSourceListener'
     * @return original return type: 'void'
     */
    startDrag(var0: java_awt_Cursor | null, var1: java_awt_Image | null, var2: java_awt_Point | null, var3: java_awt_datatransfer_Transferable | JavaInterfaceProxy<java_awt_datatransfer_TransferableInterface> | null, var4: java_awt_dnd_DragSourceListener | JavaInterfaceProxy<java_awt_dnd_DragSourceListenerInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.Cursor'
     * @param var1 original type: 'java.awt.Image'
     * @param var2 original type: 'java.awt.Point'
     * @param var3 original type: 'java.awt.datatransfer.Transferable'
     * @param var4 original type: 'java.awt.dnd.DragSourceListener'
     * @return original return type: 'void'
     */
    startDragSync(var0: java_awt_Cursor | null, var1: java_awt_Image | null, var2: java_awt_Point | null, var3: java_awt_datatransfer_Transferable | JavaInterfaceProxy<java_awt_datatransfer_TransferableInterface> | null, var4: java_awt_dnd_DragSourceListener | JavaInterfaceProxy<java_awt_dnd_DragSourceListenerInterface> | null): void;
    /**
     * @param var0 original type: 'java.awt.Cursor'
     * @param var1 original type: 'java.awt.datatransfer.Transferable'
     * @param var2 original type: 'java.awt.dnd.DragSourceListener'
     * @return original return type: 'void'
     */
    startDrag(var0: java_awt_Cursor | null, var1: java_awt_datatransfer_Transferable | JavaInterfaceProxy<java_awt_datatransfer_TransferableInterface> | null, var2: java_awt_dnd_DragSourceListener | JavaInterfaceProxy<java_awt_dnd_DragSourceListenerInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.Cursor'
     * @param var1 original type: 'java.awt.datatransfer.Transferable'
     * @param var2 original type: 'java.awt.dnd.DragSourceListener'
     * @return original return type: 'void'
     */
    startDragSync(var0: java_awt_Cursor | null, var1: java_awt_datatransfer_Transferable | JavaInterfaceProxy<java_awt_datatransfer_TransferableInterface> | null, var2: java_awt_dnd_DragSourceListener | JavaInterfaceProxy<java_awt_dnd_DragSourceListenerInterface> | null): void;
    /**
     * @param var0 original type: 'java.awt.Cursor'
     * @param var1 original type: 'java.awt.datatransfer.Transferable'
     * @return original return type: 'void'
     */
    startDrag(var0: java_awt_Cursor | null, var1: java_awt_datatransfer_Transferable | JavaInterfaceProxy<java_awt_datatransfer_TransferableInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.Cursor'
     * @param var1 original type: 'java.awt.datatransfer.Transferable'
     * @return original return type: 'void'
     */
    startDragSync(var0: java_awt_Cursor | null, var1: java_awt_datatransfer_Transferable | JavaInterfaceProxy<java_awt_datatransfer_TransferableInterface> | null): void;
    /**
     * @return original return type: 'java.awt.dnd.DragSource'
     */
    getDragSource(): Promise<java_awt_dnd_DragSource | null>;
    /**
     * @return original return type: 'java.awt.dnd.DragSource'
     */
    getDragSourceSync(): java_awt_dnd_DragSource | null;
    /**
     * @return original return type: 'java.awt.event.InputEvent'
     */
    getTriggerEvent(): Promise<java_awt_event_InputEvent | null>;
    /**
     * @return original return type: 'java.awt.event.InputEvent'
     */
    getTriggerEventSync(): java_awt_event_InputEvent | null;
    /**
     * @return original return type: 'java.awt.dnd.DragGestureRecognizer'
     */
    getSourceAsDragGestureRecognizer(): Promise<java_awt_dnd_DragGestureRecognizer | null>;
    /**
     * @return original return type: 'java.awt.dnd.DragGestureRecognizer'
     */
    getSourceAsDragGestureRecognizerSync(): java_awt_dnd_DragGestureRecognizer | null;
    /**
     * @return original return type: 'java.awt.Point'
     */
    getDragOrigin(): Promise<java_awt_Point | null>;
    /**
     * @return original return type: 'java.awt.Point'
     */
    getDragOriginSync(): java_awt_Point | null;
    /**
     * @return original return type: 'int'
     */
    getDragAction(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getDragActionSync(): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'java.lang.Object'
     */
    getSource(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    getSourceSync(): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'java.awt.dnd.DragGestureRecognizer'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.awt.Point'
     * @param var3 original type: 'java.util.List'
     * @return original return type: 'java.awt.dnd.DragGestureEvent'
     */
    static newInstance(var0: java_awt_dnd_DragGestureRecognizer | null, var1: java_lang_Integer | number, var2: java_awt_Point | null, var3: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null): Promise<DragGestureEvent>;
    /**
     * @param var0 original type: 'java.awt.dnd.DragGestureRecognizer'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.awt.Point'
     * @param var3 original type: 'java.util.List'
     */
    constructor(var0: java_awt_dnd_DragGestureRecognizer | null, var1: java_lang_Integer | number, var2: java_awt_Point | null, var3: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null);
}
declare const DragGestureEvent_base: typeof DragGestureEventClass;
/**
 * Class java.awt.dnd.DragGestureEvent.
 *
 * This actually imports the java class for further use.
 * The class {@link DragGestureEventClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DragGestureEvent extends DragGestureEvent_base {
}
export default DragGestureEvent;
//# sourceMappingURL=DragGestureEvent.d.ts.map