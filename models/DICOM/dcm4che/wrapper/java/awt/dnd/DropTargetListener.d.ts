import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { DropTargetDropEvent as java_awt_dnd_DropTargetDropEvent } from "./DropTargetDropEvent";
import { DropTargetDragEvent as java_awt_dnd_DropTargetDragEvent } from "./DropTargetDragEvent";
import { DropTargetEvent as java_awt_dnd_DropTargetEvent } from "./DropTargetEvent";
/**
 * This class just defines types, you should import {@link DropTargetListener} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DropTargetListenerClass extends JavaClass {
    /**
     * @param var0 original type: 'java.awt.dnd.DropTargetDropEvent'
     * @return original return type: 'void'
     */
    drop(var0: java_awt_dnd_DropTargetDropEvent | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.dnd.DropTargetDropEvent'
     * @return original return type: 'void'
     */
    dropSync(var0: java_awt_dnd_DropTargetDropEvent | null): void;
    /**
     * @param var0 original type: 'java.awt.dnd.DropTargetDragEvent'
     * @return original return type: 'void'
     */
    dragEnter(var0: java_awt_dnd_DropTargetDragEvent | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.dnd.DropTargetDragEvent'
     * @return original return type: 'void'
     */
    dragEnterSync(var0: java_awt_dnd_DropTargetDragEvent | null): void;
    /**
     * @param var0 original type: 'java.awt.dnd.DropTargetDragEvent'
     * @return original return type: 'void'
     */
    dragOver(var0: java_awt_dnd_DropTargetDragEvent | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.dnd.DropTargetDragEvent'
     * @return original return type: 'void'
     */
    dragOverSync(var0: java_awt_dnd_DropTargetDragEvent | null): void;
    /**
     * @param var0 original type: 'java.awt.dnd.DropTargetDragEvent'
     * @return original return type: 'void'
     */
    dropActionChanged(var0: java_awt_dnd_DropTargetDragEvent | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.dnd.DropTargetDragEvent'
     * @return original return type: 'void'
     */
    dropActionChangedSync(var0: java_awt_dnd_DropTargetDragEvent | null): void;
    /**
     * @param var0 original type: 'java.awt.dnd.DropTargetEvent'
     * @return original return type: 'void'
     */
    dragExit(var0: java_awt_dnd_DropTargetEvent | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.dnd.DropTargetEvent'
     * @return original return type: 'void'
     */
    dragExitSync(var0: java_awt_dnd_DropTargetEvent | null): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createDropTargetListenerProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface DropTargetListenerInterface {
    /**
     * @param var0 original type: 'java.awt.dnd.DropTargetDropEvent'
     * @return original return type: 'void'
     */
    drop(var0: java_awt_dnd_DropTargetDropEvent | null): void;
    /**
     * @param var0 original type: 'java.awt.dnd.DropTargetDragEvent'
     * @return original return type: 'void'
     */
    dragEnter(var0: java_awt_dnd_DropTargetDragEvent | null): void;
    /**
     * @param var0 original type: 'java.awt.dnd.DropTargetDragEvent'
     * @return original return type: 'void'
     */
    dragOver(var0: java_awt_dnd_DropTargetDragEvent | null): void;
    /**
     * @param var0 original type: 'java.awt.dnd.DropTargetDragEvent'
     * @return original return type: 'void'
     */
    dropActionChanged(var0: java_awt_dnd_DropTargetDragEvent | null): void;
    /**
     * @param var0 original type: 'java.awt.dnd.DropTargetEvent'
     * @return original return type: 'void'
     */
    dragExit(var0: java_awt_dnd_DropTargetEvent | null): void;
}
/**
 * Create a proxy for the {@link DropTargetListener} interface.
 * All required methods in {@link DropTargetListenerInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createDropTargetListenerProxy(methods: DropTargetListenerInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<DropTargetListenerInterface>;
declare const DropTargetListener_base: typeof DropTargetListenerClass;
/**
 * Class java.awt.dnd.DropTargetListener.
 *
 * This actually imports the java class for further use.
 * The class {@link DropTargetListenerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DropTargetListener extends DropTargetListener_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default DropTargetListener;
//# sourceMappingURL=DropTargetListener.d.ts.map