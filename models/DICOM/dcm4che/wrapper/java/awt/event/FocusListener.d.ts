import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { FocusEvent as java_awt_event_FocusEvent } from "./FocusEvent";
/**
 * This class just defines types, you should import {@link FocusListener} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class FocusListenerClass extends JavaClass {
    /**
     * @param var0 original type: 'java.awt.event.FocusEvent'
     * @return original return type: 'void'
     */
    focusGained(var0: java_awt_event_FocusEvent | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.event.FocusEvent'
     * @return original return type: 'void'
     */
    focusGainedSync(var0: java_awt_event_FocusEvent | null): void;
    /**
     * @param var0 original type: 'java.awt.event.FocusEvent'
     * @return original return type: 'void'
     */
    focusLost(var0: java_awt_event_FocusEvent | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.event.FocusEvent'
     * @return original return type: 'void'
     */
    focusLostSync(var0: java_awt_event_FocusEvent | null): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createFocusListenerProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface FocusListenerInterface {
    /**
     * @param var0 original type: 'java.awt.event.FocusEvent'
     * @return original return type: 'void'
     */
    focusGained(var0: java_awt_event_FocusEvent | null): void;
    /**
     * @param var0 original type: 'java.awt.event.FocusEvent'
     * @return original return type: 'void'
     */
    focusLost(var0: java_awt_event_FocusEvent | null): void;
}
/**
 * Create a proxy for the {@link FocusListener} interface.
 * All required methods in {@link FocusListenerInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createFocusListenerProxy(methods: FocusListenerInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<FocusListenerInterface>;
declare const FocusListener_base: typeof FocusListenerClass;
/**
 * Class java.awt.event.FocusListener.
 *
 * This actually imports the java class for further use.
 * The class {@link FocusListenerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class FocusListener extends FocusListener_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default FocusListener;
//# sourceMappingURL=FocusListener.d.ts.map