import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { ActionEvent as java_awt_event_ActionEvent } from "./ActionEvent";
/**
 * This class just defines types, you should import {@link ActionListener} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ActionListenerClass extends JavaClass {
    /**
     * @param var0 original type: 'java.awt.event.ActionEvent'
     * @return original return type: 'void'
     */
    actionPerformed(var0: java_awt_event_ActionEvent | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.event.ActionEvent'
     * @return original return type: 'void'
     */
    actionPerformedSync(var0: java_awt_event_ActionEvent | null): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createActionListenerProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface ActionListenerInterface {
    /**
     * @param var0 original type: 'java.awt.event.ActionEvent'
     * @return original return type: 'void'
     */
    actionPerformed(var0: java_awt_event_ActionEvent | null): void;
}
/**
 * Create a proxy for the {@link ActionListener} interface.
 * All required methods in {@link ActionListenerInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createActionListenerProxy(methods: ActionListenerInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<ActionListenerInterface>;
declare const ActionListener_base: typeof ActionListenerClass;
/**
 * Class java.awt.event.ActionListener.
 *
 * This actually imports the java class for further use.
 * The class {@link ActionListenerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ActionListener extends ActionListener_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default ActionListener;
//# sourceMappingURL=ActionListener.d.ts.map