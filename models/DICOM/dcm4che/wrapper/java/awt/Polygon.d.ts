import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Integer as java_lang_Integer } from "./../lang/Integer";
import { Double as java_lang_Double } from "./../lang/Double";
import { Point as java_awt_Point } from "./Point";
import { Point2D as java_awt_geom_Point2D } from "./geom/Point2D";
import { Rectangle2D as java_awt_geom_Rectangle2D } from "./geom/Rectangle2D";
import { Rectangle as java_awt_Rectangle } from "./Rectangle";
import { PathIterator as java_awt_geom_PathIterator } from "./geom/PathIterator";
import { AffineTransform as java_awt_geom_AffineTransform } from "./geom/AffineTransform";
import { Long as java_lang_Long } from "./../lang/Long";
import { Class as java_lang_Class } from "./../lang/Class";
/**
 * This class just defines types, you should import {@link Polygon} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class PolygonClass extends JavaClass {
    /**
     * Original type: 'int'
     */
    npoints: java_lang_Integer | number;
    /**
     * Original type: 'int[]'
     */
    xpoints: (java_lang_Integer | number)[] | null;
    /**
     * Original type: 'int[]'
     */
    ypoints: (java_lang_Integer | number)[] | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'boolean'
     */
    contains(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'boolean'
     */
    containsSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @return original return type: 'boolean'
     */
    contains(var0: java_lang_Double | number, var1: java_lang_Double | number): Promise<boolean>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @return original return type: 'boolean'
     */
    containsSync(var0: java_lang_Double | number, var1: java_lang_Double | number): boolean;
    /**
     * @param var0 original type: 'java.awt.Point'
     * @return original return type: 'boolean'
     */
    contains(var0: java_awt_Point | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.awt.Point'
     * @return original return type: 'boolean'
     */
    containsSync(var0: java_awt_Point | null): boolean;
    /**
     * @param var0 original type: 'java.awt.geom.Point2D'
     * @return original return type: 'boolean'
     */
    contains(var0: java_awt_geom_Point2D | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.awt.geom.Point2D'
     * @return original return type: 'boolean'
     */
    containsSync(var0: java_awt_geom_Point2D | null): boolean;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @return original return type: 'boolean'
     */
    contains(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number): Promise<boolean>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @return original return type: 'boolean'
     */
    containsSync(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number): boolean;
    /**
     * @param var0 original type: 'java.awt.geom.Rectangle2D'
     * @return original return type: 'boolean'
     */
    contains(var0: java_awt_geom_Rectangle2D | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.awt.geom.Rectangle2D'
     * @return original return type: 'boolean'
     */
    containsSync(var0: java_awt_geom_Rectangle2D | null): boolean;
    /**
     * @return original return type: 'java.awt.Rectangle'
     */
    getBounds(): Promise<java_awt_Rectangle | null>;
    /**
     * @return original return type: 'java.awt.Rectangle'
     */
    getBoundsSync(): java_awt_Rectangle | null;
    /**
     * @return original return type: 'void'
     */
    reset(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    resetSync(): void;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'boolean'
     */
    inside(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'boolean'
     */
    insideSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): boolean;
    /**
     * @return original return type: 'java.awt.geom.Rectangle2D'
     */
    getBounds2D(): Promise<java_awt_geom_Rectangle2D | null>;
    /**
     * @return original return type: 'java.awt.geom.Rectangle2D'
     */
    getBounds2DSync(): java_awt_geom_Rectangle2D | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    translate(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    translateSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @return original return type: 'boolean'
     */
    intersects(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number): Promise<boolean>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @return original return type: 'boolean'
     */
    intersectsSync(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number, var3: java_lang_Double | number): boolean;
    /**
     * @param var0 original type: 'java.awt.geom.Rectangle2D'
     * @return original return type: 'boolean'
     */
    intersects(var0: java_awt_geom_Rectangle2D | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.awt.geom.Rectangle2D'
     * @return original return type: 'boolean'
     */
    intersectsSync(var0: java_awt_geom_Rectangle2D | null): boolean;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @return original return type: 'java.awt.geom.PathIterator'
     */
    getPathIterator(var0: java_awt_geom_AffineTransform | null): Promise<java_awt_geom_PathIterator | null>;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @return original return type: 'java.awt.geom.PathIterator'
     */
    getPathIteratorSync(var0: java_awt_geom_AffineTransform | null): java_awt_geom_PathIterator | null;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @param var1 original type: 'double'
     * @return original return type: 'java.awt.geom.PathIterator'
     */
    getPathIterator(var0: java_awt_geom_AffineTransform | null, var1: java_lang_Double | number): Promise<java_awt_geom_PathIterator | null>;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @param var1 original type: 'double'
     * @return original return type: 'java.awt.geom.PathIterator'
     */
    getPathIteratorSync(var0: java_awt_geom_AffineTransform | null, var1: java_lang_Double | number): java_awt_geom_PathIterator | null;
    /**
     * @return original return type: 'java.awt.Rectangle'
     */
    getBoundingBox(): Promise<java_awt_Rectangle | null>;
    /**
     * @return original return type: 'java.awt.Rectangle'
     */
    getBoundingBoxSync(): java_awt_Rectangle | null;
    /**
     * @return original return type: 'void'
     */
    invalidate(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    invalidateSync(): void;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    addPoint(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    addPointSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @return original return type: 'java.awt.Polygon'
     */
    static newInstance(): Promise<Polygon>;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'int[]'
     * @param var2 original type: 'int'
     * @return original return type: 'java.awt.Polygon'
     */
    static newInstance(var0: (java_lang_Integer | number)[] | null, var1: (java_lang_Integer | number)[] | null, var2: java_lang_Integer | number): Promise<Polygon>;
    constructor();
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'int[]'
     * @param var2 original type: 'int'
     */
    constructor(var0: (java_lang_Integer | number)[] | null, var1: (java_lang_Integer | number)[] | null, var2: java_lang_Integer | number);
}
declare const Polygon_base: typeof PolygonClass;
/**
 * Class java.awt.Polygon.
 *
 * This actually imports the java class for further use.
 * The class {@link PolygonClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Polygon extends Polygon_base {
}
export default Polygon;
//# sourceMappingURL=Polygon.d.ts.map