import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { Integer as java_lang_Integer } from "./../lang/Integer";
import { Map as java_util_Map, MapInterface as java_util_MapInterface } from "./../util/Map";
import { Locale as java_util_Locale } from "./../util/Locale";
import { AffineTransform as java_awt_geom_AffineTransform } from "./geom/AffineTransform";
import { Rectangle2D as java_awt_geom_Rectangle2D } from "./geom/Rectangle2D";
import { FontRenderContext as java_awt_font_FontRenderContext } from "./font/FontRenderContext";
import { CharacterIterator as java_text_CharacterIterator, CharacterIteratorInterface as java_text_CharacterIteratorInterface } from "./../text/CharacterIterator";
import { File as java_io_File } from "./../io/File";
import { InputStream as java_io_InputStream } from "./../io/InputStream";
import { AttributedCharacterIterator$Attribute as java_text_AttributedCharacterIterator$Attribute } from "./../text/AttributedCharacterIterator$Attribute";
import { Float as java_lang_Float } from "./../lang/Float";
import { LineMetrics as java_awt_font_LineMetrics } from "./font/LineMetrics";
import { GlyphVector as java_awt_font_GlyphVector } from "./font/GlyphVector";
import { Long as java_lang_Long } from "./../lang/Long";
import { Class as java_lang_Class } from "./../lang/Class";
/**
 * This class just defines types, you should import {@link Font} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class FontClass extends JavaClass {
    /**
     * Original type: 'java.lang.String'
     */
    static readonly DIALOG: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly DIALOG_INPUT: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly SANS_SERIF: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly SERIF: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly MONOSPACED: string | null;
    /**
     * Original type: 'int'
     */
    static readonly PLAIN: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly BOLD: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly ITALIC: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly ROMAN_BASELINE: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CENTER_BASELINE: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly HANGING_BASELINE: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly TRUETYPE_FONT: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly TYPE1_FONT: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly LAYOUT_LEFT_TO_RIGHT: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly LAYOUT_RIGHT_TO_LEFT: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly LAYOUT_NO_START_CONTEXT: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly LAYOUT_NO_LIMIT_CONTEXT: java_lang_Integer | number;
    /**
     * @return original return type: 'java.lang.String'
     */
    getName(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getNameSync(): string | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.awt.Font'
     */
    static decode(var0: string | null): Promise<Font | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.awt.Font'
     */
    static decodeSync(var0: string | null): Font | null;
    /**
     * @return original return type: 'int'
     */
    getSize(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getSizeSync(): number;
    /**
     * @return original return type: 'java.util.Map'
     */
    getAttributes(): Promise<java_util_Map | null>;
    /**
     * @return original return type: 'java.util.Map'
     */
    getAttributesSync(): java_util_Map | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getFamily(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getFamilySync(): string | null;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getFamily(var0: java_util_Locale | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getFamilySync(var0: java_util_Locale | null): string | null;
    /**
     * @return original return type: 'java.awt.geom.AffineTransform'
     */
    getTransform(): Promise<java_awt_geom_AffineTransform | null>;
    /**
     * @return original return type: 'java.awt.geom.AffineTransform'
     */
    getTransformSync(): java_awt_geom_AffineTransform | null;
    /**
     * @param var0 original type: 'java.util.Map'
     * @return original return type: 'java.awt.Font'
     */
    static getFont(var0: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null): Promise<Font | null>;
    /**
     * @param var0 original type: 'java.util.Map'
     * @return original return type: 'java.awt.Font'
     */
    static getFontSync(var0: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null): Font | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.awt.Font'
     * @return original return type: 'java.awt.Font'
     */
    static getFont(var0: string | null, var1: FontClass | null): Promise<Font | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.awt.Font'
     * @return original return type: 'java.awt.Font'
     */
    static getFontSync(var0: string | null, var1: FontClass | null): Font | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.awt.Font'
     */
    static getFont(var0: string | null): Promise<Font | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.awt.Font'
     */
    static getFontSync(var0: string | null): Font | null;
    /**
     * @return original return type: 'int'
     */
    getNumGlyphs(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getNumGlyphsSync(): number;
    /**
     * @return original return type: 'boolean'
     */
    isTransformed(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isTransformedSync(): boolean;
    /**
     * @return original return type: 'int'
     */
    getStyle(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getStyleSync(): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    getFontName(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getFontNameSync(): string | null;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getFontName(var0: java_util_Locale | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getFontNameSync(var0: java_util_Locale | null): string | null;
    /**
     * @return original return type: 'boolean'
     */
    hasLayoutAttributes(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasLayoutAttributesSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isBold(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isBoldSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isItalic(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isItalicSync(): boolean;
    /**
     * @return original return type: 'int'
     */
    getMissingGlyphCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getMissingGlyphCodeSync(): number;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'byte'
     */
    getBaselineFor(var0: string | null): Promise<number>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'byte'
     */
    getBaselineForSync(var0: string | null): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    canDisplay(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    canDisplaySync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    canDisplay(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    canDisplaySync(var0: string | null): boolean;
    /**
     * @return original return type: 'float'
     */
    getItalicAngle(): Promise<number>;
    /**
     * @return original return type: 'float'
     */
    getItalicAngleSync(): number;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'java.awt.font.FontRenderContext'
     * @return original return type: 'java.awt.geom.Rectangle2D'
     */
    getStringBounds(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_awt_font_FontRenderContext | null): Promise<java_awt_geom_Rectangle2D | null>;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'java.awt.font.FontRenderContext'
     * @return original return type: 'java.awt.geom.Rectangle2D'
     */
    getStringBoundsSync(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_awt_font_FontRenderContext | null): java_awt_geom_Rectangle2D | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'java.awt.font.FontRenderContext'
     * @return original return type: 'java.awt.geom.Rectangle2D'
     */
    getStringBounds(var0: string | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_awt_font_FontRenderContext | null): Promise<java_awt_geom_Rectangle2D | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'java.awt.font.FontRenderContext'
     * @return original return type: 'java.awt.geom.Rectangle2D'
     */
    getStringBoundsSync(var0: string | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_awt_font_FontRenderContext | null): java_awt_geom_Rectangle2D | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.awt.font.FontRenderContext'
     * @return original return type: 'java.awt.geom.Rectangle2D'
     */
    getStringBounds(var0: string | null, var1: java_awt_font_FontRenderContext | null): Promise<java_awt_geom_Rectangle2D | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.awt.font.FontRenderContext'
     * @return original return type: 'java.awt.geom.Rectangle2D'
     */
    getStringBoundsSync(var0: string | null, var1: java_awt_font_FontRenderContext | null): java_awt_geom_Rectangle2D | null;
    /**
     * @param var0 original type: 'java.text.CharacterIterator'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'java.awt.font.FontRenderContext'
     * @return original return type: 'java.awt.geom.Rectangle2D'
     */
    getStringBounds(var0: java_text_CharacterIterator | JavaInterfaceProxy<java_text_CharacterIteratorInterface> | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_awt_font_FontRenderContext | null): Promise<java_awt_geom_Rectangle2D | null>;
    /**
     * @param var0 original type: 'java.text.CharacterIterator'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'java.awt.font.FontRenderContext'
     * @return original return type: 'java.awt.geom.Rectangle2D'
     */
    getStringBoundsSync(var0: java_text_CharacterIterator | JavaInterfaceProxy<java_text_CharacterIteratorInterface> | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_awt_font_FontRenderContext | null): java_awt_geom_Rectangle2D | null;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'boolean'
     */
    static textRequiresLayout(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'boolean'
     */
    static textRequiresLayoutSync(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'java.io.File'
     * @return original return type: 'java.awt.Font[]'
     */
    static createFonts(var0: java_io_File | null): Promise<(Font | null)[] | null>;
    /**
     * @param var0 original type: 'java.io.File'
     * @return original return type: 'java.awt.Font[]'
     */
    static createFontsSync(var0: java_io_File | null): (Font | null)[] | null;
    /**
     * @param var0 original type: 'java.io.InputStream'
     * @return original return type: 'java.awt.Font[]'
     */
    static createFonts(var0: java_io_InputStream | null): Promise<(Font | null)[] | null>;
    /**
     * @param var0 original type: 'java.io.InputStream'
     * @return original return type: 'java.awt.Font[]'
     */
    static createFontsSync(var0: java_io_InputStream | null): (Font | null)[] | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.io.File'
     * @return original return type: 'java.awt.Font'
     */
    static createFont(var0: java_lang_Integer | number, var1: java_io_File | null): Promise<Font | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.io.File'
     * @return original return type: 'java.awt.Font'
     */
    static createFontSync(var0: java_lang_Integer | number, var1: java_io_File | null): Font | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.io.InputStream'
     * @return original return type: 'java.awt.Font'
     */
    static createFont(var0: java_lang_Integer | number, var1: java_io_InputStream | null): Promise<Font | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.io.InputStream'
     * @return original return type: 'java.awt.Font'
     */
    static createFontSync(var0: java_lang_Integer | number, var1: java_io_InputStream | null): Font | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPSName(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPSNameSync(): string | null;
    /**
     * @return original return type: 'float'
     */
    getSize2D(): Promise<number>;
    /**
     * @return original return type: 'float'
     */
    getSize2DSync(): number;
    /**
     * @return original return type: 'boolean'
     */
    isPlain(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isPlainSync(): boolean;
    /**
     * @return original return type: 'java.text.AttributedCharacterIterator$Attribute[]'
     */
    getAvailableAttributes(): Promise<(java_text_AttributedCharacterIterator$Attribute | null)[] | null>;
    /**
     * @return original return type: 'java.text.AttributedCharacterIterator$Attribute[]'
     */
    getAvailableAttributesSync(): (java_text_AttributedCharacterIterator$Attribute | null)[] | null;
    /**
     * @param var0 original type: 'java.util.Map'
     * @return original return type: 'java.awt.Font'
     */
    deriveFont(var0: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null): Promise<Font | null>;
    /**
     * @param var0 original type: 'java.util.Map'
     * @return original return type: 'java.awt.Font'
     */
    deriveFontSync(var0: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null): Font | null;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @return original return type: 'java.awt.Font'
     */
    deriveFont(var0: java_awt_geom_AffineTransform | null): Promise<Font | null>;
    /**
     * @param var0 original type: 'java.awt.geom.AffineTransform'
     * @return original return type: 'java.awt.Font'
     */
    deriveFontSync(var0: java_awt_geom_AffineTransform | null): Font | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.awt.Font'
     */
    deriveFont(var0: java_lang_Integer | number): Promise<Font | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.awt.Font'
     */
    deriveFontSync(var0: java_lang_Integer | number): Font | null;
    /**
     * @param var0 original type: 'float'
     * @return original return type: 'java.awt.Font'
     */
    deriveFont(var0: java_lang_Float | number): Promise<Font | null>;
    /**
     * @param var0 original type: 'float'
     * @return original return type: 'java.awt.Font'
     */
    deriveFontSync(var0: java_lang_Float | number): Font | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'float'
     * @return original return type: 'java.awt.Font'
     */
    deriveFont(var0: java_lang_Integer | number, var1: java_lang_Float | number): Promise<Font | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'float'
     * @return original return type: 'java.awt.Font'
     */
    deriveFontSync(var0: java_lang_Integer | number, var1: java_lang_Float | number): Font | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.awt.geom.AffineTransform'
     * @return original return type: 'java.awt.Font'
     */
    deriveFont(var0: java_lang_Integer | number, var1: java_awt_geom_AffineTransform | null): Promise<Font | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.awt.geom.AffineTransform'
     * @return original return type: 'java.awt.Font'
     */
    deriveFontSync(var0: java_lang_Integer | number, var1: java_awt_geom_AffineTransform | null): Font | null;
    /**
     * @param var0 original type: 'java.text.CharacterIterator'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    canDisplayUpTo(var0: java_text_CharacterIterator | JavaInterfaceProxy<java_text_CharacterIteratorInterface> | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'java.text.CharacterIterator'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    canDisplayUpToSync(var0: java_text_CharacterIterator | JavaInterfaceProxy<java_text_CharacterIteratorInterface> | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int'
     */
    canDisplayUpTo(var0: string | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int'
     */
    canDisplayUpToSync(var0: string | null): number;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    canDisplayUpTo(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    canDisplayUpToSync(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): number;
    /**
     * @return original return type: 'boolean'
     */
    hasUniformLineMetrics(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasUniformLineMetricsSync(): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.awt.font.FontRenderContext'
     * @return original return type: 'java.awt.font.LineMetrics'
     */
    getLineMetrics(var0: string | null, var1: java_awt_font_FontRenderContext | null): Promise<java_awt_font_LineMetrics | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.awt.font.FontRenderContext'
     * @return original return type: 'java.awt.font.LineMetrics'
     */
    getLineMetricsSync(var0: string | null, var1: java_awt_font_FontRenderContext | null): java_awt_font_LineMetrics | null;
    /**
     * @param var0 original type: 'java.text.CharacterIterator'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'java.awt.font.FontRenderContext'
     * @return original return type: 'java.awt.font.LineMetrics'
     */
    getLineMetrics(var0: java_text_CharacterIterator | JavaInterfaceProxy<java_text_CharacterIteratorInterface> | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_awt_font_FontRenderContext | null): Promise<java_awt_font_LineMetrics | null>;
    /**
     * @param var0 original type: 'java.text.CharacterIterator'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'java.awt.font.FontRenderContext'
     * @return original return type: 'java.awt.font.LineMetrics'
     */
    getLineMetricsSync(var0: java_text_CharacterIterator | JavaInterfaceProxy<java_text_CharacterIteratorInterface> | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_awt_font_FontRenderContext | null): java_awt_font_LineMetrics | null;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'java.awt.font.FontRenderContext'
     * @return original return type: 'java.awt.font.LineMetrics'
     */
    getLineMetrics(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_awt_font_FontRenderContext | null): Promise<java_awt_font_LineMetrics | null>;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'java.awt.font.FontRenderContext'
     * @return original return type: 'java.awt.font.LineMetrics'
     */
    getLineMetricsSync(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_awt_font_FontRenderContext | null): java_awt_font_LineMetrics | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'java.awt.font.FontRenderContext'
     * @return original return type: 'java.awt.font.LineMetrics'
     */
    getLineMetrics(var0: string | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_awt_font_FontRenderContext | null): Promise<java_awt_font_LineMetrics | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'java.awt.font.FontRenderContext'
     * @return original return type: 'java.awt.font.LineMetrics'
     */
    getLineMetricsSync(var0: string | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_awt_font_FontRenderContext | null): java_awt_font_LineMetrics | null;
    /**
     * @param var0 original type: 'java.awt.font.FontRenderContext'
     * @return original return type: 'java.awt.geom.Rectangle2D'
     */
    getMaxCharBounds(var0: java_awt_font_FontRenderContext | null): Promise<java_awt_geom_Rectangle2D | null>;
    /**
     * @param var0 original type: 'java.awt.font.FontRenderContext'
     * @return original return type: 'java.awt.geom.Rectangle2D'
     */
    getMaxCharBoundsSync(var0: java_awt_font_FontRenderContext | null): java_awt_geom_Rectangle2D | null;
    /**
     * @param var0 original type: 'java.awt.font.FontRenderContext'
     * @param var1 original type: 'java.text.CharacterIterator'
     * @return original return type: 'java.awt.font.GlyphVector'
     */
    createGlyphVector(var0: java_awt_font_FontRenderContext | null, var1: java_text_CharacterIterator | JavaInterfaceProxy<java_text_CharacterIteratorInterface> | null): Promise<java_awt_font_GlyphVector | null>;
    /**
     * @param var0 original type: 'java.awt.font.FontRenderContext'
     * @param var1 original type: 'java.text.CharacterIterator'
     * @return original return type: 'java.awt.font.GlyphVector'
     */
    createGlyphVectorSync(var0: java_awt_font_FontRenderContext | null, var1: java_text_CharacterIterator | JavaInterfaceProxy<java_text_CharacterIteratorInterface> | null): java_awt_font_GlyphVector | null;
    /**
     * @param var0 original type: 'java.awt.font.FontRenderContext'
     * @param var1 original type: 'char[]'
     * @return original return type: 'java.awt.font.GlyphVector'
     */
    createGlyphVector(var0: java_awt_font_FontRenderContext | null, var1: (string | null)[] | null): Promise<java_awt_font_GlyphVector | null>;
    /**
     * @param var0 original type: 'java.awt.font.FontRenderContext'
     * @param var1 original type: 'char[]'
     * @return original return type: 'java.awt.font.GlyphVector'
     */
    createGlyphVectorSync(var0: java_awt_font_FontRenderContext | null, var1: (string | null)[] | null): java_awt_font_GlyphVector | null;
    /**
     * @param var0 original type: 'java.awt.font.FontRenderContext'
     * @param var1 original type: 'int[]'
     * @return original return type: 'java.awt.font.GlyphVector'
     */
    createGlyphVector(var0: java_awt_font_FontRenderContext | null, var1: (java_lang_Integer | number)[] | null): Promise<java_awt_font_GlyphVector | null>;
    /**
     * @param var0 original type: 'java.awt.font.FontRenderContext'
     * @param var1 original type: 'int[]'
     * @return original return type: 'java.awt.font.GlyphVector'
     */
    createGlyphVectorSync(var0: java_awt_font_FontRenderContext | null, var1: (java_lang_Integer | number)[] | null): java_awt_font_GlyphVector | null;
    /**
     * @param var0 original type: 'java.awt.font.FontRenderContext'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.awt.font.GlyphVector'
     */
    createGlyphVector(var0: java_awt_font_FontRenderContext | null, var1: string | null): Promise<java_awt_font_GlyphVector | null>;
    /**
     * @param var0 original type: 'java.awt.font.FontRenderContext'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.awt.font.GlyphVector'
     */
    createGlyphVectorSync(var0: java_awt_font_FontRenderContext | null, var1: string | null): java_awt_font_GlyphVector | null;
    /**
     * @param var0 original type: 'java.awt.font.FontRenderContext'
     * @param var1 original type: 'char[]'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @return original return type: 'java.awt.font.GlyphVector'
     */
    layoutGlyphVector(var0: java_awt_font_FontRenderContext | null, var1: (string | null)[] | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Integer | number): Promise<java_awt_font_GlyphVector | null>;
    /**
     * @param var0 original type: 'java.awt.font.FontRenderContext'
     * @param var1 original type: 'char[]'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @return original return type: 'java.awt.font.GlyphVector'
     */
    layoutGlyphVectorSync(var0: java_awt_font_FontRenderContext | null, var1: (string | null)[] | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Integer | number): java_awt_font_GlyphVector | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'java.util.Map'
     * @return original return type: 'java.awt.Font'
     */
    static newInstance(var0: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null): Promise<Font>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.awt.Font'
     */
    static newInstance(var0: string | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<Font>;
    /**
     * @param var0 original type: 'java.util.Map'
     */
    constructor(var0: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null);
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     */
    constructor(var0: string | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number);
}
declare const Font_base: typeof FontClass;
/**
 * Class java.awt.Font.
 *
 * This actually imports the java class for further use.
 * The class {@link FontClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Font extends Font_base {
}
export default Font;
//# sourceMappingURL=Font.d.ts.map