import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Locale as java_util_Locale } from "./../../util/Locale";
import { Component as java_awt_Component } from "./../Component";
import { AWTEvent as java_awt_AWTEvent } from "./../AWTEvent";
import { Character$Subset as java_lang_Character$Subset } from "./../../lang/Character$Subset";
import { Boolean as java_lang_Boolean } from "./../../lang/Boolean";
import { Long as java_lang_Long } from "./../../lang/Long";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
import { Class as java_lang_Class } from "./../../lang/Class";
/**
 * This class just defines types, you should import {@link InputContext} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class InputContextClass extends JavaClass {
    /**
     * @return original return type: 'java.awt.im.InputContext'
     */
    static getInstance(): Promise<InputContext | null>;
    /**
     * @return original return type: 'java.awt.im.InputContext'
     */
    static getInstanceSync(): InputContext | null;
    /**
     * @return original return type: 'java.util.Locale'
     */
    getLocale(): Promise<java_util_Locale | null>;
    /**
     * @return original return type: 'java.util.Locale'
     */
    getLocaleSync(): java_util_Locale | null;
    /**
     * @return original return type: 'void'
     */
    dispose(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    disposeSync(): void;
    /**
     * @param var0 original type: 'java.awt.Component'
     * @return original return type: 'void'
     */
    removeNotify(var0: java_awt_Component | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.Component'
     * @return original return type: 'void'
     */
    removeNotifySync(var0: java_awt_Component | null): void;
    /**
     * @param var0 original type: 'java.awt.AWTEvent'
     * @return original return type: 'void'
     */
    dispatchEvent(var0: java_awt_AWTEvent | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.AWTEvent'
     * @return original return type: 'void'
     */
    dispatchEventSync(var0: java_awt_AWTEvent | null): void;
    /**
     * @return original return type: 'void'
     */
    endComposition(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    endCompositionSync(): void;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'boolean'
     */
    selectInputMethod(var0: java_util_Locale | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'boolean'
     */
    selectInputMethodSync(var0: java_util_Locale | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Character$Subset[]'
     * @return original return type: 'void'
     */
    setCharacterSubsets(var0: (java_lang_Character$Subset | null)[] | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Character$Subset[]'
     * @return original return type: 'void'
     */
    setCharacterSubsetsSync(var0: (java_lang_Character$Subset | null)[] | null): void;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setCompositionEnabled(var0: java_lang_Boolean | boolean): Promise<void>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setCompositionEnabledSync(var0: java_lang_Boolean | boolean): void;
    /**
     * @return original return type: 'boolean'
     */
    isCompositionEnabled(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isCompositionEnabledSync(): boolean;
    /**
     * @return original return type: 'void'
     */
    reconvert(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    reconvertSync(): void;
    /**
     * @return original return type: 'java.lang.Object'
     */
    getInputMethodControlObject(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    getInputMethodControlObjectSync(): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const InputContext_base: typeof InputContextClass;
/**
 * Class java.awt.im.InputContext.
 *
 * This actually imports the java class for further use.
 * The class {@link InputContextClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class InputContext extends InputContext_base {
}
export default InputContext;
//# sourceMappingURL=InputContext.d.ts.map