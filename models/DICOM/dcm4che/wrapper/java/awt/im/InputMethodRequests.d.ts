import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Rectangle as java_awt_Rectangle } from "./../Rectangle";
import { TextHitInfo as java_awt_font_TextHitInfo } from "./../font/TextHitInfo";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
import { AttributedCharacterIterator as java_text_AttributedCharacterIterator } from "./../../text/AttributedCharacterIterator";
import { AttributedCharacterIterator$Attribute as java_text_AttributedCharacterIterator$Attribute } from "./../../text/AttributedCharacterIterator$Attribute";
/**
 * This class just defines types, you should import {@link InputMethodRequests} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class InputMethodRequestsClass extends JavaClass {
    /**
     * @param var0 original type: 'java.awt.font.TextHitInfo'
     * @return original return type: 'java.awt.Rectangle'
     */
    getTextLocation(var0: java_awt_font_TextHitInfo | null): Promise<java_awt_Rectangle | null>;
    /**
     * @param var0 original type: 'java.awt.font.TextHitInfo'
     * @return original return type: 'java.awt.Rectangle'
     */
    getTextLocationSync(var0: java_awt_font_TextHitInfo | null): java_awt_Rectangle | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.awt.font.TextHitInfo'
     */
    getLocationOffset(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<java_awt_font_TextHitInfo | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.awt.font.TextHitInfo'
     */
    getLocationOffsetSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): java_awt_font_TextHitInfo | null;
    /**
     * @return original return type: 'int'
     */
    getInsertPositionOffset(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getInsertPositionOffsetSync(): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.text.AttributedCharacterIterator$Attribute[]'
     * @return original return type: 'java.text.AttributedCharacterIterator'
     */
    getCommittedText(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: (java_text_AttributedCharacterIterator$Attribute | null)[] | null): Promise<java_text_AttributedCharacterIterator | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.text.AttributedCharacterIterator$Attribute[]'
     * @return original return type: 'java.text.AttributedCharacterIterator'
     */
    getCommittedTextSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: (java_text_AttributedCharacterIterator$Attribute | null)[] | null): java_text_AttributedCharacterIterator | null;
    /**
     * @return original return type: 'int'
     */
    getCommittedTextLength(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getCommittedTextLengthSync(): number;
    /**
     * @param var0 original type: 'java.text.AttributedCharacterIterator$Attribute[]'
     * @return original return type: 'java.text.AttributedCharacterIterator'
     */
    cancelLatestCommittedText(var0: (java_text_AttributedCharacterIterator$Attribute | null)[] | null): Promise<java_text_AttributedCharacterIterator | null>;
    /**
     * @param var0 original type: 'java.text.AttributedCharacterIterator$Attribute[]'
     * @return original return type: 'java.text.AttributedCharacterIterator'
     */
    cancelLatestCommittedTextSync(var0: (java_text_AttributedCharacterIterator$Attribute | null)[] | null): java_text_AttributedCharacterIterator | null;
    /**
     * @param var0 original type: 'java.text.AttributedCharacterIterator$Attribute[]'
     * @return original return type: 'java.text.AttributedCharacterIterator'
     */
    getSelectedText(var0: (java_text_AttributedCharacterIterator$Attribute | null)[] | null): Promise<java_text_AttributedCharacterIterator | null>;
    /**
     * @param var0 original type: 'java.text.AttributedCharacterIterator$Attribute[]'
     * @return original return type: 'java.text.AttributedCharacterIterator'
     */
    getSelectedTextSync(var0: (java_text_AttributedCharacterIterator$Attribute | null)[] | null): java_text_AttributedCharacterIterator | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createInputMethodRequestsProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface InputMethodRequestsInterface {
    /**
     * @param var0 original type: 'java.awt.font.TextHitInfo'
     * @return original return type: 'java.awt.Rectangle'
     */
    getTextLocation(var0: java_awt_font_TextHitInfo | null): java_awt_Rectangle | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.awt.font.TextHitInfo'
     */
    getLocationOffset(var0: java_lang_Integer | number, var1: java_lang_Integer | number): java_awt_font_TextHitInfo | null;
    /**
     * @return original return type: 'int'
     */
    getInsertPositionOffset(): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.text.AttributedCharacterIterator$Attribute[]'
     * @return original return type: 'java.text.AttributedCharacterIterator'
     */
    getCommittedText(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: (java_text_AttributedCharacterIterator$Attribute | null)[] | null): java_text_AttributedCharacterIterator | null;
    /**
     * @return original return type: 'int'
     */
    getCommittedTextLength(): number;
    /**
     * @param var0 original type: 'java.text.AttributedCharacterIterator$Attribute[]'
     * @return original return type: 'java.text.AttributedCharacterIterator'
     */
    cancelLatestCommittedText(var0: (java_text_AttributedCharacterIterator$Attribute | null)[] | null): java_text_AttributedCharacterIterator | null;
    /**
     * @param var0 original type: 'java.text.AttributedCharacterIterator$Attribute[]'
     * @return original return type: 'java.text.AttributedCharacterIterator'
     */
    getSelectedText(var0: (java_text_AttributedCharacterIterator$Attribute | null)[] | null): java_text_AttributedCharacterIterator | null;
}
/**
 * Create a proxy for the {@link InputMethodRequests} interface.
 * All required methods in {@link InputMethodRequestsInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createInputMethodRequestsProxy(methods: InputMethodRequestsInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<InputMethodRequestsInterface>;
declare const InputMethodRequests_base: typeof InputMethodRequestsClass;
/**
 * Class java.awt.im.InputMethodRequests.
 *
 * This actually imports the java class for further use.
 * The class {@link InputMethodRequestsClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class InputMethodRequests extends InputMethodRequests_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default InputMethodRequests;
//# sourceMappingURL=InputMethodRequests.d.ts.map