import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Integer as java_lang_Integer } from "./../lang/Integer";
import { MathContext as java_math_MathContext } from "./MathContext";
import { Double as java_lang_Double } from "./../lang/Double";
import { Long as java_lang_Long } from "./../lang/Long";
import { RoundingMode as java_math_RoundingMode } from "./RoundingMode";
import { BigInteger as java_math_BigInteger } from "./BigInteger";
import { Class as java_lang_Class } from "./../lang/Class";
/**
 * This class just defines types, you should import {@link BigDecimal} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BigDecimalClass extends JavaClass {
    /**
     * Original type: 'java.math.BigDecimal'
     */
    static readonly ZERO: BigDecimalClass | null;
    /**
     * Original type: 'java.math.BigDecimal'
     */
    static readonly ONE: BigDecimalClass | null;
    /**
     * Original type: 'java.math.BigDecimal'
     */
    static readonly TEN: BigDecimalClass | null;
    /**
     * Original type: 'int'
     */
    static readonly ROUND_UP: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly ROUND_DOWN: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly ROUND_CEILING: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly ROUND_FLOOR: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly ROUND_HALF_UP: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly ROUND_HALF_DOWN: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly ROUND_HALF_EVEN: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly ROUND_UNNECESSARY: java_lang_Integer | number;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @param var1 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    add(var0: BigDecimalClass | null, var1: java_math_MathContext | null): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @param var1 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    addSync(var0: BigDecimalClass | null, var1: java_math_MathContext | null): BigDecimal | null;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @return original return type: 'java.math.BigDecimal'
     */
    add(var0: BigDecimalClass | null): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @return original return type: 'java.math.BigDecimal'
     */
    addSync(var0: BigDecimalClass | null): BigDecimal | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.math.BigDecimal'
     */
    abs(): Promise<BigDecimal | null>;
    /**
     * @return original return type: 'java.math.BigDecimal'
     */
    absSync(): BigDecimal | null;
    /**
     * @param var0 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    abs(var0: java_math_MathContext | null): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    absSync(var0: java_math_MathContext | null): BigDecimal | null;
    /**
     * @param var0 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    sqrt(var0: java_math_MathContext | null): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    sqrtSync(var0: java_math_MathContext | null): BigDecimal | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    pow(var0: java_lang_Integer | number, var1: java_math_MathContext | null): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    powSync(var0: java_lang_Integer | number, var1: java_math_MathContext | null): BigDecimal | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.BigDecimal'
     */
    pow(var0: java_lang_Integer | number): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.BigDecimal'
     */
    powSync(var0: java_lang_Integer | number): BigDecimal | null;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @return original return type: 'java.math.BigDecimal'
     */
    min(var0: BigDecimalClass | null): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @return original return type: 'java.math.BigDecimal'
     */
    minSync(var0: BigDecimalClass | null): BigDecimal | null;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @return original return type: 'java.math.BigDecimal'
     */
    max(var0: BigDecimalClass | null): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @return original return type: 'java.math.BigDecimal'
     */
    maxSync(var0: BigDecimalClass | null): BigDecimal | null;
    /**
     * @return original return type: 'int'
     */
    signum(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    signumSync(): number;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @return original return type: 'int'
     */
    compareTo(var0: BigDecimalClass | null): Promise<number>;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @return original return type: 'int'
     */
    compareToSync(var0: BigDecimalClass | null): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareTo(var0: BasicOrJavaType | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareToSync(var0: BasicOrJavaType | null): number;
    /**
     * @return original return type: 'int'
     */
    intValue(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    intValueSync(): number;
    /**
     * @return original return type: 'long'
     */
    longValue(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    longValueSync(): number;
    /**
     * @return original return type: 'float'
     */
    floatValue(): Promise<number>;
    /**
     * @return original return type: 'float'
     */
    floatValueSync(): number;
    /**
     * @return original return type: 'double'
     */
    doubleValue(): Promise<number>;
    /**
     * @return original return type: 'double'
     */
    doubleValueSync(): number;
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'java.math.BigDecimal'
     */
    static valueOf(var0: java_lang_Double | number): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'java.math.BigDecimal'
     */
    static valueOfSync(var0: java_lang_Double | number): BigDecimal | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.math.BigDecimal'
     */
    static valueOf(var0: java_lang_Long | bigint | number): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.math.BigDecimal'
     */
    static valueOfSync(var0: java_lang_Long | bigint | number): BigDecimal | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'java.math.BigDecimal'
     */
    static valueOf(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'java.math.BigDecimal'
     */
    static valueOfSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): BigDecimal | null;
    /**
     * @return original return type: 'int'
     */
    scale(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    scaleSync(): number;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @param var1 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    multiply(var0: BigDecimalClass | null, var1: java_math_MathContext | null): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @param var1 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    multiplySync(var0: BigDecimalClass | null, var1: java_math_MathContext | null): BigDecimal | null;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @return original return type: 'java.math.BigDecimal'
     */
    multiply(var0: BigDecimalClass | null): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @return original return type: 'java.math.BigDecimal'
     */
    multiplySync(var0: BigDecimalClass | null): BigDecimal | null;
    /**
     * @param var0 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    round(var0: java_math_MathContext | null): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    roundSync(var0: java_math_MathContext | null): BigDecimal | null;
    /**
     * @return original return type: 'java.math.BigDecimal'
     */
    ulp(): Promise<BigDecimal | null>;
    /**
     * @return original return type: 'java.math.BigDecimal'
     */
    ulpSync(): BigDecimal | null;
    /**
     * @param var0 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    negate(var0: java_math_MathContext | null): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    negateSync(var0: java_math_MathContext | null): BigDecimal | null;
    /**
     * @return original return type: 'java.math.BigDecimal'
     */
    negate(): Promise<BigDecimal | null>;
    /**
     * @return original return type: 'java.math.BigDecimal'
     */
    negateSync(): BigDecimal | null;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @param var1 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    remainder(var0: BigDecimalClass | null, var1: java_math_MathContext | null): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @param var1 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    remainderSync(var0: BigDecimalClass | null, var1: java_math_MathContext | null): BigDecimal | null;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @return original return type: 'java.math.BigDecimal'
     */
    remainder(var0: BigDecimalClass | null): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @return original return type: 'java.math.BigDecimal'
     */
    remainderSync(var0: BigDecimalClass | null): BigDecimal | null;
    /**
     * @return original return type: 'int'
     */
    precision(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    precisionSync(): number;
    /**
     * @param var0 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    plus(var0: java_math_MathContext | null): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    plusSync(var0: java_math_MathContext | null): BigDecimal | null;
    /**
     * @return original return type: 'java.math.BigDecimal'
     */
    plus(): Promise<BigDecimal | null>;
    /**
     * @return original return type: 'java.math.BigDecimal'
     */
    plusSync(): BigDecimal | null;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @return original return type: 'java.math.BigDecimal'
     */
    divide(var0: BigDecimalClass | null): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @return original return type: 'java.math.BigDecimal'
     */
    divideSync(var0: BigDecimalClass | null): BigDecimal | null;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @param var1 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    divide(var0: BigDecimalClass | null, var1: java_math_MathContext | null): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @param var1 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    divideSync(var0: BigDecimalClass | null, var1: java_math_MathContext | null): BigDecimal | null;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @param var1 original type: 'int'
     * @return original return type: 'java.math.BigDecimal'
     */
    divide(var0: BigDecimalClass | null, var1: java_lang_Integer | number): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @param var1 original type: 'int'
     * @return original return type: 'java.math.BigDecimal'
     */
    divideSync(var0: BigDecimalClass | null, var1: java_lang_Integer | number): BigDecimal | null;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @param var1 original type: 'java.math.RoundingMode'
     * @return original return type: 'java.math.BigDecimal'
     */
    divide(var0: BigDecimalClass | null, var1: java_math_RoundingMode | null): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @param var1 original type: 'java.math.RoundingMode'
     * @return original return type: 'java.math.BigDecimal'
     */
    divideSync(var0: BigDecimalClass | null, var1: java_math_RoundingMode | null): BigDecimal | null;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.math.BigDecimal'
     */
    divide(var0: BigDecimalClass | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.math.BigDecimal'
     */
    divideSync(var0: BigDecimalClass | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): BigDecimal | null;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.math.RoundingMode'
     * @return original return type: 'java.math.BigDecimal'
     */
    divide(var0: BigDecimalClass | null, var1: java_lang_Integer | number, var2: java_math_RoundingMode | null): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.math.RoundingMode'
     * @return original return type: 'java.math.BigDecimal'
     */
    divideSync(var0: BigDecimalClass | null, var1: java_lang_Integer | number, var2: java_math_RoundingMode | null): BigDecimal | null;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @return original return type: 'java.math.BigDecimal'
     */
    divideToIntegralValue(var0: BigDecimalClass | null): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @return original return type: 'java.math.BigDecimal'
     */
    divideToIntegralValueSync(var0: BigDecimalClass | null): BigDecimal | null;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @param var1 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    divideToIntegralValue(var0: BigDecimalClass | null, var1: java_math_MathContext | null): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @param var1 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    divideToIntegralValueSync(var0: BigDecimalClass | null, var1: java_math_MathContext | null): BigDecimal | null;
    /**
     * @return original return type: 'long'
     */
    longValueExact(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    longValueExactSync(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.BigDecimal'
     */
    movePointRight(var0: java_lang_Integer | number): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.BigDecimal'
     */
    movePointRightSync(var0: java_lang_Integer | number): BigDecimal | null;
    /**
     * @return original return type: 'java.math.BigInteger'
     */
    toBigIntegerExact(): Promise<java_math_BigInteger | null>;
    /**
     * @return original return type: 'java.math.BigInteger'
     */
    toBigIntegerExactSync(): java_math_BigInteger | null;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @param var1 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal[]'
     */
    divideAndRemainder(var0: BigDecimalClass | null, var1: java_math_MathContext | null): Promise<(BigDecimal | null)[] | null>;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @param var1 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal[]'
     */
    divideAndRemainderSync(var0: BigDecimalClass | null, var1: java_math_MathContext | null): (BigDecimal | null)[] | null;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @return original return type: 'java.math.BigDecimal[]'
     */
    divideAndRemainder(var0: BigDecimalClass | null): Promise<(BigDecimal | null)[] | null>;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @return original return type: 'java.math.BigDecimal[]'
     */
    divideAndRemainderSync(var0: BigDecimalClass | null): (BigDecimal | null)[] | null;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @return original return type: 'java.math.BigDecimal'
     */
    subtract(var0: BigDecimalClass | null): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @return original return type: 'java.math.BigDecimal'
     */
    subtractSync(var0: BigDecimalClass | null): BigDecimal | null;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @param var1 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    subtract(var0: BigDecimalClass | null, var1: java_math_MathContext | null): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @param var1 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    subtractSync(var0: BigDecimalClass | null, var1: java_math_MathContext | null): BigDecimal | null;
    /**
     * @return original return type: 'java.math.BigInteger'
     */
    toBigInteger(): Promise<java_math_BigInteger | null>;
    /**
     * @return original return type: 'java.math.BigInteger'
     */
    toBigIntegerSync(): java_math_BigInteger | null;
    /**
     * @return original return type: 'int'
     */
    intValueExact(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    intValueExactSync(): number;
    /**
     * @return original return type: 'short'
     */
    shortValueExact(): Promise<number>;
    /**
     * @return original return type: 'short'
     */
    shortValueExactSync(): number;
    /**
     * @return original return type: 'byte'
     */
    byteValueExact(): Promise<number>;
    /**
     * @return original return type: 'byte'
     */
    byteValueExactSync(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.BigDecimal'
     */
    setScale(var0: java_lang_Integer | number): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.BigDecimal'
     */
    setScaleSync(var0: java_lang_Integer | number): BigDecimal | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.math.RoundingMode'
     * @return original return type: 'java.math.BigDecimal'
     */
    setScale(var0: java_lang_Integer | number, var1: java_math_RoundingMode | null): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.math.RoundingMode'
     * @return original return type: 'java.math.BigDecimal'
     */
    setScaleSync(var0: java_lang_Integer | number, var1: java_math_RoundingMode | null): BigDecimal | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.math.BigDecimal'
     */
    setScale(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.math.BigDecimal'
     */
    setScaleSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): BigDecimal | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    toPlainString(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toPlainStringSync(): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.BigDecimal'
     */
    movePointLeft(var0: java_lang_Integer | number): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.BigDecimal'
     */
    movePointLeftSync(var0: java_lang_Integer | number): BigDecimal | null;
    /**
     * @return original return type: 'java.math.BigDecimal'
     */
    stripTrailingZeros(): Promise<BigDecimal | null>;
    /**
     * @return original return type: 'java.math.BigDecimal'
     */
    stripTrailingZerosSync(): BigDecimal | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.BigDecimal'
     */
    scaleByPowerOfTen(var0: java_lang_Integer | number): Promise<BigDecimal | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.BigDecimal'
     */
    scaleByPowerOfTenSync(var0: java_lang_Integer | number): BigDecimal | null;
    /**
     * @return original return type: 'java.math.BigInteger'
     */
    unscaledValue(): Promise<java_math_BigInteger | null>;
    /**
     * @return original return type: 'java.math.BigInteger'
     */
    unscaledValueSync(): java_math_BigInteger | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    toEngineeringString(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toEngineeringStringSync(): string | null;
    /**
     * @return original return type: 'byte'
     */
    byteValue(): Promise<number>;
    /**
     * @return original return type: 'byte'
     */
    byteValueSync(): number;
    /**
     * @return original return type: 'short'
     */
    shortValue(): Promise<number>;
    /**
     * @return original return type: 'short'
     */
    shortValueSync(): number;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @param var1 original type: 'int'
     * @return original return type: 'java.math.BigDecimal'
     */
    static newInstanceAsync(var0: java_math_BigInteger | null, var1: java_lang_Integer | number): Promise<BigDecimal>;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @param var1 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    static newInstanceAsync(var0: java_math_BigInteger | null, var1: java_math_MathContext | null): Promise<BigDecimal>;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigDecimal'
     */
    static newInstanceAsync(var0: java_math_BigInteger | null): Promise<BigDecimal>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    static newInstanceAsync(var0: java_lang_Double | number, var1: java_math_MathContext | null): Promise<BigDecimal>;
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'java.math.BigDecimal'
     */
    static newInstanceAsync(var0: java_lang_Double | number): Promise<BigDecimal>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.math.BigDecimal'
     */
    static newInstanceAsync(var0: java_lang_Long | bigint | number): Promise<BigDecimal>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    static newInstanceAsync(var0: java_lang_Integer | number, var1: java_math_MathContext | null): Promise<BigDecimal>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.BigDecimal'
     */
    static newInstanceAsync(var0: java_lang_Integer | number): Promise<BigDecimal>;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    static newInstanceAsync(var0: java_math_BigInteger | null, var1: java_lang_Integer | number, var2: java_math_MathContext | null): Promise<BigDecimal>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    static newInstanceAsync(var0: java_lang_Long | bigint | number, var1: java_math_MathContext | null): Promise<BigDecimal>;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    static newInstanceAsync(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_math_MathContext | null): Promise<BigDecimal>;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.math.BigDecimal'
     */
    static newInstanceAsync(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<BigDecimal>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    static newInstanceAsync(var0: string | null, var1: java_math_MathContext | null): Promise<BigDecimal>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.math.BigDecimal'
     */
    static newInstanceAsync(var0: string | null): Promise<BigDecimal>;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'java.math.MathContext'
     * @return original return type: 'java.math.BigDecimal'
     */
    static newInstanceAsync(var0: (string | null)[] | null, var1: java_math_MathContext | null): Promise<BigDecimal>;
    /**
     * @param var0 original type: 'char[]'
     * @return original return type: 'java.math.BigDecimal'
     */
    static newInstanceAsync(var0: (string | null)[] | null): Promise<BigDecimal>;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @param var1 original type: 'int'
     */
    constructor(var0: java_math_BigInteger | null, var1: java_lang_Integer | number);
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @param var1 original type: 'java.math.MathContext'
     */
    constructor(var0: java_math_BigInteger | null, var1: java_math_MathContext | null);
    /**
     * @param var0 original type: 'java.math.BigInteger'
     */
    constructor(var0: java_math_BigInteger | null);
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'java.math.MathContext'
     */
    constructor(var0: java_lang_Double | number, var1: java_math_MathContext | null);
    /**
     * @param var0 original type: 'double'
     */
    constructor(var0: java_lang_Double | number);
    /**
     * @param var0 original type: 'long'
     */
    constructor(var0: java_lang_Long | bigint | number);
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.math.MathContext'
     */
    constructor(var0: java_lang_Integer | number, var1: java_math_MathContext | null);
    /**
     * @param var0 original type: 'int'
     */
    constructor(var0: java_lang_Integer | number);
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.math.MathContext'
     */
    constructor(var0: java_math_BigInteger | null, var1: java_lang_Integer | number, var2: java_math_MathContext | null);
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.math.MathContext'
     */
    constructor(var0: java_lang_Long | bigint | number, var1: java_math_MathContext | null);
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'java.math.MathContext'
     */
    constructor(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_math_MathContext | null);
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     */
    constructor(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number);
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.math.MathContext'
     */
    constructor(var0: string | null, var1: java_math_MathContext | null);
    /**
     * @param var0 original type: 'java.lang.String'
     */
    constructor(var0: string | null);
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'java.math.MathContext'
     */
    constructor(var0: (string | null)[] | null, var1: java_math_MathContext | null);
    /**
     * @param var0 original type: 'char[]'
     */
    constructor(var0: (string | null)[] | null);
}
declare const BigDecimal_base: typeof BigDecimalClass;
/**
 * Class java.math.BigDecimal.
 *
 * This actually imports the java class for further use.
 * The class {@link BigDecimalClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BigDecimal extends BigDecimal_base {
}
export default BigDecimal;
//# sourceMappingURL=BigDecimal.d.ts.map