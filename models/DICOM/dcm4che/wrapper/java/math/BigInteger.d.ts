/// <reference types="node" />
import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Integer as java_lang_Integer } from "./../lang/Integer";
import { Long as java_lang_Long } from "./../lang/Long";
import { Random as java_util_Random } from "./../util/Random";
import { Class as java_lang_Class } from "./../lang/Class";
/**
 * This class just defines types, you should import {@link BigInteger} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BigIntegerClass extends JavaClass {
    /**
     * Original type: 'java.math.BigInteger'
     */
    static readonly ZERO: BigIntegerClass | null;
    /**
     * Original type: 'java.math.BigInteger'
     */
    static readonly ONE: BigIntegerClass | null;
    /**
     * Original type: 'java.math.BigInteger'
     */
    static readonly TWO: BigIntegerClass | null;
    /**
     * Original type: 'java.math.BigInteger'
     */
    static readonly TEN: BigIntegerClass | null;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    add(var0: BigIntegerClass | null): Promise<BigInteger | null>;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    addSync(var0: BigIntegerClass | null): BigInteger | null;
    /**
     * @return original return type: 'int'
     */
    bitCount(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    bitCountSync(): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    toString(var0: java_lang_Integer | number): Promise<string>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    toStringSync(var0: java_lang_Integer | number): string;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.math.BigInteger'
     */
    abs(): Promise<BigInteger | null>;
    /**
     * @return original return type: 'java.math.BigInteger'
     */
    absSync(): BigInteger | null;
    /**
     * @return original return type: 'java.math.BigInteger'
     */
    sqrt(): Promise<BigInteger | null>;
    /**
     * @return original return type: 'java.math.BigInteger'
     */
    sqrtSync(): BigInteger | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.BigInteger'
     */
    pow(var0: java_lang_Integer | number): Promise<BigInteger | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.BigInteger'
     */
    powSync(var0: java_lang_Integer | number): BigInteger | null;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    min(var0: BigIntegerClass | null): Promise<BigInteger | null>;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    minSync(var0: BigIntegerClass | null): BigInteger | null;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    max(var0: BigIntegerClass | null): Promise<BigInteger | null>;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    maxSync(var0: BigIntegerClass | null): BigInteger | null;
    /**
     * @return original return type: 'int'
     */
    signum(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    signumSync(): number;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'int'
     */
    compareTo(var0: BigIntegerClass | null): Promise<number>;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'int'
     */
    compareToSync(var0: BigIntegerClass | null): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareTo(var0: BasicOrJavaType | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareToSync(var0: BasicOrJavaType | null): number;
    /**
     * @return original return type: 'int'
     */
    intValue(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    intValueSync(): number;
    /**
     * @return original return type: 'long'
     */
    longValue(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    longValueSync(): number;
    /**
     * @return original return type: 'float'
     */
    floatValue(): Promise<number>;
    /**
     * @return original return type: 'float'
     */
    floatValueSync(): number;
    /**
     * @return original return type: 'double'
     */
    doubleValue(): Promise<number>;
    /**
     * @return original return type: 'double'
     */
    doubleValueSync(): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.math.BigInteger'
     */
    static valueOf(var0: java_lang_Long | bigint | number): Promise<BigInteger | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.math.BigInteger'
     */
    static valueOfSync(var0: java_lang_Long | bigint | number): BigInteger | null;
    /**
     * @return original return type: 'byte[]'
     */
    toByteArray(): Promise<Buffer | null>;
    /**
     * @return original return type: 'byte[]'
     */
    toByteArraySync(): Buffer | null;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    mod(var0: BigIntegerClass | null): Promise<BigInteger | null>;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    modSync(var0: BigIntegerClass | null): BigInteger | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.BigInteger'
     */
    setBit(var0: java_lang_Integer | number): Promise<BigInteger | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.BigInteger'
     */
    setBitSync(var0: java_lang_Integer | number): BigInteger | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.BigInteger'
     */
    shiftLeft(var0: java_lang_Integer | number): Promise<BigInteger | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.BigInteger'
     */
    shiftLeftSync(var0: java_lang_Integer | number): BigInteger | null;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    multiply(var0: BigIntegerClass | null): Promise<BigInteger | null>;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    multiplySync(var0: BigIntegerClass | null): BigInteger | null;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    or(var0: BigIntegerClass | null): Promise<BigInteger | null>;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    orSync(var0: BigIntegerClass | null): BigInteger | null;
    /**
     * @return original return type: 'java.math.BigInteger'
     */
    negate(): Promise<BigInteger | null>;
    /**
     * @return original return type: 'java.math.BigInteger'
     */
    negateSync(): BigInteger | null;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    and(var0: BigIntegerClass | null): Promise<BigInteger | null>;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    andSync(var0: BigIntegerClass | null): BigInteger | null;
    /**
     * @return original return type: 'java.math.BigInteger'
     */
    not(): Promise<BigInteger | null>;
    /**
     * @return original return type: 'java.math.BigInteger'
     */
    notSync(): BigInteger | null;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    remainder(var0: BigIntegerClass | null): Promise<BigInteger | null>;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    remainderSync(var0: BigIntegerClass | null): BigInteger | null;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    divide(var0: BigIntegerClass | null): Promise<BigInteger | null>;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    divideSync(var0: BigIntegerClass | null): BigInteger | null;
    /**
     * @return original return type: 'long'
     */
    longValueExact(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    longValueExactSync(): number;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger[]'
     */
    divideAndRemainder(var0: BigIntegerClass | null): Promise<(BigInteger | null)[] | null>;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger[]'
     */
    divideAndRemainderSync(var0: BigIntegerClass | null): (BigInteger | null)[] | null;
    /**
     * @return original return type: 'int'
     */
    bitLength(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    bitLengthSync(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    testBit(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    testBitSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    subtract(var0: BigIntegerClass | null): Promise<BigInteger | null>;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    subtractSync(var0: BigIntegerClass | null): BigInteger | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.BigInteger'
     */
    shiftRight(var0: java_lang_Integer | number): Promise<BigInteger | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.BigInteger'
     */
    shiftRightSync(var0: java_lang_Integer | number): BigInteger | null;
    /**
     * @return original return type: 'int'
     */
    getLowestSetBit(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getLowestSetBitSync(): number;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @param var1 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    modPow(var0: BigIntegerClass | null, var1: BigIntegerClass | null): Promise<BigInteger | null>;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @param var1 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    modPowSync(var0: BigIntegerClass | null, var1: BigIntegerClass | null): BigInteger | null;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    modInverse(var0: BigIntegerClass | null): Promise<BigInteger | null>;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    modInverseSync(var0: BigIntegerClass | null): BigInteger | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.util.Random'
     * @return original return type: 'java.math.BigInteger'
     */
    static probablePrime(var0: java_lang_Integer | number, var1: java_util_Random | null): Promise<BigInteger | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.util.Random'
     * @return original return type: 'java.math.BigInteger'
     */
    static probablePrimeSync(var0: java_lang_Integer | number, var1: java_util_Random | null): BigInteger | null;
    /**
     * @return original return type: 'java.math.BigInteger'
     */
    nextProbablePrime(): Promise<BigInteger | null>;
    /**
     * @return original return type: 'java.math.BigInteger'
     */
    nextProbablePrimeSync(): BigInteger | null;
    /**
     * @return original return type: 'java.math.BigInteger[]'
     */
    sqrtAndRemainder(): Promise<(BigInteger | null)[] | null>;
    /**
     * @return original return type: 'java.math.BigInteger[]'
     */
    sqrtAndRemainderSync(): (BigInteger | null)[] | null;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    gcd(var0: BigIntegerClass | null): Promise<BigInteger | null>;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    gcdSync(var0: BigIntegerClass | null): BigInteger | null;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    xor(var0: BigIntegerClass | null): Promise<BigInteger | null>;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    xorSync(var0: BigIntegerClass | null): BigInteger | null;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    andNot(var0: BigIntegerClass | null): Promise<BigInteger | null>;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'java.math.BigInteger'
     */
    andNotSync(var0: BigIntegerClass | null): BigInteger | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.BigInteger'
     */
    clearBit(var0: java_lang_Integer | number): Promise<BigInteger | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.BigInteger'
     */
    clearBitSync(var0: java_lang_Integer | number): BigInteger | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.BigInteger'
     */
    flipBit(var0: java_lang_Integer | number): Promise<BigInteger | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.BigInteger'
     */
    flipBitSync(var0: java_lang_Integer | number): BigInteger | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    isProbablePrime(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    isProbablePrimeSync(var0: java_lang_Integer | number): boolean;
    /**
     * @return original return type: 'int'
     */
    intValueExact(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    intValueExactSync(): number;
    /**
     * @return original return type: 'short'
     */
    shortValueExact(): Promise<number>;
    /**
     * @return original return type: 'short'
     */
    shortValueExactSync(): number;
    /**
     * @return original return type: 'byte'
     */
    byteValueExact(): Promise<number>;
    /**
     * @return original return type: 'byte'
     */
    byteValueExactSync(): number;
    /**
     * @return original return type: 'byte'
     */
    byteValue(): Promise<number>;
    /**
     * @return original return type: 'byte'
     */
    byteValueSync(): number;
    /**
     * @return original return type: 'short'
     */
    shortValue(): Promise<number>;
    /**
     * @return original return type: 'short'
     */
    shortValueSync(): number;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.util.Random'
     * @return original return type: 'java.math.BigInteger'
     */
    static newInstance(var0: java_lang_Integer | number, var1: java_util_Random | null): Promise<BigInteger>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.math.BigInteger'
     */
    static newInstance(var0: string | null): Promise<BigInteger>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.util.Random'
     * @return original return type: 'java.math.BigInteger'
     */
    static newInstance(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_util_Random | null): Promise<BigInteger>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'byte[]'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'java.math.BigInteger'
     */
    static newInstance(var0: java_lang_Integer | number, var1: Buffer | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number): Promise<BigInteger>;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'java.math.BigInteger'
     */
    static newInstance(var0: Buffer | null): Promise<BigInteger>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.math.BigInteger'
     */
    static newInstance(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<BigInteger>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'java.math.BigInteger'
     */
    static newInstance(var0: string | null, var1: java_lang_Integer | number): Promise<BigInteger>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'byte[]'
     * @return original return type: 'java.math.BigInteger'
     */
    static newInstance(var0: java_lang_Integer | number, var1: Buffer | null): Promise<BigInteger>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.util.Random'
     */
    constructor(var0: java_lang_Integer | number, var1: java_util_Random | null);
    /**
     * @param var0 original type: 'java.lang.String'
     */
    constructor(var0: string | null);
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.util.Random'
     */
    constructor(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_util_Random | null);
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'byte[]'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     */
    constructor(var0: java_lang_Integer | number, var1: Buffer | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number);
    /**
     * @param var0 original type: 'byte[]'
     */
    constructor(var0: Buffer | null);
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     */
    constructor(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number);
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     */
    constructor(var0: string | null, var1: java_lang_Integer | number);
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'byte[]'
     */
    constructor(var0: java_lang_Integer | number, var1: Buffer | null);
}
declare const BigInteger_base: typeof BigIntegerClass;
/**
 * Class java.math.BigInteger.
 *
 * This actually imports the java class for further use.
 * The class {@link BigIntegerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BigInteger extends BigInteger_base {
}
export default BigInteger;
//# sourceMappingURL=BigInteger.d.ts.map