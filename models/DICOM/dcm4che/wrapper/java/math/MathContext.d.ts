import { JavaClass, BasicOrJavaType } from "java-bridge";
import { RoundingMode as java_math_RoundingMode } from "./RoundingMode";
import { Long as java_lang_Long } from "./../lang/Long";
import { Integer as java_lang_Integer } from "./../lang/Integer";
import { Class as java_lang_Class } from "./../lang/Class";
/**
 * This class just defines types, you should import {@link MathContext} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class MathContextClass extends JavaClass {
    /**
     * Original type: 'java.math.MathContext'
     */
    static readonly UNLIMITED: MathContextClass | null;
    /**
     * Original type: 'java.math.MathContext'
     */
    static readonly DECIMAL32: MathContextClass | null;
    /**
     * Original type: 'java.math.MathContext'
     */
    static readonly DECIMAL64: MathContextClass | null;
    /**
     * Original type: 'java.math.MathContext'
     */
    static readonly DECIMAL128: MathContextClass | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'int'
     */
    getPrecision(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getPrecisionSync(): number;
    /**
     * @return original return type: 'java.math.RoundingMode'
     */
    getRoundingMode(): Promise<java_math_RoundingMode | null>;
    /**
     * @return original return type: 'java.math.RoundingMode'
     */
    getRoundingModeSync(): java_math_RoundingMode | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.math.MathContext'
     */
    static newInstanceAsync(var0: string | null): Promise<MathContext>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.math.RoundingMode'
     * @return original return type: 'java.math.MathContext'
     */
    static newInstanceAsync(var0: java_lang_Integer | number, var1: java_math_RoundingMode | null): Promise<MathContext>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.math.MathContext'
     */
    static newInstanceAsync(var0: java_lang_Integer | number): Promise<MathContext>;
    /**
     * @param var0 original type: 'java.lang.String'
     */
    constructor(var0: string | null);
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.math.RoundingMode'
     */
    constructor(var0: java_lang_Integer | number, var1: java_math_RoundingMode | null);
    /**
     * @param var0 original type: 'int'
     */
    constructor(var0: java_lang_Integer | number);
}
declare const MathContext_base: typeof MathContextClass;
/**
 * Class java.math.MathContext.
 *
 * This actually imports the java class for further use.
 * The class {@link MathContextClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class MathContext extends MathContext_base {
}
export default MathContext;
//# sourceMappingURL=MathContext.d.ts.map