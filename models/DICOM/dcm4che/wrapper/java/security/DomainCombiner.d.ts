import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { ProtectionDomain as java_security_ProtectionDomain } from "./ProtectionDomain";
/**
 * This class just defines types, you should import {@link DomainCombiner} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DomainCombinerClass extends JavaClass {
    /**
     * @param var0 original type: 'java.security.ProtectionDomain[]'
     * @param var1 original type: 'java.security.ProtectionDomain[]'
     * @return original return type: 'java.security.ProtectionDomain[]'
     */
    combine(var0: (java_security_ProtectionDomain | null)[] | null, var1: (java_security_ProtectionDomain | null)[] | null): Promise<(java_security_ProtectionDomain | null)[] | null>;
    /**
     * @param var0 original type: 'java.security.ProtectionDomain[]'
     * @param var1 original type: 'java.security.ProtectionDomain[]'
     * @return original return type: 'java.security.ProtectionDomain[]'
     */
    combineSync(var0: (java_security_ProtectionDomain | null)[] | null, var1: (java_security_ProtectionDomain | null)[] | null): (java_security_ProtectionDomain | null)[] | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createDomainCombinerProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface DomainCombinerInterface {
    /**
     * @param var0 original type: 'java.security.ProtectionDomain[]'
     * @param var1 original type: 'java.security.ProtectionDomain[]'
     * @return original return type: 'java.security.ProtectionDomain[]'
     */
    combine(var0: (java_security_ProtectionDomain | null)[] | null, var1: (java_security_ProtectionDomain | null)[] | null): (java_security_ProtectionDomain | null)[] | null;
}
/**
 * Create a proxy for the {@link DomainCombiner} interface.
 * All required methods in {@link DomainCombinerInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createDomainCombinerProxy(methods: DomainCombinerInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<DomainCombinerInterface>;
declare const DomainCombiner_base: typeof DomainCombinerClass;
/**
 * Class java.security.DomainCombiner.
 *
 * This actually imports the java class for further use.
 * The class {@link DomainCombinerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DomainCombiner extends DomainCombiner_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default DomainCombiner;
//# sourceMappingURL=DomainCombiner.d.ts.map