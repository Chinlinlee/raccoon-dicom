import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Integer as java_lang_Integer } from "./../lang/Integer";
import { Long as java_lang_Long } from "./../lang/Long";
import { Boolean as java_lang_Boolean } from "./../lang/Boolean";
import { Locale as java_util_Locale } from "./Locale";
import { ZoneId as java_time_ZoneId } from "./../time/ZoneId";
import { Date as java_util_Date } from "./Date";
import { Class as java_lang_Class } from "./../lang/Class";
/**
 * This class just defines types, you should import {@link TimeZone} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class TimeZoneClass extends JavaClass {
    /**
     * Original type: 'int'
     */
    static readonly SHORT: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly LONG: java_lang_Integer | number;
    /**
     * @return original return type: 'java.lang.Object'
     */
    clone(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    cloneSync(): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.util.TimeZone'
     */
    static getDefault(): Promise<TimeZone | null>;
    /**
     * @return original return type: 'java.util.TimeZone'
     */
    static getDefaultSync(): TimeZone | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @param var5 original type: 'int'
     * @return original return type: 'int'
     */
    getOffset(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Integer | number, var5: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @param var5 original type: 'int'
     * @return original return type: 'int'
     */
    getOffsetSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Integer | number, var5: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'int'
     */
    getOffset(var0: java_lang_Long | bigint | number): Promise<number>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'int'
     */
    getOffsetSync(var0: java_lang_Long | bigint | number): number;
    /**
     * @param var0 original type: 'java.util.TimeZone'
     * @return original return type: 'void'
     */
    static setDefault(var0: TimeZoneClass | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.TimeZone'
     * @return original return type: 'void'
     */
    static setDefaultSync(var0: TimeZoneClass | null): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getID(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getIDSync(): string | null;
    /**
     * @param var0 original type: 'boolean'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getDisplayName(var0: java_lang_Boolean | boolean, var1: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'boolean'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getDisplayNameSync(var0: java_lang_Boolean | boolean, var1: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'boolean'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getDisplayName(var0: java_lang_Boolean | boolean, var1: java_lang_Integer | number, var2: java_util_Locale | null): Promise<string | null>;
    /**
     * @param var0 original type: 'boolean'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getDisplayNameSync(var0: java_lang_Boolean | boolean, var1: java_lang_Integer | number, var2: java_util_Locale | null): string | null;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getDisplayName(var0: java_util_Locale | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getDisplayNameSync(var0: java_util_Locale | null): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getDisplayName(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getDisplayNameSync(): string | null;
    /**
     * @return original return type: 'java.time.ZoneId'
     */
    toZoneId(): Promise<java_time_ZoneId | null>;
    /**
     * @return original return type: 'java.time.ZoneId'
     */
    toZoneIdSync(): java_time_ZoneId | null;
    /**
     * @param var0 original type: 'java.time.ZoneId'
     * @return original return type: 'java.util.TimeZone'
     */
    static getTimeZone(var0: java_time_ZoneId | null): Promise<TimeZone | null>;
    /**
     * @param var0 original type: 'java.time.ZoneId'
     * @return original return type: 'java.util.TimeZone'
     */
    static getTimeZoneSync(var0: java_time_ZoneId | null): TimeZone | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.TimeZone'
     */
    static getTimeZone(var0: string | null): Promise<TimeZone | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.TimeZone'
     */
    static getTimeZoneSync(var0: string | null): TimeZone | null;
    /**
     * @return original return type: 'int'
     */
    getDSTSavings(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getDSTSavingsSync(): number;
    /**
     * @param var0 original type: 'java.util.TimeZone'
     * @return original return type: 'boolean'
     */
    hasSameRules(var0: TimeZoneClass | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.util.TimeZone'
     * @return original return type: 'boolean'
     */
    hasSameRulesSync(var0: TimeZoneClass | null): boolean;
    /**
     * @return original return type: 'int'
     */
    getRawOffset(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getRawOffsetSync(): number;
    /**
     * @param var0 original type: 'java.util.Date'
     * @return original return type: 'boolean'
     */
    inDaylightTime(var0: java_util_Date | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.util.Date'
     * @return original return type: 'boolean'
     */
    inDaylightTimeSync(var0: java_util_Date | null): boolean;
    /**
     * @return original return type: 'boolean'
     */
    useDaylightTime(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    useDaylightTimeSync(): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String[]'
     */
    static getAvailableIDs(var0: java_lang_Integer | number): Promise<(string | null)[] | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String[]'
     */
    static getAvailableIDsSync(var0: java_lang_Integer | number): (string | null)[] | null;
    /**
     * @return original return type: 'java.lang.String[]'
     */
    static getAvailableIDs(): Promise<(string | null)[] | null>;
    /**
     * @return original return type: 'java.lang.String[]'
     */
    static getAvailableIDsSync(): (string | null)[] | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setID(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setIDSync(var0: string | null): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    setRawOffset(var0: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    setRawOffsetSync(var0: java_lang_Integer | number): void;
    /**
     * @return original return type: 'boolean'
     */
    observesDaylightTime(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    observesDaylightTimeSync(): boolean;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const TimeZone_base: typeof TimeZoneClass;
/**
 * Class java.util.TimeZone.
 *
 * This actually imports the java class for further use.
 * The class {@link TimeZoneClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class TimeZone extends TimeZone_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default TimeZone;
//# sourceMappingURL=TimeZone.d.ts.map