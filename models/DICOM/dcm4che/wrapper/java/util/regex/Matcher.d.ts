import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
import { Function as java_util_function_Function, FunctionInterface as java_util_function_FunctionInterface } from "./../function/Function";
import { CharSequence as java_lang_CharSequence, CharSequenceInterface as java_lang_CharSequenceInterface } from "./../../lang/CharSequence";
import { Pattern as java_util_regex_Pattern } from "./Pattern";
import { StringBuffer as java_lang_StringBuffer } from "./../../lang/StringBuffer";
import { StringBuilder as java_lang_StringBuilder } from "./../../lang/StringBuilder";
import { MatchResult as java_util_regex_MatchResult } from "./MatchResult";
import { Stream as java_util_stream_Stream } from "./../stream/Stream";
import { Boolean as java_lang_Boolean } from "./../../lang/Boolean";
import { Long as java_lang_Long } from "./../../lang/Long";
import { Class as java_lang_Class } from "./../../lang/Class";
/**
 * This class just defines types, you should import {@link Matcher} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class MatcherClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    group(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    groupSync(var0: string | null): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    group(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    groupSync(var0: java_lang_Integer | number): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    group(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    groupSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'boolean'
     */
    matches(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    matchesSync(): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    replaceFirst(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    replaceFirstSync(var0: string | null): string | null;
    /**
     * @param var0 original type: 'java.util.function.Function'
     * @return original return type: 'java.lang.String'
     */
    replaceFirst(var0: java_util_function_Function | JavaInterfaceProxy<java_util_function_FunctionInterface> | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.util.function.Function'
     * @return original return type: 'java.lang.String'
     */
    replaceFirstSync(var0: java_util_function_Function | JavaInterfaceProxy<java_util_function_FunctionInterface> | null): string | null;
    /**
     * @param var0 original type: 'java.util.function.Function'
     * @return original return type: 'java.lang.String'
     */
    replaceAll(var0: java_util_function_Function | JavaInterfaceProxy<java_util_function_FunctionInterface> | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.util.function.Function'
     * @return original return type: 'java.lang.String'
     */
    replaceAllSync(var0: java_util_function_Function | JavaInterfaceProxy<java_util_function_FunctionInterface> | null): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    replaceAll(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    replaceAllSync(var0: string | null): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    start(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    startSync(var0: java_lang_Integer | number): number;
    /**
     * @return original return type: 'int'
     */
    start(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    startSync(): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int'
     */
    start(var0: string | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int'
     */
    startSync(var0: string | null): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int'
     */
    end(var0: string | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int'
     */
    endSync(var0: string | null): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    end(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    endSync(var0: java_lang_Integer | number): number;
    /**
     * @return original return type: 'int'
     */
    end(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    endSync(): number;
    /**
     * @return original return type: 'boolean'
     */
    find(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    findSync(): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    find(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    findSync(var0: java_lang_Integer | number): boolean;
    /**
     * @return original return type: 'java.util.regex.Matcher'
     */
    reset(): Promise<Matcher | null>;
    /**
     * @return original return type: 'java.util.regex.Matcher'
     */
    resetSync(): Matcher | null;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @return original return type: 'java.util.regex.Matcher'
     */
    reset(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null): Promise<Matcher | null>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @return original return type: 'java.util.regex.Matcher'
     */
    resetSync(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null): Matcher | null;
    /**
     * @return original return type: 'java.util.regex.Pattern'
     */
    pattern(): Promise<java_util_regex_Pattern | null>;
    /**
     * @return original return type: 'java.util.regex.Pattern'
     */
    patternSync(): java_util_regex_Pattern | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.util.regex.Matcher'
     */
    region(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<Matcher | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.util.regex.Matcher'
     */
    regionSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Matcher | null;
    /**
     * @param var0 original type: 'java.lang.StringBuffer'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.util.regex.Matcher'
     */
    appendReplacement(var0: java_lang_StringBuffer | null, var1: string | null): Promise<Matcher | null>;
    /**
     * @param var0 original type: 'java.lang.StringBuffer'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.util.regex.Matcher'
     */
    appendReplacementSync(var0: java_lang_StringBuffer | null, var1: string | null): Matcher | null;
    /**
     * @param var0 original type: 'java.lang.StringBuilder'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.util.regex.Matcher'
     */
    appendReplacement(var0: java_lang_StringBuilder | null, var1: string | null): Promise<Matcher | null>;
    /**
     * @param var0 original type: 'java.lang.StringBuilder'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.util.regex.Matcher'
     */
    appendReplacementSync(var0: java_lang_StringBuilder | null, var1: string | null): Matcher | null;
    /**
     * @param var0 original type: 'java.lang.StringBuffer'
     * @return original return type: 'java.lang.StringBuffer'
     */
    appendTail(var0: java_lang_StringBuffer | null): Promise<java_lang_StringBuffer | null>;
    /**
     * @param var0 original type: 'java.lang.StringBuffer'
     * @return original return type: 'java.lang.StringBuffer'
     */
    appendTailSync(var0: java_lang_StringBuffer | null): java_lang_StringBuffer | null;
    /**
     * @param var0 original type: 'java.lang.StringBuilder'
     * @return original return type: 'java.lang.StringBuilder'
     */
    appendTail(var0: java_lang_StringBuilder | null): Promise<java_lang_StringBuilder | null>;
    /**
     * @param var0 original type: 'java.lang.StringBuilder'
     * @return original return type: 'java.lang.StringBuilder'
     */
    appendTailSync(var0: java_lang_StringBuilder | null): java_lang_StringBuilder | null;
    /**
     * @return original return type: 'boolean'
     */
    hitEnd(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hitEndSync(): boolean;
    /**
     * @return original return type: 'int'
     */
    groupCount(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    groupCountSync(): number;
    /**
     * @return original return type: 'boolean'
     */
    requireEnd(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    requireEndSync(): boolean;
    /**
     * @return original return type: 'java.util.regex.MatchResult'
     */
    toMatchResult(): Promise<java_util_regex_MatchResult | null>;
    /**
     * @return original return type: 'java.util.regex.MatchResult'
     */
    toMatchResultSync(): java_util_regex_MatchResult | null;
    /**
     * @return original return type: 'int'
     */
    regionStart(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    regionStartSync(): number;
    /**
     * @return original return type: 'int'
     */
    regionEnd(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    regionEndSync(): number;
    /**
     * @param var0 original type: 'java.util.regex.Pattern'
     * @return original return type: 'java.util.regex.Matcher'
     */
    usePattern(var0: java_util_regex_Pattern | null): Promise<Matcher | null>;
    /**
     * @param var0 original type: 'java.util.regex.Pattern'
     * @return original return type: 'java.util.regex.Matcher'
     */
    usePatternSync(var0: java_util_regex_Pattern | null): Matcher | null;
    /**
     * @return original return type: 'boolean'
     */
    lookingAt(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    lookingAtSync(): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    static quoteReplacement(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    static quoteReplacementSync(var0: string | null): string | null;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    results(): Promise<java_util_stream_Stream | null>;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    resultsSync(): java_util_stream_Stream | null;
    /**
     * @return original return type: 'boolean'
     */
    hasTransparentBounds(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasTransparentBoundsSync(): boolean;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'java.util.regex.Matcher'
     */
    useTransparentBounds(var0: java_lang_Boolean | boolean): Promise<Matcher | null>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'java.util.regex.Matcher'
     */
    useTransparentBoundsSync(var0: java_lang_Boolean | boolean): Matcher | null;
    /**
     * @return original return type: 'boolean'
     */
    hasAnchoringBounds(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasAnchoringBoundsSync(): boolean;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'java.util.regex.Matcher'
     */
    useAnchoringBounds(var0: java_lang_Boolean | boolean): Promise<Matcher | null>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'java.util.regex.Matcher'
     */
    useAnchoringBoundsSync(var0: java_lang_Boolean | boolean): Matcher | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const Matcher_base: typeof MatcherClass;
/**
 * Class java.util.regex.Matcher.
 *
 * This actually imports the java class for further use.
 * The class {@link MatcherClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Matcher extends Matcher_base {
}
export default Matcher;
//# sourceMappingURL=Matcher.d.ts.map