import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
import { CharSequence as java_lang_CharSequence, CharSequenceInterface as java_lang_CharSequenceInterface } from "./../../lang/CharSequence";
import { Matcher as java_util_regex_Matcher } from "./Matcher";
import { Predicate as java_util_function_Predicate } from "./../function/Predicate";
import { Stream as java_util_stream_Stream } from "./../stream/Stream";
import { Long as java_lang_Long } from "./../../lang/Long";
import { Class as java_lang_Class } from "./../../lang/Class";
/**
 * This class just defines types, you should import {@link Pattern} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class PatternClass extends JavaClass {
    /**
     * Original type: 'int'
     */
    static readonly UNIX_LINES: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CASE_INSENSITIVE: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly COMMENTS: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly MULTILINE: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly LITERAL: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly DOTALL: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly UNICODE_CASE: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CANON_EQ: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly UNICODE_CHARACTER_CLASS: java_lang_Integer | number;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    flags(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    flagsSync(): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.CharSequence'
     * @return original return type: 'boolean'
     */
    static matches(var0: string | null, var1: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.CharSequence'
     * @return original return type: 'boolean'
     */
    static matchesSync(var0: string | null, var1: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.regex.Pattern'
     */
    static compile(var0: string | null): Promise<Pattern | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.regex.Pattern'
     */
    static compileSync(var0: string | null): Pattern | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'java.util.regex.Pattern'
     */
    static compile(var0: string | null, var1: java_lang_Integer | number): Promise<Pattern | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'java.util.regex.Pattern'
     */
    static compileSync(var0: string | null, var1: java_lang_Integer | number): Pattern | null;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @return original return type: 'java.util.regex.Matcher'
     */
    matcher(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null): Promise<java_util_regex_Matcher | null>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @return original return type: 'java.util.regex.Matcher'
     */
    matcherSync(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null): java_util_regex_Matcher | null;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.String[]'
     */
    split(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_lang_Integer | number): Promise<(string | null)[] | null>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.String[]'
     */
    splitSync(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_lang_Integer | number): (string | null)[] | null;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @return original return type: 'java.lang.String[]'
     */
    split(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null): Promise<(string | null)[] | null>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @return original return type: 'java.lang.String[]'
     */
    splitSync(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null): (string | null)[] | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    static quote(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    static quoteSync(var0: string | null): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    pattern(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    patternSync(): string | null;
    /**
     * @return original return type: 'java.util.function.Predicate'
     */
    asPredicate(): Promise<java_util_function_Predicate | null>;
    /**
     * @return original return type: 'java.util.function.Predicate'
     */
    asPredicateSync(): java_util_function_Predicate | null;
    /**
     * @return original return type: 'java.util.function.Predicate'
     */
    asMatchPredicate(): Promise<java_util_function_Predicate | null>;
    /**
     * @return original return type: 'java.util.function.Predicate'
     */
    asMatchPredicateSync(): java_util_function_Predicate | null;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @return original return type: 'java.util.stream.Stream'
     */
    splitAsStream(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null): Promise<java_util_stream_Stream | null>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @return original return type: 'java.util.stream.Stream'
     */
    splitAsStreamSync(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null): java_util_stream_Stream | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const Pattern_base: typeof PatternClass;
/**
 * Class java.util.regex.Pattern.
 *
 * This actually imports the java class for further use.
 * The class {@link PatternClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Pattern extends Pattern_base {
}
export default Pattern;
//# sourceMappingURL=Pattern.d.ts.map