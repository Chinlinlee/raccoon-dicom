import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
/**
 * This class just defines types, you should import {@link MatchResult} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class MatchResultClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.String'
     */
    group(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    groupSync(): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    group(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    groupSync(var0: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    start(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    startSync(var0: java_lang_Integer | number): number;
    /**
     * @return original return type: 'int'
     */
    start(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    startSync(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    end(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    endSync(var0: java_lang_Integer | number): number;
    /**
     * @return original return type: 'int'
     */
    end(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    endSync(): number;
    /**
     * @return original return type: 'int'
     */
    groupCount(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    groupCountSync(): number;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createMatchResultProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface MatchResultInterface {
    /**
     * @return original return type: 'java.lang.String'
     */
    group(): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    group(var0: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    start(var0: java_lang_Integer | number): number;
    /**
     * @return original return type: 'int'
     */
    start(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    end(var0: java_lang_Integer | number): number;
    /**
     * @return original return type: 'int'
     */
    end(): number;
    /**
     * @return original return type: 'int'
     */
    groupCount(): number;
}
/**
 * Create a proxy for the {@link MatchResult} interface.
 * All required methods in {@link MatchResultInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createMatchResultProxy(methods: MatchResultInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<MatchResultInterface>;
declare const MatchResult_base: typeof MatchResultClass;
/**
 * Class java.util.regex.MatchResult.
 *
 * This actually imports the java class for further use.
 * The class {@link MatchResultClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class MatchResult extends MatchResult_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default MatchResult;
//# sourceMappingURL=MatchResult.d.ts.map