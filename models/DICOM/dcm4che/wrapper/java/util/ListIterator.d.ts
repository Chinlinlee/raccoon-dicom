import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Consumer as java_util_function_Consumer, ConsumerInterface as java_util_function_ConsumerInterface } from "./function/Consumer";
/**
 * This class just defines types, you should import {@link ListIterator} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ListIteratorClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    add(var0: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    addSync(var0: BasicOrJavaType | null): void;
    /**
     * @return original return type: 'void'
     */
    remove(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    removeSync(): void;
    /**
     * @return original return type: 'boolean'
     */
    hasNext(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasNextSync(): boolean;
    /**
     * @return original return type: 'java.lang.Object'
     */
    next(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    nextSync(): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    set(var0: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    setSync(var0: BasicOrJavaType | null): void;
    /**
     * @return original return type: 'int'
     */
    nextIndex(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    nextIndexSync(): number;
    /**
     * @return original return type: 'int'
     */
    previousIndex(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    previousIndexSync(): number;
    /**
     * @return original return type: 'boolean'
     */
    hasPrevious(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasPreviousSync(): boolean;
    /**
     * @return original return type: 'java.lang.Object'
     */
    previous(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    previousSync(): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    forEachRemaining(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    forEachRemainingSync(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createListIteratorProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface ListIteratorInterface {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    add(var0: BasicOrJavaType | null): void;
    /**
     * @return original return type: 'void'
     */
    remove(): void;
    /**
     * @return original return type: 'boolean'
     */
    hasNext(): boolean;
    /**
     * @return original return type: 'java.lang.Object'
     */
    next(): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    set(var0: BasicOrJavaType | null): void;
    /**
     * @return original return type: 'int'
     */
    nextIndex(): number;
    /**
     * @return original return type: 'int'
     */
    previousIndex(): number;
    /**
     * @return original return type: 'boolean'
     */
    hasPrevious(): boolean;
    /**
     * @return original return type: 'java.lang.Object'
     */
    previous(): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    forEachRemaining?(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): void;
}
/**
 * Create a proxy for the {@link ListIterator} interface.
 * All required methods in {@link ListIteratorInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createListIteratorProxy(methods: ListIteratorInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<ListIteratorInterface>;
declare const ListIterator_base: typeof ListIteratorClass;
/**
 * Class java.util.ListIterator.
 *
 * This actually imports the java class for further use.
 * The class {@link ListIteratorClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ListIterator extends ListIterator_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default ListIterator;
//# sourceMappingURL=ListIterator.d.ts.map