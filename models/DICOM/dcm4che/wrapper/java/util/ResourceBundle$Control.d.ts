import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { List as java_util_List, ListInterface as java_util_ListInterface } from "./List";
import { Long as java_lang_Long } from "./../lang/Long";
import { Locale as java_util_Locale } from "./Locale";
import { ResourceBundle as java_util_ResourceBundle } from "./ResourceBundle";
import { ClassLoader as java_lang_ClassLoader } from "./../lang/ClassLoader";
import { Boolean as java_lang_Boolean } from "./../lang/Boolean";
import { Integer as java_lang_Integer } from "./../lang/Integer";
import { Class as java_lang_Class } from "./../lang/Class";
/**
 * This class just defines types, you should import {@link ResourceBundle$Control} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ResourceBundle$ControlClass extends JavaClass {
    /**
     * Original type: 'java.util.List'
     */
    static readonly FORMAT_DEFAULT: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null;
    /**
     * Original type: 'java.util.List'
     */
    static readonly FORMAT_CLASS: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null;
    /**
     * Original type: 'java.util.List'
     */
    static readonly FORMAT_PROPERTIES: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null;
    /**
     * Original type: 'long'
     */
    static readonly TTL_DONT_CACHE: java_lang_Long | bigint | number;
    /**
     * Original type: 'long'
     */
    static readonly TTL_NO_EXPIRATION_CONTROL: java_lang_Long | bigint | number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    toResourceName(var0: string | null, var1: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    toResourceNameSync(var0: string | null, var1: string | null): string | null;
    /**
     * @param var0 original type: 'java.util.List'
     * @return original return type: 'java.util.ResourceBundle$Control'
     */
    static getControl(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null): Promise<ResourceBundle$Control | null>;
    /**
     * @param var0 original type: 'java.util.List'
     * @return original return type: 'java.util.ResourceBundle$Control'
     */
    static getControlSync(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null): ResourceBundle$Control | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.util.Locale'
     * @return original return type: 'java.util.List'
     */
    getCandidateLocales(var0: string | null, var1: java_util_Locale | null): Promise<java_util_List | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.util.Locale'
     * @return original return type: 'java.util.List'
     */
    getCandidateLocalesSync(var0: string | null, var1: java_util_Locale | null): java_util_List | null;
    /**
     * @param var0 original type: 'java.util.List'
     * @return original return type: 'java.util.ResourceBundle$Control'
     */
    static getNoFallbackControl(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null): Promise<ResourceBundle$Control | null>;
    /**
     * @param var0 original type: 'java.util.List'
     * @return original return type: 'java.util.ResourceBundle$Control'
     */
    static getNoFallbackControlSync(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null): ResourceBundle$Control | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    toBundleName(var0: string | null, var1: java_util_Locale | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    toBundleNameSync(var0: string | null, var1: java_util_Locale | null): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.List'
     */
    getFormats(var0: string | null): Promise<java_util_List | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.List'
     */
    getFormatsSync(var0: string | null): java_util_List | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.util.Locale'
     * @return original return type: 'java.util.Locale'
     */
    getFallbackLocale(var0: string | null, var1: java_util_Locale | null): Promise<java_util_Locale | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.util.Locale'
     * @return original return type: 'java.util.Locale'
     */
    getFallbackLocaleSync(var0: string | null, var1: java_util_Locale | null): java_util_Locale | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.util.Locale'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.ClassLoader'
     * @param var4 original type: 'boolean'
     * @return original return type: 'java.util.ResourceBundle'
     */
    newBundle(var0: string | null, var1: java_util_Locale | null, var2: string | null, var3: java_lang_ClassLoader | null, var4: java_lang_Boolean | boolean): Promise<java_util_ResourceBundle | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.util.Locale'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.ClassLoader'
     * @param var4 original type: 'boolean'
     * @return original return type: 'java.util.ResourceBundle'
     */
    newBundleSync(var0: string | null, var1: java_util_Locale | null, var2: string | null, var3: java_lang_ClassLoader | null, var4: java_lang_Boolean | boolean): java_util_ResourceBundle | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.util.Locale'
     * @return original return type: 'long'
     */
    getTimeToLive(var0: string | null, var1: java_util_Locale | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.util.Locale'
     * @return original return type: 'long'
     */
    getTimeToLiveSync(var0: string | null, var1: java_util_Locale | null): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.util.Locale'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.ClassLoader'
     * @param var4 original type: 'java.util.ResourceBundle'
     * @param var5 original type: 'long'
     * @return original return type: 'boolean'
     */
    needsReload(var0: string | null, var1: java_util_Locale | null, var2: string | null, var3: java_lang_ClassLoader | null, var4: java_util_ResourceBundle | null, var5: java_lang_Long | bigint | number): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.util.Locale'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.ClassLoader'
     * @param var4 original type: 'java.util.ResourceBundle'
     * @param var5 original type: 'long'
     * @return original return type: 'boolean'
     */
    needsReloadSync(var0: string | null, var1: java_util_Locale | null, var2: string | null, var3: java_lang_ClassLoader | null, var4: java_util_ResourceBundle | null, var5: java_lang_Long | bigint | number): boolean;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const ResourceBundle$Control_base: typeof ResourceBundle$ControlClass;
/**
 * Class java.util.ResourceBundle$Control.
 *
 * This actually imports the java class for further use.
 * The class {@link ResourceBundle$ControlClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ResourceBundle$Control extends ResourceBundle$Control_base {
}
export default ResourceBundle$Control;
//# sourceMappingURL=ResourceBundle$Control.d.ts.map