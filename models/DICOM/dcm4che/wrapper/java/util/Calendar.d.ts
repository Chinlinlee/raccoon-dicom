import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Integer as java_lang_Integer } from "./../lang/Integer";
import { TimeZone as java_util_TimeZone } from "./TimeZone";
import { Locale as java_util_Locale } from "./Locale";
import { Date as java_util_Date } from "./Date";
import { Instant as java_time_Instant } from "./../time/Instant";
import { Boolean as java_lang_Boolean } from "./../lang/Boolean";
import { Map as java_util_Map } from "./Map";
import { Long as java_lang_Long } from "./../lang/Long";
import { Set as java_util_Set } from "./Set";
import { Class as java_lang_Class } from "./../lang/Class";
/**
 * This class just defines types, you should import {@link Calendar} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class CalendarClass extends JavaClass {
    /**
     * Original type: 'int'
     */
    static readonly ERA: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly YEAR: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly MONTH: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly WEEK_OF_YEAR: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly WEEK_OF_MONTH: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly DATE: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly DAY_OF_MONTH: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly DAY_OF_YEAR: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly DAY_OF_WEEK: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly DAY_OF_WEEK_IN_MONTH: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly AM_PM: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly HOUR: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly HOUR_OF_DAY: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly MINUTE: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly SECOND: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly MILLISECOND: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly ZONE_OFFSET: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly DST_OFFSET: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly FIELD_COUNT: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly SUNDAY: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly MONDAY: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly TUESDAY: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly WEDNESDAY: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly THURSDAY: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly FRIDAY: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly SATURDAY: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly JANUARY: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly FEBRUARY: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly MARCH: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly APRIL: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly MAY: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly JUNE: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly JULY: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly AUGUST: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly SEPTEMBER: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly OCTOBER: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly NOVEMBER: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly DECEMBER: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly UNDECIMBER: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly AM: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly PM: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly ALL_STYLES: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly SHORT: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly LONG: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly NARROW_FORMAT: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly NARROW_STANDALONE: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly SHORT_FORMAT: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly LONG_FORMAT: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly SHORT_STANDALONE: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly LONG_STANDALONE: java_lang_Integer | number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    add(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    addSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    get(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    getSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Object'
     */
    clone(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    cloneSync(): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.util.Calendar'
     * @return original return type: 'int'
     */
    compareTo(var0: CalendarClass | null): Promise<number>;
    /**
     * @param var0 original type: 'java.util.Calendar'
     * @return original return type: 'int'
     */
    compareToSync(var0: CalendarClass | null): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareTo(var0: BasicOrJavaType | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareToSync(var0: BasicOrJavaType | null): number;
    /**
     * @return original return type: 'void'
     */
    clear(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    clearSync(): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    clear(var0: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    clearSync(var0: java_lang_Integer | number): void;
    /**
     * @return original return type: 'java.util.Calendar'
     */
    static getInstance(): Promise<Calendar | null>;
    /**
     * @return original return type: 'java.util.Calendar'
     */
    static getInstanceSync(): Calendar | null;
    /**
     * @param var0 original type: 'java.util.TimeZone'
     * @param var1 original type: 'java.util.Locale'
     * @return original return type: 'java.util.Calendar'
     */
    static getInstance(var0: java_util_TimeZone | null, var1: java_util_Locale | null): Promise<Calendar | null>;
    /**
     * @param var0 original type: 'java.util.TimeZone'
     * @param var1 original type: 'java.util.Locale'
     * @return original return type: 'java.util.Calendar'
     */
    static getInstanceSync(var0: java_util_TimeZone | null, var1: java_util_Locale | null): Calendar | null;
    /**
     * @param var0 original type: 'java.util.TimeZone'
     * @return original return type: 'java.util.Calendar'
     */
    static getInstance(var0: java_util_TimeZone | null): Promise<Calendar | null>;
    /**
     * @param var0 original type: 'java.util.TimeZone'
     * @return original return type: 'java.util.Calendar'
     */
    static getInstanceSync(var0: java_util_TimeZone | null): Calendar | null;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.util.Calendar'
     */
    static getInstance(var0: java_util_Locale | null): Promise<Calendar | null>;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.util.Calendar'
     */
    static getInstanceSync(var0: java_util_Locale | null): Calendar | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @param var5 original type: 'int'
     * @return original return type: 'void'
     */
    set(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Integer | number, var5: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @param var5 original type: 'int'
     * @return original return type: 'void'
     */
    setSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Integer | number, var5: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @return original return type: 'void'
     */
    set(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @return original return type: 'void'
     */
    setSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    set(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    setSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    set(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    setSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    isSet(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    isSetSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    before(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    beforeSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    after(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    afterSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.util.Date'
     */
    getTime(): Promise<java_util_Date | null>;
    /**
     * @return original return type: 'java.util.Date'
     */
    getTimeSync(): java_util_Date | null;
    /**
     * @return original return type: 'java.time.Instant'
     */
    toInstant(): Promise<java_time_Instant | null>;
    /**
     * @return original return type: 'java.time.Instant'
     */
    toInstantSync(): java_time_Instant | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getDisplayName(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_util_Locale | null): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getDisplayNameSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_util_Locale | null): string | null;
    /**
     * @return original return type: 'java.util.Locale[]'
     */
    static getAvailableLocales(): Promise<(java_util_Locale | null)[] | null>;
    /**
     * @return original return type: 'java.util.Locale[]'
     */
    static getAvailableLocalesSync(): (java_util_Locale | null)[] | null;
    /**
     * @param var0 original type: 'java.util.Date'
     * @return original return type: 'void'
     */
    setTime(var0: java_util_Date | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.Date'
     * @return original return type: 'void'
     */
    setTimeSync(var0: java_util_Date | null): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getCalendarType(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getCalendarTypeSync(): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    getMinimum(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    getMinimumSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    getMaximum(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    getMaximumSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'java.util.TimeZone'
     * @return original return type: 'void'
     */
    setTimeZone(var0: java_util_TimeZone | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.TimeZone'
     * @return original return type: 'void'
     */
    setTimeZoneSync(var0: java_util_TimeZone | null): void;
    /**
     * @return original return type: 'java.util.TimeZone'
     */
    getTimeZone(): Promise<java_util_TimeZone | null>;
    /**
     * @return original return type: 'java.util.TimeZone'
     */
    getTimeZoneSync(): java_util_TimeZone | null;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setLenient(var0: java_lang_Boolean | boolean): Promise<void>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setLenientSync(var0: java_lang_Boolean | boolean): void;
    /**
     * @return original return type: 'boolean'
     */
    isLenient(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isLenientSync(): boolean;
    /**
     * @return original return type: 'int'
     */
    getFirstDayOfWeek(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getFirstDayOfWeekSync(): number;
    /**
     * @return original return type: 'int'
     */
    getMinimalDaysInFirstWeek(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getMinimalDaysInFirstWeekSync(): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.util.Locale'
     * @return original return type: 'java.util.Map'
     */
    getDisplayNames(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_util_Locale | null): Promise<java_util_Map | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.util.Locale'
     * @return original return type: 'java.util.Map'
     */
    getDisplayNamesSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_util_Locale | null): java_util_Map | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    setTimeInMillis(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    setTimeInMillisSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'boolean'
     */
    isWeekDateSupported(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isWeekDateSupportedSync(): boolean;
    /**
     * @return original return type: 'int'
     */
    getWeekYear(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getWeekYearSync(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    getLeastMaximum(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    getLeastMaximumSync(var0: java_lang_Integer | number): number;
    /**
     * @return original return type: 'long'
     */
    getTimeInMillis(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    getTimeInMillisSync(): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'boolean'
     * @return original return type: 'void'
     */
    roll(var0: java_lang_Integer | number, var1: java_lang_Boolean | boolean): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'boolean'
     * @return original return type: 'void'
     */
    rollSync(var0: java_lang_Integer | number, var1: java_lang_Boolean | boolean): void;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    roll(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    rollSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    getGreatestMinimum(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    getGreatestMinimumSync(var0: java_lang_Integer | number): number;
    /**
     * @return original return type: 'java.util.Set'
     */
    static getAvailableCalendarTypes(): Promise<java_util_Set | null>;
    /**
     * @return original return type: 'java.util.Set'
     */
    static getAvailableCalendarTypesSync(): java_util_Set | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    setFirstDayOfWeek(var0: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    setFirstDayOfWeekSync(var0: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    setMinimalDaysInFirstWeek(var0: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    setMinimalDaysInFirstWeekSync(var0: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    setWeekDate(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    setWeekDateSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @return original return type: 'int'
     */
    getWeeksInWeekYear(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getWeeksInWeekYearSync(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    getActualMinimum(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    getActualMinimumSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    getActualMaximum(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    getActualMaximumSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const Calendar_base: typeof CalendarClass;
/**
 * Class java.util.Calendar.
 *
 * This actually imports the java class for further use.
 * The class {@link CalendarClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Calendar extends Calendar_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Calendar;
//# sourceMappingURL=Calendar.d.ts.map