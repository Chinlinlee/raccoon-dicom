import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { Locale$Category as java_util_Locale$Category } from "./Locale$Category";
import { List as java_util_List, ListInterface as java_util_ListInterface } from "./List";
import { Collection as java_util_Collection, CollectionInterface as java_util_CollectionInterface } from "./Collection";
import { Locale$FilteringMode as java_util_Locale$FilteringMode } from "./Locale$FilteringMode";
import { Set as java_util_Set } from "./Set";
import { Locale$IsoCountryCode as java_util_Locale$IsoCountryCode } from "./Locale$IsoCountryCode";
import { Long as java_lang_Long } from "./../lang/Long";
import { Integer as java_lang_Integer } from "./../lang/Integer";
import { Class as java_lang_Class } from "./../lang/Class";
/**
 * This class just defines types, you should import {@link Locale} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class LocaleClass extends JavaClass {
    /**
     * Original type: 'java.util.Locale'
     */
    static readonly ENGLISH: LocaleClass | null;
    /**
     * Original type: 'java.util.Locale'
     */
    static readonly FRENCH: LocaleClass | null;
    /**
     * Original type: 'java.util.Locale'
     */
    static readonly GERMAN: LocaleClass | null;
    /**
     * Original type: 'java.util.Locale'
     */
    static readonly ITALIAN: LocaleClass | null;
    /**
     * Original type: 'java.util.Locale'
     */
    static readonly JAPANESE: LocaleClass | null;
    /**
     * Original type: 'java.util.Locale'
     */
    static readonly KOREAN: LocaleClass | null;
    /**
     * Original type: 'java.util.Locale'
     */
    static readonly CHINESE: LocaleClass | null;
    /**
     * Original type: 'java.util.Locale'
     */
    static readonly SIMPLIFIED_CHINESE: LocaleClass | null;
    /**
     * Original type: 'java.util.Locale'
     */
    static readonly TRADITIONAL_CHINESE: LocaleClass | null;
    /**
     * Original type: 'java.util.Locale'
     */
    static readonly FRANCE: LocaleClass | null;
    /**
     * Original type: 'java.util.Locale'
     */
    static readonly GERMANY: LocaleClass | null;
    /**
     * Original type: 'java.util.Locale'
     */
    static readonly ITALY: LocaleClass | null;
    /**
     * Original type: 'java.util.Locale'
     */
    static readonly JAPAN: LocaleClass | null;
    /**
     * Original type: 'java.util.Locale'
     */
    static readonly KOREA: LocaleClass | null;
    /**
     * Original type: 'java.util.Locale'
     */
    static readonly UK: LocaleClass | null;
    /**
     * Original type: 'java.util.Locale'
     */
    static readonly US: LocaleClass | null;
    /**
     * Original type: 'java.util.Locale'
     */
    static readonly CANADA: LocaleClass | null;
    /**
     * Original type: 'java.util.Locale'
     */
    static readonly CANADA_FRENCH: LocaleClass | null;
    /**
     * Original type: 'java.util.Locale'
     */
    static readonly ROOT: LocaleClass | null;
    /**
     * Original type: 'java.util.Locale'
     */
    static readonly CHINA: LocaleClass | null;
    /**
     * Original type: 'java.util.Locale'
     */
    static readonly PRC: LocaleClass | null;
    /**
     * Original type: 'java.util.Locale'
     */
    static readonly TAIWAN: LocaleClass | null;
    /**
     * Original type: 'char'
     */
    static readonly PRIVATE_USE_EXTENSION: string | null;
    /**
     * Original type: 'char'
     */
    static readonly UNICODE_LOCALE_EXTENSION: string | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Object'
     */
    clone(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    cloneSync(): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.util.Locale'
     */
    static getDefault(): Promise<Locale | null>;
    /**
     * @return original return type: 'java.util.Locale'
     */
    static getDefaultSync(): Locale | null;
    /**
     * @param var0 original type: 'java.util.Locale$Category'
     * @return original return type: 'java.util.Locale'
     */
    static getDefault(var0: java_util_Locale$Category | null): Promise<Locale | null>;
    /**
     * @param var0 original type: 'java.util.Locale$Category'
     * @return original return type: 'java.util.Locale'
     */
    static getDefaultSync(var0: java_util_Locale$Category | null): Locale | null;
    /**
     * @param var0 original type: 'java.util.List'
     * @param var1 original type: 'java.util.Collection'
     * @return original return type: 'java.util.Locale'
     */
    static lookup(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var1: java_util_Collection | JavaInterfaceProxy<java_util_CollectionInterface> | null): Promise<Locale | null>;
    /**
     * @param var0 original type: 'java.util.List'
     * @param var1 original type: 'java.util.Collection'
     * @return original return type: 'java.util.Locale'
     */
    static lookupSync(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var1: java_util_Collection | JavaInterfaceProxy<java_util_CollectionInterface> | null): Locale | null;
    /**
     * @param var0 original type: 'java.util.List'
     * @param var1 original type: 'java.util.Collection'
     * @param var2 original type: 'java.util.Locale$FilteringMode'
     * @return original return type: 'java.util.List'
     */
    static filter(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var1: java_util_Collection | JavaInterfaceProxy<java_util_CollectionInterface> | null, var2: java_util_Locale$FilteringMode | null): Promise<java_util_List | null>;
    /**
     * @param var0 original type: 'java.util.List'
     * @param var1 original type: 'java.util.Collection'
     * @param var2 original type: 'java.util.Locale$FilteringMode'
     * @return original return type: 'java.util.List'
     */
    static filterSync(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var1: java_util_Collection | JavaInterfaceProxy<java_util_CollectionInterface> | null, var2: java_util_Locale$FilteringMode | null): java_util_List | null;
    /**
     * @param var0 original type: 'java.util.List'
     * @param var1 original type: 'java.util.Collection'
     * @return original return type: 'java.util.List'
     */
    static filter(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var1: java_util_Collection | JavaInterfaceProxy<java_util_CollectionInterface> | null): Promise<java_util_List | null>;
    /**
     * @param var0 original type: 'java.util.List'
     * @param var1 original type: 'java.util.Collection'
     * @return original return type: 'java.util.List'
     */
    static filterSync(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var1: java_util_Collection | JavaInterfaceProxy<java_util_CollectionInterface> | null): java_util_List | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getLanguage(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getLanguageSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getScript(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getScriptSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getCountry(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getCountrySync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getVariant(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getVariantSync(): string | null;
    /**
     * @param var0 original type: 'java.util.Locale$Category'
     * @param var1 original type: 'java.util.Locale'
     * @return original return type: 'void'
     */
    static setDefault(var0: java_util_Locale$Category | null, var1: LocaleClass | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.Locale$Category'
     * @param var1 original type: 'java.util.Locale'
     * @return original return type: 'void'
     */
    static setDefaultSync(var0: java_util_Locale$Category | null, var1: LocaleClass | null): void;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'void'
     */
    static setDefault(var0: LocaleClass | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'void'
     */
    static setDefaultSync(var0: LocaleClass | null): void;
    /**
     * @return original return type: 'boolean'
     */
    hasExtensions(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasExtensionsSync(): boolean;
    /**
     * @return original return type: 'java.util.Set'
     */
    getUnicodeLocaleAttributes(): Promise<java_util_Set | null>;
    /**
     * @return original return type: 'java.util.Set'
     */
    getUnicodeLocaleAttributesSync(): java_util_Set | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getUnicodeLocaleType(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getUnicodeLocaleTypeSync(var0: string | null): string | null;
    /**
     * @return original return type: 'java.util.Set'
     */
    getUnicodeLocaleKeys(): Promise<java_util_Set | null>;
    /**
     * @return original return type: 'java.util.Set'
     */
    getUnicodeLocaleKeysSync(): java_util_Set | null;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getDisplayLanguage(var0: LocaleClass | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getDisplayLanguageSync(var0: LocaleClass | null): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getDisplayLanguage(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getDisplayLanguageSync(): string | null;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getDisplayScript(var0: LocaleClass | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getDisplayScriptSync(var0: LocaleClass | null): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getDisplayScript(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getDisplayScriptSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getDisplayCountry(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getDisplayCountrySync(): string | null;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getDisplayCountry(var0: LocaleClass | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getDisplayCountrySync(var0: LocaleClass | null): string | null;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getDisplayVariant(var0: LocaleClass | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getDisplayVariantSync(var0: LocaleClass | null): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getDisplayVariant(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getDisplayVariantSync(): string | null;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getDisplayName(var0: LocaleClass | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    getDisplayNameSync(var0: LocaleClass | null): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getDisplayName(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getDisplayNameSync(): string | null;
    /**
     * @param var0 original type: 'java.util.List'
     * @param var1 original type: 'java.util.Collection'
     * @return original return type: 'java.util.List'
     */
    static filterTags(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var1: java_util_Collection | JavaInterfaceProxy<java_util_CollectionInterface> | null): Promise<java_util_List | null>;
    /**
     * @param var0 original type: 'java.util.List'
     * @param var1 original type: 'java.util.Collection'
     * @return original return type: 'java.util.List'
     */
    static filterTagsSync(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var1: java_util_Collection | JavaInterfaceProxy<java_util_CollectionInterface> | null): java_util_List | null;
    /**
     * @param var0 original type: 'java.util.List'
     * @param var1 original type: 'java.util.Collection'
     * @param var2 original type: 'java.util.Locale$FilteringMode'
     * @return original return type: 'java.util.List'
     */
    static filterTags(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var1: java_util_Collection | JavaInterfaceProxy<java_util_CollectionInterface> | null, var2: java_util_Locale$FilteringMode | null): Promise<java_util_List | null>;
    /**
     * @param var0 original type: 'java.util.List'
     * @param var1 original type: 'java.util.Collection'
     * @param var2 original type: 'java.util.Locale$FilteringMode'
     * @return original return type: 'java.util.List'
     */
    static filterTagsSync(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var1: java_util_Collection | JavaInterfaceProxy<java_util_CollectionInterface> | null, var2: java_util_Locale$FilteringMode | null): java_util_List | null;
    /**
     * @param var0 original type: 'java.util.List'
     * @param var1 original type: 'java.util.Collection'
     * @return original return type: 'java.lang.String'
     */
    static lookupTag(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var1: java_util_Collection | JavaInterfaceProxy<java_util_CollectionInterface> | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.util.List'
     * @param var1 original type: 'java.util.Collection'
     * @return original return type: 'java.lang.String'
     */
    static lookupTagSync(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var1: java_util_Collection | JavaInterfaceProxy<java_util_CollectionInterface> | null): string | null;
    /**
     * @return original return type: 'java.util.Locale[]'
     */
    static getAvailableLocales(): Promise<(Locale | null)[] | null>;
    /**
     * @return original return type: 'java.util.Locale[]'
     */
    static getAvailableLocalesSync(): (Locale | null)[] | null;
    /**
     * @return original return type: 'java.lang.String[]'
     */
    static getISOCountries(): Promise<(string | null)[] | null>;
    /**
     * @return original return type: 'java.lang.String[]'
     */
    static getISOCountriesSync(): (string | null)[] | null;
    /**
     * @param var0 original type: 'java.util.Locale$IsoCountryCode'
     * @return original return type: 'java.util.Set'
     */
    static getISOCountries(var0: java_util_Locale$IsoCountryCode | null): Promise<java_util_Set | null>;
    /**
     * @param var0 original type: 'java.util.Locale$IsoCountryCode'
     * @return original return type: 'java.util.Set'
     */
    static getISOCountriesSync(var0: java_util_Locale$IsoCountryCode | null): java_util_Set | null;
    /**
     * @return original return type: 'java.lang.String[]'
     */
    static getISOLanguages(): Promise<(string | null)[] | null>;
    /**
     * @return original return type: 'java.lang.String[]'
     */
    static getISOLanguagesSync(): (string | null)[] | null;
    /**
     * @return original return type: 'java.util.Locale'
     */
    stripExtensions(): Promise<Locale | null>;
    /**
     * @return original return type: 'java.util.Locale'
     */
    stripExtensionsSync(): Locale | null;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'java.lang.String'
     */
    getExtension(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'java.lang.String'
     */
    getExtensionSync(var0: string | null): string | null;
    /**
     * @return original return type: 'java.util.Set'
     */
    getExtensionKeys(): Promise<java_util_Set | null>;
    /**
     * @return original return type: 'java.util.Set'
     */
    getExtensionKeysSync(): java_util_Set | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    toLanguageTag(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toLanguageTagSync(): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.Locale'
     */
    static forLanguageTag(var0: string | null): Promise<Locale | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.Locale'
     */
    static forLanguageTagSync(var0: string | null): Locale | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getISO3Language(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getISO3LanguageSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getISO3Country(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getISO3CountrySync(): string | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.util.Locale'
     */
    static newInstance(var0: string | null, var1: string | null): Promise<Locale>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @return original return type: 'java.util.Locale'
     */
    static newInstance(var0: string | null, var1: string | null, var2: string | null): Promise<Locale>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.Locale'
     */
    static newInstance(var0: string | null): Promise<Locale>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     */
    constructor(var0: string | null, var1: string | null);
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     */
    constructor(var0: string | null, var1: string | null, var2: string | null);
    /**
     * @param var0 original type: 'java.lang.String'
     */
    constructor(var0: string | null);
}
declare const Locale_base: typeof LocaleClass;
/**
 * Class java.util.Locale.
 *
 * This actually imports the java class for further use.
 * The class {@link LocaleClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Locale extends Locale_base {
}
export default Locale;
//# sourceMappingURL=Locale.d.ts.map