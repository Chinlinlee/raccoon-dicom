import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { IntConsumer as java_util_function_IntConsumer, IntConsumerInterface as java_util_function_IntConsumerInterface } from "./function/IntConsumer";
import { Consumer as java_util_function_Consumer, ConsumerInterface as java_util_function_ConsumerInterface } from "./function/Consumer";
/**
 * This class just defines types, you should import {@link PrimitiveIterator$OfInt} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class PrimitiveIterator$OfIntClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    forEachRemaining(var0: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    forEachRemainingSync(var0: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'void'
     */
    forEachRemaining(var0: java_util_function_IntConsumer | JavaInterfaceProxy<java_util_function_IntConsumerInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'void'
     */
    forEachRemainingSync(var0: java_util_function_IntConsumer | JavaInterfaceProxy<java_util_function_IntConsumerInterface> | null): void;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    forEachRemaining(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    forEachRemainingSync(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): void;
    /**
     * @return original return type: 'java.lang.Object'
     */
    next(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    nextSync(): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.lang.Integer'
     */
    next(): Promise<number | null>;
    /**
     * @return original return type: 'java.lang.Integer'
     */
    nextSync(): number | null;
    /**
     * @return original return type: 'int'
     */
    nextInt(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    nextIntSync(): number;
    /**
     * @return original return type: 'void'
     */
    remove(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    removeSync(): void;
    /**
     * @return original return type: 'boolean'
     */
    hasNext(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasNextSync(): boolean;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createPrimitiveIterator$OfIntProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface PrimitiveIterator$OfIntInterface {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    forEachRemaining?(var0: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'void'
     */
    forEachRemaining?(var0: java_util_function_IntConsumer | JavaInterfaceProxy<java_util_function_IntConsumerInterface> | null): void;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    forEachRemaining?(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): void;
    /**
     * @return original return type: 'java.lang.Object'
     */
    next?(): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.lang.Integer'
     */
    next?(): number | null;
    /**
     * @return original return type: 'int'
     */
    nextInt(): number;
    /**
     * @return original return type: 'void'
     */
    remove?(): void;
    /**
     * @return original return type: 'boolean'
     */
    hasNext(): boolean;
}
/**
 * Create a proxy for the {@link PrimitiveIterator$OfInt} interface.
 * All required methods in {@link PrimitiveIterator$OfIntInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createPrimitiveIterator$OfIntProxy(methods: PrimitiveIterator$OfIntInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<PrimitiveIterator$OfIntInterface>;
declare const PrimitiveIterator$OfInt_base: typeof PrimitiveIterator$OfIntClass;
/**
 * Class java.util.PrimitiveIterator$OfInt.
 *
 * This actually imports the java class for further use.
 * The class {@link PrimitiveIterator$OfIntClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class PrimitiveIterator$OfInt extends PrimitiveIterator$OfInt_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default PrimitiveIterator$OfInt;
//# sourceMappingURL=PrimitiveIterator$OfInt.d.ts.map