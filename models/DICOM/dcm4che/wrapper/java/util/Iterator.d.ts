import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Consumer as java_util_function_Consumer, ConsumerInterface as java_util_function_ConsumerInterface } from "./function/Consumer";
/**
 * This class just defines types, you should import {@link Iterator} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IteratorClass extends JavaClass {
    /**
     * @return original return type: 'void'
     */
    remove(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    removeSync(): void;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    forEachRemaining(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    forEachRemainingSync(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): void;
    /**
     * @return original return type: 'boolean'
     */
    hasNext(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasNextSync(): boolean;
    /**
     * @return original return type: 'java.lang.Object'
     */
    next(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    nextSync(): BasicOrJavaType | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIteratorProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IteratorInterface {
    /**
     * @return original return type: 'void'
     */
    remove?(): void;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    forEachRemaining?(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): void;
    /**
     * @return original return type: 'boolean'
     */
    hasNext(): boolean;
    /**
     * @return original return type: 'java.lang.Object'
     */
    next(): BasicOrJavaType | null;
}
/**
 * Create a proxy for the {@link Iterator} interface.
 * All required methods in {@link IteratorInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIteratorProxy(methods: IteratorInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IteratorInterface>;
declare const Iterator_base: typeof IteratorClass;
/**
 * Class java.util.Iterator.
 *
 * This actually imports the java class for further use.
 * The class {@link IteratorClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Iterator extends Iterator_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Iterator;
//# sourceMappingURL=Iterator.d.ts.map