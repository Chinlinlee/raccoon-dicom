import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Iterator as java_util_Iterator } from "./Iterator";
/**
 * This class just defines types, you should import {@link Enumeration} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class EnumerationClass extends JavaClass {
    /**
     * @return original return type: 'java.util.Iterator'
     */
    asIterator(): Promise<java_util_Iterator | null>;
    /**
     * @return original return type: 'java.util.Iterator'
     */
    asIteratorSync(): java_util_Iterator | null;
    /**
     * @return original return type: 'boolean'
     */
    hasMoreElements(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasMoreElementsSync(): boolean;
    /**
     * @return original return type: 'java.lang.Object'
     */
    nextElement(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    nextElementSync(): BasicOrJavaType | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createEnumerationProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface EnumerationInterface {
    /**
     * @return original return type: 'java.util.Iterator'
     */
    asIterator?(): java_util_Iterator | null;
    /**
     * @return original return type: 'boolean'
     */
    hasMoreElements(): boolean;
    /**
     * @return original return type: 'java.lang.Object'
     */
    nextElement(): BasicOrJavaType | null;
}
/**
 * Create a proxy for the {@link Enumeration} interface.
 * All required methods in {@link EnumerationInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createEnumerationProxy(methods: EnumerationInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<EnumerationInterface>;
declare const Enumeration_base: typeof EnumerationClass;
/**
 * Class java.util.Enumeration.
 *
 * This actually imports the java class for further use.
 * The class {@link EnumerationClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Enumeration extends Enumeration_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Enumeration;
//# sourceMappingURL=Enumeration.d.ts.map