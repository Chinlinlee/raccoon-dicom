import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Supplier as java_util_function_Supplier, SupplierInterface as java_util_function_SupplierInterface } from "./../function/Supplier";
import { BiConsumer as java_util_function_BiConsumer, BiConsumerInterface as java_util_function_BiConsumerInterface } from "./../function/BiConsumer";
import { BinaryOperator as java_util_function_BinaryOperator, BinaryOperatorInterface as java_util_function_BinaryOperatorInterface } from "./../function/BinaryOperator";
import { Function as java_util_function_Function, FunctionInterface as java_util_function_FunctionInterface } from "./../function/Function";
import { Collector$Characteristics as java_util_stream_Collector$Characteristics } from "./Collector$Characteristics";
import { Set as java_util_Set } from "./../Set";
/**
 * This class just defines types, you should import {@link Collector} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class CollectorClass extends JavaClass {
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @param var1 original type: 'java.util.function.BiConsumer'
     * @param var2 original type: 'java.util.function.BinaryOperator'
     * @param var3 original type: 'java.util.function.Function'
     * @param var4 original type: 'java.util.stream.Collector$Characteristics[]'
     * @return original return type: 'java.util.stream.Collector'
     */
    static of(var0: java_util_function_Supplier | JavaInterfaceProxy<java_util_function_SupplierInterface> | null, var1: java_util_function_BiConsumer | JavaInterfaceProxy<java_util_function_BiConsumerInterface> | null, var2: java_util_function_BinaryOperator | JavaInterfaceProxy<java_util_function_BinaryOperatorInterface> | null, var3: java_util_function_Function | JavaInterfaceProxy<java_util_function_FunctionInterface> | null, var4: (java_util_stream_Collector$Characteristics | null)[] | null): Promise<Collector | null>;
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @param var1 original type: 'java.util.function.BiConsumer'
     * @param var2 original type: 'java.util.function.BinaryOperator'
     * @param var3 original type: 'java.util.function.Function'
     * @param var4 original type: 'java.util.stream.Collector$Characteristics[]'
     * @return original return type: 'java.util.stream.Collector'
     */
    static ofSync(var0: java_util_function_Supplier | JavaInterfaceProxy<java_util_function_SupplierInterface> | null, var1: java_util_function_BiConsumer | JavaInterfaceProxy<java_util_function_BiConsumerInterface> | null, var2: java_util_function_BinaryOperator | JavaInterfaceProxy<java_util_function_BinaryOperatorInterface> | null, var3: java_util_function_Function | JavaInterfaceProxy<java_util_function_FunctionInterface> | null, var4: (java_util_stream_Collector$Characteristics | null)[] | null): Collector | null;
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @param var1 original type: 'java.util.function.BiConsumer'
     * @param var2 original type: 'java.util.function.BinaryOperator'
     * @param var3 original type: 'java.util.stream.Collector$Characteristics[]'
     * @return original return type: 'java.util.stream.Collector'
     */
    static of(var0: java_util_function_Supplier | JavaInterfaceProxy<java_util_function_SupplierInterface> | null, var1: java_util_function_BiConsumer | JavaInterfaceProxy<java_util_function_BiConsumerInterface> | null, var2: java_util_function_BinaryOperator | JavaInterfaceProxy<java_util_function_BinaryOperatorInterface> | null, var3: (java_util_stream_Collector$Characteristics | null)[] | null): Promise<Collector | null>;
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @param var1 original type: 'java.util.function.BiConsumer'
     * @param var2 original type: 'java.util.function.BinaryOperator'
     * @param var3 original type: 'java.util.stream.Collector$Characteristics[]'
     * @return original return type: 'java.util.stream.Collector'
     */
    static ofSync(var0: java_util_function_Supplier | JavaInterfaceProxy<java_util_function_SupplierInterface> | null, var1: java_util_function_BiConsumer | JavaInterfaceProxy<java_util_function_BiConsumerInterface> | null, var2: java_util_function_BinaryOperator | JavaInterfaceProxy<java_util_function_BinaryOperatorInterface> | null, var3: (java_util_stream_Collector$Characteristics | null)[] | null): Collector | null;
    /**
     * @return original return type: 'java.util.Set'
     */
    characteristics(): Promise<java_util_Set | null>;
    /**
     * @return original return type: 'java.util.Set'
     */
    characteristicsSync(): java_util_Set | null;
    /**
     * @return original return type: 'java.util.function.BinaryOperator'
     */
    combiner(): Promise<java_util_function_BinaryOperator | null>;
    /**
     * @return original return type: 'java.util.function.BinaryOperator'
     */
    combinerSync(): java_util_function_BinaryOperator | null;
    /**
     * @return original return type: 'java.util.function.Supplier'
     */
    supplier(): Promise<java_util_function_Supplier | null>;
    /**
     * @return original return type: 'java.util.function.Supplier'
     */
    supplierSync(): java_util_function_Supplier | null;
    /**
     * @return original return type: 'java.util.function.BiConsumer'
     */
    accumulator(): Promise<java_util_function_BiConsumer | null>;
    /**
     * @return original return type: 'java.util.function.BiConsumer'
     */
    accumulatorSync(): java_util_function_BiConsumer | null;
    /**
     * @return original return type: 'java.util.function.Function'
     */
    finisher(): Promise<java_util_function_Function | null>;
    /**
     * @return original return type: 'java.util.function.Function'
     */
    finisherSync(): java_util_function_Function | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createCollectorProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface CollectorInterface {
    /**
     * @return original return type: 'java.util.Set'
     */
    characteristics(): java_util_Set | null;
    /**
     * @return original return type: 'java.util.function.BinaryOperator'
     */
    combiner(): java_util_function_BinaryOperator | null;
    /**
     * @return original return type: 'java.util.function.Supplier'
     */
    supplier(): java_util_function_Supplier | null;
    /**
     * @return original return type: 'java.util.function.BiConsumer'
     */
    accumulator(): java_util_function_BiConsumer | null;
    /**
     * @return original return type: 'java.util.function.Function'
     */
    finisher(): java_util_function_Function | null;
}
/**
 * Create a proxy for the {@link Collector} interface.
 * All required methods in {@link CollectorInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createCollectorProxy(methods: CollectorInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<CollectorInterface>;
declare const Collector_base: typeof CollectorClass;
/**
 * Class java.util.stream.Collector.
 *
 * This actually imports the java class for further use.
 * The class {@link CollectorClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Collector extends Collector_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Collector;
//# sourceMappingURL=Collector.d.ts.map