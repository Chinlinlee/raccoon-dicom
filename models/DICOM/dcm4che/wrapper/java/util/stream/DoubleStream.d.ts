import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { OptionalDouble as java_util_OptionalDouble } from "./../OptionalDouble";
import { PrimitiveIterator$OfDouble as java_util_PrimitiveIterator$OfDouble } from "./../PrimitiveIterator$OfDouble";
import { Iterator as java_util_Iterator } from "./../Iterator";
import { DoubleUnaryOperator as java_util_function_DoubleUnaryOperator, DoubleUnaryOperatorInterface as java_util_function_DoubleUnaryOperatorInterface } from "./../function/DoubleUnaryOperator";
import { Supplier as java_util_function_Supplier, SupplierInterface as java_util_function_SupplierInterface } from "./../function/Supplier";
import { ObjDoubleConsumer as java_util_function_ObjDoubleConsumer, ObjDoubleConsumerInterface as java_util_function_ObjDoubleConsumerInterface } from "./../function/ObjDoubleConsumer";
import { BiConsumer as java_util_function_BiConsumer, BiConsumerInterface as java_util_function_BiConsumerInterface } from "./../function/BiConsumer";
import { Double as java_lang_Double } from "./../../lang/Double";
import { DoubleStream$Builder as java_util_stream_DoubleStream$Builder } from "./DoubleStream$Builder";
import { Long as java_lang_Long } from "./../../lang/Long";
import { Spliterator as java_util_Spliterator } from "./../Spliterator";
import { Spliterator$OfDouble as java_util_Spliterator$OfDouble } from "./../Spliterator$OfDouble";
import { DoublePredicate as java_util_function_DoublePredicate, DoublePredicateInterface as java_util_function_DoublePredicateInterface } from "./../function/DoublePredicate";
import { DoubleFunction as java_util_function_DoubleFunction, DoubleFunctionInterface as java_util_function_DoubleFunctionInterface } from "./../function/DoubleFunction";
import { DoubleConsumer as java_util_function_DoubleConsumer, DoubleConsumerInterface as java_util_function_DoubleConsumerInterface } from "./../function/DoubleConsumer";
import { DoubleBinaryOperator as java_util_function_DoubleBinaryOperator, DoubleBinaryOperatorInterface as java_util_function_DoubleBinaryOperatorInterface } from "./../function/DoubleBinaryOperator";
import { BaseStream as java_util_stream_BaseStream } from "./BaseStream";
import { Stream as java_util_stream_Stream } from "./Stream";
import { DoubleSupplier as java_util_function_DoubleSupplier, DoubleSupplierInterface as java_util_function_DoubleSupplierInterface } from "./../function/DoubleSupplier";
import { IntStream as java_util_stream_IntStream } from "./IntStream";
import { DoubleToIntFunction as java_util_function_DoubleToIntFunction, DoubleToIntFunctionInterface as java_util_function_DoubleToIntFunctionInterface } from "./../function/DoubleToIntFunction";
import { LongStream as java_util_stream_LongStream } from "./LongStream";
import { DoubleToLongFunction as java_util_function_DoubleToLongFunction, DoubleToLongFunctionInterface as java_util_function_DoubleToLongFunctionInterface } from "./../function/DoubleToLongFunction";
import { DoubleStream$DoubleMapMultiConsumer as java_util_stream_DoubleStream$DoubleMapMultiConsumer, DoubleStream$DoubleMapMultiConsumerInterface as java_util_stream_DoubleStream$DoubleMapMultiConsumerInterface } from "./DoubleStream$DoubleMapMultiConsumer";
import { DoubleSummaryStatistics as java_util_DoubleSummaryStatistics } from "./../DoubleSummaryStatistics";
import { Runnable as java_lang_Runnable, RunnableInterface as java_lang_RunnableInterface } from "./../../lang/Runnable";
/**
 * This class just defines types, you should import {@link DoubleStream} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DoubleStreamClass extends JavaClass {
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    min(): Promise<java_util_OptionalDouble | null>;
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    minSync(): java_util_OptionalDouble | null;
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    max(): Promise<java_util_OptionalDouble | null>;
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    maxSync(): java_util_OptionalDouble | null;
    /**
     * @return original return type: 'double[]'
     */
    toArray(): Promise<(number)[] | null>;
    /**
     * @return original return type: 'double[]'
     */
    toArraySync(): (number)[] | null;
    /**
     * @return original return type: 'java.util.PrimitiveIterator$OfDouble'
     */
    iterator(): Promise<java_util_PrimitiveIterator$OfDouble | null>;
    /**
     * @return original return type: 'java.util.PrimitiveIterator$OfDouble'
     */
    iteratorSync(): java_util_PrimitiveIterator$OfDouble | null;
    /**
     * @return original return type: 'java.util.Iterator'
     */
    iterator(): Promise<java_util_Iterator | null>;
    /**
     * @return original return type: 'java.util.Iterator'
     */
    iteratorSync(): java_util_Iterator | null;
    /**
     * @param var0 original type: 'java.util.function.DoubleUnaryOperator'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    map(var0: java_util_function_DoubleUnaryOperator | JavaInterfaceProxy<java_util_function_DoubleUnaryOperatorInterface> | null): Promise<DoubleStream | null>;
    /**
     * @param var0 original type: 'java.util.function.DoubleUnaryOperator'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    mapSync(var0: java_util_function_DoubleUnaryOperator | JavaInterfaceProxy<java_util_function_DoubleUnaryOperatorInterface> | null): DoubleStream | null;
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @param var1 original type: 'java.util.function.ObjDoubleConsumer'
     * @param var2 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'java.lang.Object'
     */
    collect(var0: java_util_function_Supplier | JavaInterfaceProxy<java_util_function_SupplierInterface> | null, var1: java_util_function_ObjDoubleConsumer | JavaInterfaceProxy<java_util_function_ObjDoubleConsumerInterface> | null, var2: java_util_function_BiConsumer | JavaInterfaceProxy<java_util_function_BiConsumerInterface> | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @param var1 original type: 'java.util.function.ObjDoubleConsumer'
     * @param var2 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'java.lang.Object'
     */
    collectSync(var0: java_util_function_Supplier | JavaInterfaceProxy<java_util_function_SupplierInterface> | null, var1: java_util_function_ObjDoubleConsumer | JavaInterfaceProxy<java_util_function_ObjDoubleConsumerInterface> | null, var2: java_util_function_BiConsumer | JavaInterfaceProxy<java_util_function_BiConsumerInterface> | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'double[]'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    static of(var0: (java_lang_Double | number)[] | null): Promise<DoubleStream | null>;
    /**
     * @param var0 original type: 'double[]'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    static ofSync(var0: (java_lang_Double | number)[] | null): DoubleStream | null;
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    static of(var0: java_lang_Double | number): Promise<DoubleStream | null>;
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    static ofSync(var0: java_lang_Double | number): DoubleStream | null;
    /**
     * @return original return type: 'long'
     */
    count(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    countSync(): number;
    /**
     * @return original return type: 'java.util.stream.DoubleStream$Builder'
     */
    static builder(): Promise<java_util_stream_DoubleStream$Builder | null>;
    /**
     * @return original return type: 'java.util.stream.DoubleStream$Builder'
     */
    static builderSync(): java_util_stream_DoubleStream$Builder | null;
    /**
     * @param var0 original type: 'java.util.stream.DoubleStream'
     * @param var1 original type: 'java.util.stream.DoubleStream'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    static concat(var0: DoubleStreamClass | JavaInterfaceProxy<DoubleStreamInterface> | null, var1: DoubleStreamClass | JavaInterfaceProxy<DoubleStreamInterface> | null): Promise<DoubleStream | null>;
    /**
     * @param var0 original type: 'java.util.stream.DoubleStream'
     * @param var1 original type: 'java.util.stream.DoubleStream'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    static concatSync(var0: DoubleStreamClass | JavaInterfaceProxy<DoubleStreamInterface> | null, var1: DoubleStreamClass | JavaInterfaceProxy<DoubleStreamInterface> | null): DoubleStream | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    limit(var0: java_lang_Long | bigint | number): Promise<DoubleStream | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    limitSync(var0: java_lang_Long | bigint | number): DoubleStream | null;
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    spliterator(): Promise<java_util_Spliterator | null>;
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    spliteratorSync(): java_util_Spliterator | null;
    /**
     * @return original return type: 'java.util.Spliterator$OfDouble'
     */
    spliterator(): Promise<java_util_Spliterator$OfDouble | null>;
    /**
     * @return original return type: 'java.util.Spliterator$OfDouble'
     */
    spliteratorSync(): java_util_Spliterator$OfDouble | null;
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    filter(var0: java_util_function_DoublePredicate | JavaInterfaceProxy<java_util_function_DoublePredicateInterface> | null): Promise<DoubleStream | null>;
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    filterSync(var0: java_util_function_DoublePredicate | JavaInterfaceProxy<java_util_function_DoublePredicateInterface> | null): DoubleStream | null;
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    static empty(): Promise<DoubleStream | null>;
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    static emptySync(): DoubleStream | null;
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'boolean'
     */
    anyMatch(var0: java_util_function_DoublePredicate | JavaInterfaceProxy<java_util_function_DoublePredicateInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'boolean'
     */
    anyMatchSync(var0: java_util_function_DoublePredicate | JavaInterfaceProxy<java_util_function_DoublePredicateInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.util.function.DoubleFunction'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    flatMap(var0: java_util_function_DoubleFunction | JavaInterfaceProxy<java_util_function_DoubleFunctionInterface> | null): Promise<DoubleStream | null>;
    /**
     * @param var0 original type: 'java.util.function.DoubleFunction'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    flatMapSync(var0: java_util_function_DoubleFunction | JavaInterfaceProxy<java_util_function_DoubleFunctionInterface> | null): DoubleStream | null;
    /**
     * @param var0 original type: 'java.util.function.DoubleConsumer'
     * @return original return type: 'void'
     */
    forEach(var0: java_util_function_DoubleConsumer | JavaInterfaceProxy<java_util_function_DoubleConsumerInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.function.DoubleConsumer'
     * @return original return type: 'void'
     */
    forEachSync(var0: java_util_function_DoubleConsumer | JavaInterfaceProxy<java_util_function_DoubleConsumerInterface> | null): void;
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    findAny(): Promise<java_util_OptionalDouble | null>;
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    findAnySync(): java_util_OptionalDouble | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    skip(var0: java_lang_Long | bigint | number): Promise<DoubleStream | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    skipSync(var0: java_lang_Long | bigint | number): DoubleStream | null;
    /**
     * @param var0 original type: 'java.util.function.DoubleConsumer'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    peek(var0: java_util_function_DoubleConsumer | JavaInterfaceProxy<java_util_function_DoubleConsumerInterface> | null): Promise<DoubleStream | null>;
    /**
     * @param var0 original type: 'java.util.function.DoubleConsumer'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    peekSync(var0: java_util_function_DoubleConsumer | JavaInterfaceProxy<java_util_function_DoubleConsumerInterface> | null): DoubleStream | null;
    /**
     * @return original return type: 'double'
     */
    sum(): Promise<number>;
    /**
     * @return original return type: 'double'
     */
    sumSync(): number;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'java.util.function.DoubleBinaryOperator'
     * @return original return type: 'double'
     */
    reduce(var0: java_lang_Double | number, var1: java_util_function_DoubleBinaryOperator | JavaInterfaceProxy<java_util_function_DoubleBinaryOperatorInterface> | null): Promise<number>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'java.util.function.DoubleBinaryOperator'
     * @return original return type: 'double'
     */
    reduceSync(var0: java_lang_Double | number, var1: java_util_function_DoubleBinaryOperator | JavaInterfaceProxy<java_util_function_DoubleBinaryOperatorInterface> | null): number;
    /**
     * @param var0 original type: 'java.util.function.DoubleBinaryOperator'
     * @return original return type: 'java.util.OptionalDouble'
     */
    reduce(var0: java_util_function_DoubleBinaryOperator | JavaInterfaceProxy<java_util_function_DoubleBinaryOperatorInterface> | null): Promise<java_util_OptionalDouble | null>;
    /**
     * @param var0 original type: 'java.util.function.DoubleBinaryOperator'
     * @return original return type: 'java.util.OptionalDouble'
     */
    reduceSync(var0: java_util_function_DoubleBinaryOperator | JavaInterfaceProxy<java_util_function_DoubleBinaryOperatorInterface> | null): java_util_OptionalDouble | null;
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    distinct(): Promise<DoubleStream | null>;
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    distinctSync(): DoubleStream | null;
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    findFirst(): Promise<java_util_OptionalDouble | null>;
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    findFirstSync(): java_util_OptionalDouble | null;
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'boolean'
     */
    allMatch(var0: java_util_function_DoublePredicate | JavaInterfaceProxy<java_util_function_DoublePredicateInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'boolean'
     */
    allMatchSync(var0: java_util_function_DoublePredicate | JavaInterfaceProxy<java_util_function_DoublePredicateInterface> | null): boolean;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    parallel(): Promise<java_util_stream_BaseStream | null>;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    parallelSync(): java_util_stream_BaseStream | null;
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    parallel(): Promise<DoubleStream | null>;
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    parallelSync(): DoubleStream | null;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'java.util.function.DoublePredicate'
     * @param var2 original type: 'java.util.function.DoubleUnaryOperator'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    static iterate(var0: java_lang_Double | number, var1: java_util_function_DoublePredicate | JavaInterfaceProxy<java_util_function_DoublePredicateInterface> | null, var2: java_util_function_DoubleUnaryOperator | JavaInterfaceProxy<java_util_function_DoubleUnaryOperatorInterface> | null): Promise<DoubleStream | null>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'java.util.function.DoublePredicate'
     * @param var2 original type: 'java.util.function.DoubleUnaryOperator'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    static iterateSync(var0: java_lang_Double | number, var1: java_util_function_DoublePredicate | JavaInterfaceProxy<java_util_function_DoublePredicateInterface> | null, var2: java_util_function_DoubleUnaryOperator | JavaInterfaceProxy<java_util_function_DoubleUnaryOperatorInterface> | null): DoubleStream | null;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'java.util.function.DoubleUnaryOperator'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    static iterate(var0: java_lang_Double | number, var1: java_util_function_DoubleUnaryOperator | JavaInterfaceProxy<java_util_function_DoubleUnaryOperatorInterface> | null): Promise<DoubleStream | null>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'java.util.function.DoubleUnaryOperator'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    static iterateSync(var0: java_lang_Double | number, var1: java_util_function_DoubleUnaryOperator | JavaInterfaceProxy<java_util_function_DoubleUnaryOperatorInterface> | null): DoubleStream | null;
    /**
     * @param var0 original type: 'java.util.function.DoubleFunction'
     * @return original return type: 'java.util.stream.Stream'
     */
    mapToObj(var0: java_util_function_DoubleFunction | JavaInterfaceProxy<java_util_function_DoubleFunctionInterface> | null): Promise<java_util_stream_Stream | null>;
    /**
     * @param var0 original type: 'java.util.function.DoubleFunction'
     * @return original return type: 'java.util.stream.Stream'
     */
    mapToObjSync(var0: java_util_function_DoubleFunction | JavaInterfaceProxy<java_util_function_DoubleFunctionInterface> | null): java_util_stream_Stream | null;
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    sorted(): Promise<DoubleStream | null>;
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    sortedSync(): DoubleStream | null;
    /**
     * @param var0 original type: 'java.util.function.DoubleSupplier'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    static generate(var0: java_util_function_DoubleSupplier | JavaInterfaceProxy<java_util_function_DoubleSupplierInterface> | null): Promise<DoubleStream | null>;
    /**
     * @param var0 original type: 'java.util.function.DoubleSupplier'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    static generateSync(var0: java_util_function_DoubleSupplier | JavaInterfaceProxy<java_util_function_DoubleSupplierInterface> | null): DoubleStream | null;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    sequential(): Promise<java_util_stream_BaseStream | null>;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    sequentialSync(): java_util_stream_BaseStream | null;
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    sequential(): Promise<DoubleStream | null>;
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    sequentialSync(): DoubleStream | null;
    /**
     * @param var0 original type: 'java.util.function.DoubleToIntFunction'
     * @return original return type: 'java.util.stream.IntStream'
     */
    mapToInt(var0: java_util_function_DoubleToIntFunction | JavaInterfaceProxy<java_util_function_DoubleToIntFunctionInterface> | null): Promise<java_util_stream_IntStream | null>;
    /**
     * @param var0 original type: 'java.util.function.DoubleToIntFunction'
     * @return original return type: 'java.util.stream.IntStream'
     */
    mapToIntSync(var0: java_util_function_DoubleToIntFunction | JavaInterfaceProxy<java_util_function_DoubleToIntFunctionInterface> | null): java_util_stream_IntStream | null;
    /**
     * @param var0 original type: 'java.util.function.DoubleToLongFunction'
     * @return original return type: 'java.util.stream.LongStream'
     */
    mapToLong(var0: java_util_function_DoubleToLongFunction | JavaInterfaceProxy<java_util_function_DoubleToLongFunctionInterface> | null): Promise<java_util_stream_LongStream | null>;
    /**
     * @param var0 original type: 'java.util.function.DoubleToLongFunction'
     * @return original return type: 'java.util.stream.LongStream'
     */
    mapToLongSync(var0: java_util_function_DoubleToLongFunction | JavaInterfaceProxy<java_util_function_DoubleToLongFunctionInterface> | null): java_util_stream_LongStream | null;
    /**
     * @param var0 original type: 'java.util.stream.DoubleStream$DoubleMapMultiConsumer'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    mapMulti(var0: java_util_stream_DoubleStream$DoubleMapMultiConsumer | JavaInterfaceProxy<java_util_stream_DoubleStream$DoubleMapMultiConsumerInterface> | null): Promise<DoubleStream | null>;
    /**
     * @param var0 original type: 'java.util.stream.DoubleStream$DoubleMapMultiConsumer'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    mapMultiSync(var0: java_util_stream_DoubleStream$DoubleMapMultiConsumer | JavaInterfaceProxy<java_util_stream_DoubleStream$DoubleMapMultiConsumerInterface> | null): DoubleStream | null;
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    takeWhile(var0: java_util_function_DoublePredicate | JavaInterfaceProxy<java_util_function_DoublePredicateInterface> | null): Promise<DoubleStream | null>;
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    takeWhileSync(var0: java_util_function_DoublePredicate | JavaInterfaceProxy<java_util_function_DoublePredicateInterface> | null): DoubleStream | null;
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    dropWhile(var0: java_util_function_DoublePredicate | JavaInterfaceProxy<java_util_function_DoublePredicateInterface> | null): Promise<DoubleStream | null>;
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    dropWhileSync(var0: java_util_function_DoublePredicate | JavaInterfaceProxy<java_util_function_DoublePredicateInterface> | null): DoubleStream | null;
    /**
     * @param var0 original type: 'java.util.function.DoubleConsumer'
     * @return original return type: 'void'
     */
    forEachOrdered(var0: java_util_function_DoubleConsumer | JavaInterfaceProxy<java_util_function_DoubleConsumerInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.function.DoubleConsumer'
     * @return original return type: 'void'
     */
    forEachOrderedSync(var0: java_util_function_DoubleConsumer | JavaInterfaceProxy<java_util_function_DoubleConsumerInterface> | null): void;
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'boolean'
     */
    noneMatch(var0: java_util_function_DoublePredicate | JavaInterfaceProxy<java_util_function_DoublePredicateInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'boolean'
     */
    noneMatchSync(var0: java_util_function_DoublePredicate | JavaInterfaceProxy<java_util_function_DoublePredicateInterface> | null): boolean;
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    average(): Promise<java_util_OptionalDouble | null>;
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    averageSync(): java_util_OptionalDouble | null;
    /**
     * @return original return type: 'java.util.DoubleSummaryStatistics'
     */
    summaryStatistics(): Promise<java_util_DoubleSummaryStatistics | null>;
    /**
     * @return original return type: 'java.util.DoubleSummaryStatistics'
     */
    summaryStatisticsSync(): java_util_DoubleSummaryStatistics | null;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    boxed(): Promise<java_util_stream_Stream | null>;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    boxedSync(): java_util_stream_Stream | null;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @return original return type: 'boolean'
     */
    isParallel(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isParallelSync(): boolean;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    unordered(): Promise<java_util_stream_BaseStream | null>;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    unorderedSync(): java_util_stream_BaseStream | null;
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.util.stream.BaseStream'
     */
    onClose(var0: java_lang_Runnable | JavaInterfaceProxy<java_lang_RunnableInterface> | null): Promise<java_util_stream_BaseStream | null>;
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.util.stream.BaseStream'
     */
    onCloseSync(var0: java_lang_Runnable | JavaInterfaceProxy<java_lang_RunnableInterface> | null): java_util_stream_BaseStream | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createDoubleStreamProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface DoubleStreamInterface {
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    min(): java_util_OptionalDouble | null;
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    max(): java_util_OptionalDouble | null;
    /**
     * @return original return type: 'double[]'
     */
    toArray(): (number)[] | null;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @return original return type: 'java.util.PrimitiveIterator$OfDouble'
     */
    iterator?(): java_util_PrimitiveIterator$OfDouble | null;
    /**
     * @return original return type: 'java.util.Iterator'
     */
    iterator?(): java_util_Iterator | null;
    /**
     * @param var0 original type: 'java.util.function.DoubleUnaryOperator'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    map(var0: java_util_function_DoubleUnaryOperator | JavaInterfaceProxy<java_util_function_DoubleUnaryOperatorInterface> | null): DoubleStream | null;
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @param var1 original type: 'java.util.function.ObjDoubleConsumer'
     * @param var2 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'java.lang.Object'
     */
    collect(var0: java_util_function_Supplier | JavaInterfaceProxy<java_util_function_SupplierInterface> | null, var1: java_util_function_ObjDoubleConsumer | JavaInterfaceProxy<java_util_function_ObjDoubleConsumerInterface> | null, var2: java_util_function_BiConsumer | JavaInterfaceProxy<java_util_function_BiConsumerInterface> | null): BasicOrJavaType | null;
    /**
     * @return original return type: 'long'
     */
    count(): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    limit(var0: java_lang_Long | bigint | number): DoubleStream | null;
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    spliterator?(): java_util_Spliterator | null;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @return original return type: 'java.util.Spliterator$OfDouble'
     */
    spliterator?(): java_util_Spliterator$OfDouble | null;
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    filter(var0: java_util_function_DoublePredicate | JavaInterfaceProxy<java_util_function_DoublePredicateInterface> | null): DoubleStream | null;
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'boolean'
     */
    anyMatch(var0: java_util_function_DoublePredicate | JavaInterfaceProxy<java_util_function_DoublePredicateInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.util.function.DoubleFunction'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    flatMap(var0: java_util_function_DoubleFunction | JavaInterfaceProxy<java_util_function_DoubleFunctionInterface> | null): DoubleStream | null;
    /**
     * @param var0 original type: 'java.util.function.DoubleConsumer'
     * @return original return type: 'void'
     */
    forEach(var0: java_util_function_DoubleConsumer | JavaInterfaceProxy<java_util_function_DoubleConsumerInterface> | null): void;
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    findAny(): java_util_OptionalDouble | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    skip(var0: java_lang_Long | bigint | number): DoubleStream | null;
    /**
     * @param var0 original type: 'java.util.function.DoubleConsumer'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    peek(var0: java_util_function_DoubleConsumer | JavaInterfaceProxy<java_util_function_DoubleConsumerInterface> | null): DoubleStream | null;
    /**
     * @return original return type: 'double'
     */
    sum(): number;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'java.util.function.DoubleBinaryOperator'
     * @return original return type: 'double'
     */
    reduce(var0: java_lang_Double | number, var1: java_util_function_DoubleBinaryOperator | JavaInterfaceProxy<java_util_function_DoubleBinaryOperatorInterface> | null): number;
    /**
     * @param var0 original type: 'java.util.function.DoubleBinaryOperator'
     * @return original return type: 'java.util.OptionalDouble'
     */
    reduce(var0: java_util_function_DoubleBinaryOperator | JavaInterfaceProxy<java_util_function_DoubleBinaryOperatorInterface> | null): java_util_OptionalDouble | null;
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    distinct(): DoubleStream | null;
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    findFirst(): java_util_OptionalDouble | null;
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'boolean'
     */
    allMatch(var0: java_util_function_DoublePredicate | JavaInterfaceProxy<java_util_function_DoublePredicateInterface> | null): boolean;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    parallel?(): java_util_stream_BaseStream | null;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    parallel?(): DoubleStream | null;
    /**
     * @param var0 original type: 'java.util.function.DoubleFunction'
     * @return original return type: 'java.util.stream.Stream'
     */
    mapToObj(var0: java_util_function_DoubleFunction | JavaInterfaceProxy<java_util_function_DoubleFunctionInterface> | null): java_util_stream_Stream | null;
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    sorted(): DoubleStream | null;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    sequential?(): java_util_stream_BaseStream | null;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    sequential?(): DoubleStream | null;
    /**
     * @param var0 original type: 'java.util.function.DoubleToIntFunction'
     * @return original return type: 'java.util.stream.IntStream'
     */
    mapToInt(var0: java_util_function_DoubleToIntFunction | JavaInterfaceProxy<java_util_function_DoubleToIntFunctionInterface> | null): java_util_stream_IntStream | null;
    /**
     * @param var0 original type: 'java.util.function.DoubleToLongFunction'
     * @return original return type: 'java.util.stream.LongStream'
     */
    mapToLong(var0: java_util_function_DoubleToLongFunction | JavaInterfaceProxy<java_util_function_DoubleToLongFunctionInterface> | null): java_util_stream_LongStream | null;
    /**
     * @param var0 original type: 'java.util.stream.DoubleStream$DoubleMapMultiConsumer'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    mapMulti?(var0: java_util_stream_DoubleStream$DoubleMapMultiConsumer | JavaInterfaceProxy<java_util_stream_DoubleStream$DoubleMapMultiConsumerInterface> | null): DoubleStream | null;
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    takeWhile?(var0: java_util_function_DoublePredicate | JavaInterfaceProxy<java_util_function_DoublePredicateInterface> | null): DoubleStream | null;
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    dropWhile?(var0: java_util_function_DoublePredicate | JavaInterfaceProxy<java_util_function_DoublePredicateInterface> | null): DoubleStream | null;
    /**
     * @param var0 original type: 'java.util.function.DoubleConsumer'
     * @return original return type: 'void'
     */
    forEachOrdered(var0: java_util_function_DoubleConsumer | JavaInterfaceProxy<java_util_function_DoubleConsumerInterface> | null): void;
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'boolean'
     */
    noneMatch(var0: java_util_function_DoublePredicate | JavaInterfaceProxy<java_util_function_DoublePredicateInterface> | null): boolean;
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    average(): java_util_OptionalDouble | null;
    /**
     * @return original return type: 'java.util.DoubleSummaryStatistics'
     */
    summaryStatistics(): java_util_DoubleSummaryStatistics | null;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    boxed(): java_util_stream_Stream | null;
    /**
     * @return original return type: 'void'
     */
    close(): void;
    /**
     * @return original return type: 'boolean'
     */
    isParallel(): boolean;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    unordered(): java_util_stream_BaseStream | null;
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.util.stream.BaseStream'
     */
    onClose(var0: java_lang_Runnable | JavaInterfaceProxy<java_lang_RunnableInterface> | null): java_util_stream_BaseStream | null;
}
/**
 * Create a proxy for the {@link DoubleStream} interface.
 * All required methods in {@link DoubleStreamInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createDoubleStreamProxy(methods: DoubleStreamInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<DoubleStreamInterface>;
declare const DoubleStream_base: typeof DoubleStreamClass;
/**
 * Class java.util.stream.DoubleStream.
 *
 * This actually imports the java class for further use.
 * The class {@link DoubleStreamClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DoubleStream extends DoubleStream_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default DoubleStream;
//# sourceMappingURL=DoubleStream.d.ts.map