import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Stream as java_util_stream_Stream } from "./Stream";
import { Consumer as java_util_function_Consumer, ConsumerInterface as java_util_function_ConsumerInterface } from "./../function/Consumer";
/**
 * This class just defines types, you should import {@link Stream$Builder} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Stream$BuilderClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.util.stream.Stream$Builder'
     */
    add(var0: BasicOrJavaType | null): Promise<Stream$Builder | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.util.stream.Stream$Builder'
     */
    addSync(var0: BasicOrJavaType | null): Stream$Builder | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    accept(var0: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    acceptSync(var0: BasicOrJavaType | null): void;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    build(): Promise<java_util_stream_Stream | null>;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    buildSync(): java_util_stream_Stream | null;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'java.util.function.Consumer'
     */
    andThen(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): Promise<java_util_function_Consumer | null>;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'java.util.function.Consumer'
     */
    andThenSync(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): java_util_function_Consumer | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createStream$BuilderProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface Stream$BuilderInterface {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.util.stream.Stream$Builder'
     */
    add?(var0: BasicOrJavaType | null): Stream$Builder | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    accept(var0: BasicOrJavaType | null): void;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    build(): java_util_stream_Stream | null;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'java.util.function.Consumer'
     */
    andThen?(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): java_util_function_Consumer | null;
}
/**
 * Create a proxy for the {@link Stream$Builder} interface.
 * All required methods in {@link Stream$BuilderInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createStream$BuilderProxy(methods: Stream$BuilderInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<Stream$BuilderInterface>;
declare const Stream$Builder_base: typeof Stream$BuilderClass;
/**
 * Class java.util.stream.Stream$Builder.
 *
 * This actually imports the java class for further use.
 * The class {@link Stream$BuilderClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Stream$Builder extends Stream$Builder_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Stream$Builder;
//# sourceMappingURL=Stream$Builder.d.ts.map