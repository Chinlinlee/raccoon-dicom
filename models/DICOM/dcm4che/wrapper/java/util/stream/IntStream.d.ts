import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { OptionalInt as java_util_OptionalInt } from "./../OptionalInt";
import { Iterator as java_util_Iterator } from "./../Iterator";
import { PrimitiveIterator$OfInt as java_util_PrimitiveIterator$OfInt } from "./../PrimitiveIterator$OfInt";
import { IntUnaryOperator as java_util_function_IntUnaryOperator, IntUnaryOperatorInterface as java_util_function_IntUnaryOperatorInterface } from "./../function/IntUnaryOperator";
import { Supplier as java_util_function_Supplier, SupplierInterface as java_util_function_SupplierInterface } from "./../function/Supplier";
import { ObjIntConsumer as java_util_function_ObjIntConsumer, ObjIntConsumerInterface as java_util_function_ObjIntConsumerInterface } from "./../function/ObjIntConsumer";
import { BiConsumer as java_util_function_BiConsumer, BiConsumerInterface as java_util_function_BiConsumerInterface } from "./../function/BiConsumer";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
import { IntStream$Builder as java_util_stream_IntStream$Builder } from "./IntStream$Builder";
import { Long as java_lang_Long } from "./../../lang/Long";
import { Spliterator$OfInt as java_util_Spliterator$OfInt } from "./../Spliterator$OfInt";
import { Spliterator as java_util_Spliterator } from "./../Spliterator";
import { IntPredicate as java_util_function_IntPredicate, IntPredicateInterface as java_util_function_IntPredicateInterface } from "./../function/IntPredicate";
import { IntFunction as java_util_function_IntFunction, IntFunctionInterface as java_util_function_IntFunctionInterface } from "./../function/IntFunction";
import { IntConsumer as java_util_function_IntConsumer, IntConsumerInterface as java_util_function_IntConsumerInterface } from "./../function/IntConsumer";
import { IntBinaryOperator as java_util_function_IntBinaryOperator, IntBinaryOperatorInterface as java_util_function_IntBinaryOperatorInterface } from "./../function/IntBinaryOperator";
import { BaseStream as java_util_stream_BaseStream } from "./BaseStream";
import { Stream as java_util_stream_Stream } from "./Stream";
import { IntSupplier as java_util_function_IntSupplier, IntSupplierInterface as java_util_function_IntSupplierInterface } from "./../function/IntSupplier";
import { LongStream as java_util_stream_LongStream } from "./LongStream";
import { IntToLongFunction as java_util_function_IntToLongFunction, IntToLongFunctionInterface as java_util_function_IntToLongFunctionInterface } from "./../function/IntToLongFunction";
import { DoubleStream as java_util_stream_DoubleStream } from "./DoubleStream";
import { IntToDoubleFunction as java_util_function_IntToDoubleFunction, IntToDoubleFunctionInterface as java_util_function_IntToDoubleFunctionInterface } from "./../function/IntToDoubleFunction";
import { IntStream$IntMapMultiConsumer as java_util_stream_IntStream$IntMapMultiConsumer, IntStream$IntMapMultiConsumerInterface as java_util_stream_IntStream$IntMapMultiConsumerInterface } from "./IntStream$IntMapMultiConsumer";
import { OptionalDouble as java_util_OptionalDouble } from "./../OptionalDouble";
import { IntSummaryStatistics as java_util_IntSummaryStatistics } from "./../IntSummaryStatistics";
import { Runnable as java_lang_Runnable, RunnableInterface as java_lang_RunnableInterface } from "./../../lang/Runnable";
/**
 * This class just defines types, you should import {@link IntStream} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IntStreamClass extends JavaClass {
    /**
     * @return original return type: 'java.util.OptionalInt'
     */
    min(): Promise<java_util_OptionalInt | null>;
    /**
     * @return original return type: 'java.util.OptionalInt'
     */
    minSync(): java_util_OptionalInt | null;
    /**
     * @return original return type: 'java.util.OptionalInt'
     */
    max(): Promise<java_util_OptionalInt | null>;
    /**
     * @return original return type: 'java.util.OptionalInt'
     */
    maxSync(): java_util_OptionalInt | null;
    /**
     * @return original return type: 'int[]'
     */
    toArray(): Promise<(number)[] | null>;
    /**
     * @return original return type: 'int[]'
     */
    toArraySync(): (number)[] | null;
    /**
     * @return original return type: 'java.util.Iterator'
     */
    iterator(): Promise<java_util_Iterator | null>;
    /**
     * @return original return type: 'java.util.Iterator'
     */
    iteratorSync(): java_util_Iterator | null;
    /**
     * @return original return type: 'java.util.PrimitiveIterator$OfInt'
     */
    iterator(): Promise<java_util_PrimitiveIterator$OfInt | null>;
    /**
     * @return original return type: 'java.util.PrimitiveIterator$OfInt'
     */
    iteratorSync(): java_util_PrimitiveIterator$OfInt | null;
    /**
     * @param var0 original type: 'java.util.function.IntUnaryOperator'
     * @return original return type: 'java.util.stream.IntStream'
     */
    map(var0: java_util_function_IntUnaryOperator | JavaInterfaceProxy<java_util_function_IntUnaryOperatorInterface> | null): Promise<IntStream | null>;
    /**
     * @param var0 original type: 'java.util.function.IntUnaryOperator'
     * @return original return type: 'java.util.stream.IntStream'
     */
    mapSync(var0: java_util_function_IntUnaryOperator | JavaInterfaceProxy<java_util_function_IntUnaryOperatorInterface> | null): IntStream | null;
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @param var1 original type: 'java.util.function.ObjIntConsumer'
     * @param var2 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'java.lang.Object'
     */
    collect(var0: java_util_function_Supplier | JavaInterfaceProxy<java_util_function_SupplierInterface> | null, var1: java_util_function_ObjIntConsumer | JavaInterfaceProxy<java_util_function_ObjIntConsumerInterface> | null, var2: java_util_function_BiConsumer | JavaInterfaceProxy<java_util_function_BiConsumerInterface> | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @param var1 original type: 'java.util.function.ObjIntConsumer'
     * @param var2 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'java.lang.Object'
     */
    collectSync(var0: java_util_function_Supplier | JavaInterfaceProxy<java_util_function_SupplierInterface> | null, var1: java_util_function_ObjIntConsumer | JavaInterfaceProxy<java_util_function_ObjIntConsumerInterface> | null, var2: java_util_function_BiConsumer | JavaInterfaceProxy<java_util_function_BiConsumerInterface> | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.util.stream.IntStream'
     */
    static of(var0: java_lang_Integer | number): Promise<IntStream | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.util.stream.IntStream'
     */
    static ofSync(var0: java_lang_Integer | number): IntStream | null;
    /**
     * @param var0 original type: 'int[]'
     * @return original return type: 'java.util.stream.IntStream'
     */
    static of(var0: (java_lang_Integer | number)[] | null): Promise<IntStream | null>;
    /**
     * @param var0 original type: 'int[]'
     * @return original return type: 'java.util.stream.IntStream'
     */
    static ofSync(var0: (java_lang_Integer | number)[] | null): IntStream | null;
    /**
     * @return original return type: 'long'
     */
    count(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    countSync(): number;
    /**
     * @return original return type: 'java.util.stream.IntStream$Builder'
     */
    static builder(): Promise<java_util_stream_IntStream$Builder | null>;
    /**
     * @return original return type: 'java.util.stream.IntStream$Builder'
     */
    static builderSync(): java_util_stream_IntStream$Builder | null;
    /**
     * @param var0 original type: 'java.util.stream.IntStream'
     * @param var1 original type: 'java.util.stream.IntStream'
     * @return original return type: 'java.util.stream.IntStream'
     */
    static concat(var0: IntStreamClass | JavaInterfaceProxy<IntStreamInterface> | null, var1: IntStreamClass | JavaInterfaceProxy<IntStreamInterface> | null): Promise<IntStream | null>;
    /**
     * @param var0 original type: 'java.util.stream.IntStream'
     * @param var1 original type: 'java.util.stream.IntStream'
     * @return original return type: 'java.util.stream.IntStream'
     */
    static concatSync(var0: IntStreamClass | JavaInterfaceProxy<IntStreamInterface> | null, var1: IntStreamClass | JavaInterfaceProxy<IntStreamInterface> | null): IntStream | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.IntStream'
     */
    limit(var0: java_lang_Long | bigint | number): Promise<IntStream | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.IntStream'
     */
    limitSync(var0: java_lang_Long | bigint | number): IntStream | null;
    /**
     * @return original return type: 'java.util.Spliterator$OfInt'
     */
    spliterator(): Promise<java_util_Spliterator$OfInt | null>;
    /**
     * @return original return type: 'java.util.Spliterator$OfInt'
     */
    spliteratorSync(): java_util_Spliterator$OfInt | null;
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    spliterator(): Promise<java_util_Spliterator | null>;
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    spliteratorSync(): java_util_Spliterator | null;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'java.util.stream.IntStream'
     */
    filter(var0: java_util_function_IntPredicate | JavaInterfaceProxy<java_util_function_IntPredicateInterface> | null): Promise<IntStream | null>;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'java.util.stream.IntStream'
     */
    filterSync(var0: java_util_function_IntPredicate | JavaInterfaceProxy<java_util_function_IntPredicateInterface> | null): IntStream | null;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    static empty(): Promise<IntStream | null>;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    static emptySync(): IntStream | null;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'boolean'
     */
    anyMatch(var0: java_util_function_IntPredicate | JavaInterfaceProxy<java_util_function_IntPredicateInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'boolean'
     */
    anyMatchSync(var0: java_util_function_IntPredicate | JavaInterfaceProxy<java_util_function_IntPredicateInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.util.function.IntFunction'
     * @return original return type: 'java.util.stream.IntStream'
     */
    flatMap(var0: java_util_function_IntFunction | JavaInterfaceProxy<java_util_function_IntFunctionInterface> | null): Promise<IntStream | null>;
    /**
     * @param var0 original type: 'java.util.function.IntFunction'
     * @return original return type: 'java.util.stream.IntStream'
     */
    flatMapSync(var0: java_util_function_IntFunction | JavaInterfaceProxy<java_util_function_IntFunctionInterface> | null): IntStream | null;
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'void'
     */
    forEach(var0: java_util_function_IntConsumer | JavaInterfaceProxy<java_util_function_IntConsumerInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'void'
     */
    forEachSync(var0: java_util_function_IntConsumer | JavaInterfaceProxy<java_util_function_IntConsumerInterface> | null): void;
    /**
     * @return original return type: 'java.util.OptionalInt'
     */
    findAny(): Promise<java_util_OptionalInt | null>;
    /**
     * @return original return type: 'java.util.OptionalInt'
     */
    findAnySync(): java_util_OptionalInt | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.IntStream'
     */
    skip(var0: java_lang_Long | bigint | number): Promise<IntStream | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.IntStream'
     */
    skipSync(var0: java_lang_Long | bigint | number): IntStream | null;
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'java.util.stream.IntStream'
     */
    peek(var0: java_util_function_IntConsumer | JavaInterfaceProxy<java_util_function_IntConsumerInterface> | null): Promise<IntStream | null>;
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'java.util.stream.IntStream'
     */
    peekSync(var0: java_util_function_IntConsumer | JavaInterfaceProxy<java_util_function_IntConsumerInterface> | null): IntStream | null;
    /**
     * @return original return type: 'int'
     */
    sum(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    sumSync(): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.util.function.IntBinaryOperator'
     * @return original return type: 'int'
     */
    reduce(var0: java_lang_Integer | number, var1: java_util_function_IntBinaryOperator | JavaInterfaceProxy<java_util_function_IntBinaryOperatorInterface> | null): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.util.function.IntBinaryOperator'
     * @return original return type: 'int'
     */
    reduceSync(var0: java_lang_Integer | number, var1: java_util_function_IntBinaryOperator | JavaInterfaceProxy<java_util_function_IntBinaryOperatorInterface> | null): number;
    /**
     * @param var0 original type: 'java.util.function.IntBinaryOperator'
     * @return original return type: 'java.util.OptionalInt'
     */
    reduce(var0: java_util_function_IntBinaryOperator | JavaInterfaceProxy<java_util_function_IntBinaryOperatorInterface> | null): Promise<java_util_OptionalInt | null>;
    /**
     * @param var0 original type: 'java.util.function.IntBinaryOperator'
     * @return original return type: 'java.util.OptionalInt'
     */
    reduceSync(var0: java_util_function_IntBinaryOperator | JavaInterfaceProxy<java_util_function_IntBinaryOperatorInterface> | null): java_util_OptionalInt | null;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    distinct(): Promise<IntStream | null>;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    distinctSync(): IntStream | null;
    /**
     * @return original return type: 'java.util.OptionalInt'
     */
    findFirst(): Promise<java_util_OptionalInt | null>;
    /**
     * @return original return type: 'java.util.OptionalInt'
     */
    findFirstSync(): java_util_OptionalInt | null;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'boolean'
     */
    allMatch(var0: java_util_function_IntPredicate | JavaInterfaceProxy<java_util_function_IntPredicateInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'boolean'
     */
    allMatchSync(var0: java_util_function_IntPredicate | JavaInterfaceProxy<java_util_function_IntPredicateInterface> | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.util.stream.IntStream'
     */
    static range(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<IntStream | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.util.stream.IntStream'
     */
    static rangeSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): IntStream | null;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    parallel(): Promise<IntStream | null>;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    parallelSync(): IntStream | null;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    parallel(): Promise<java_util_stream_BaseStream | null>;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    parallelSync(): java_util_stream_BaseStream | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.util.function.IntPredicate'
     * @param var2 original type: 'java.util.function.IntUnaryOperator'
     * @return original return type: 'java.util.stream.IntStream'
     */
    static iterate(var0: java_lang_Integer | number, var1: java_util_function_IntPredicate | JavaInterfaceProxy<java_util_function_IntPredicateInterface> | null, var2: java_util_function_IntUnaryOperator | JavaInterfaceProxy<java_util_function_IntUnaryOperatorInterface> | null): Promise<IntStream | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.util.function.IntPredicate'
     * @param var2 original type: 'java.util.function.IntUnaryOperator'
     * @return original return type: 'java.util.stream.IntStream'
     */
    static iterateSync(var0: java_lang_Integer | number, var1: java_util_function_IntPredicate | JavaInterfaceProxy<java_util_function_IntPredicateInterface> | null, var2: java_util_function_IntUnaryOperator | JavaInterfaceProxy<java_util_function_IntUnaryOperatorInterface> | null): IntStream | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.util.function.IntUnaryOperator'
     * @return original return type: 'java.util.stream.IntStream'
     */
    static iterate(var0: java_lang_Integer | number, var1: java_util_function_IntUnaryOperator | JavaInterfaceProxy<java_util_function_IntUnaryOperatorInterface> | null): Promise<IntStream | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.util.function.IntUnaryOperator'
     * @return original return type: 'java.util.stream.IntStream'
     */
    static iterateSync(var0: java_lang_Integer | number, var1: java_util_function_IntUnaryOperator | JavaInterfaceProxy<java_util_function_IntUnaryOperatorInterface> | null): IntStream | null;
    /**
     * @param var0 original type: 'java.util.function.IntFunction'
     * @return original return type: 'java.util.stream.Stream'
     */
    mapToObj(var0: java_util_function_IntFunction | JavaInterfaceProxy<java_util_function_IntFunctionInterface> | null): Promise<java_util_stream_Stream | null>;
    /**
     * @param var0 original type: 'java.util.function.IntFunction'
     * @return original return type: 'java.util.stream.Stream'
     */
    mapToObjSync(var0: java_util_function_IntFunction | JavaInterfaceProxy<java_util_function_IntFunctionInterface> | null): java_util_stream_Stream | null;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    sorted(): Promise<IntStream | null>;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    sortedSync(): IntStream | null;
    /**
     * @param var0 original type: 'java.util.function.IntSupplier'
     * @return original return type: 'java.util.stream.IntStream'
     */
    static generate(var0: java_util_function_IntSupplier | JavaInterfaceProxy<java_util_function_IntSupplierInterface> | null): Promise<IntStream | null>;
    /**
     * @param var0 original type: 'java.util.function.IntSupplier'
     * @return original return type: 'java.util.stream.IntStream'
     */
    static generateSync(var0: java_util_function_IntSupplier | JavaInterfaceProxy<java_util_function_IntSupplierInterface> | null): IntStream | null;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    sequential(): Promise<java_util_stream_BaseStream | null>;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    sequentialSync(): java_util_stream_BaseStream | null;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    sequential(): Promise<IntStream | null>;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    sequentialSync(): IntStream | null;
    /**
     * @param var0 original type: 'java.util.function.IntToLongFunction'
     * @return original return type: 'java.util.stream.LongStream'
     */
    mapToLong(var0: java_util_function_IntToLongFunction | JavaInterfaceProxy<java_util_function_IntToLongFunctionInterface> | null): Promise<java_util_stream_LongStream | null>;
    /**
     * @param var0 original type: 'java.util.function.IntToLongFunction'
     * @return original return type: 'java.util.stream.LongStream'
     */
    mapToLongSync(var0: java_util_function_IntToLongFunction | JavaInterfaceProxy<java_util_function_IntToLongFunctionInterface> | null): java_util_stream_LongStream | null;
    /**
     * @param var0 original type: 'java.util.function.IntToDoubleFunction'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    mapToDouble(var0: java_util_function_IntToDoubleFunction | JavaInterfaceProxy<java_util_function_IntToDoubleFunctionInterface> | null): Promise<java_util_stream_DoubleStream | null>;
    /**
     * @param var0 original type: 'java.util.function.IntToDoubleFunction'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    mapToDoubleSync(var0: java_util_function_IntToDoubleFunction | JavaInterfaceProxy<java_util_function_IntToDoubleFunctionInterface> | null): java_util_stream_DoubleStream | null;
    /**
     * @param var0 original type: 'java.util.stream.IntStream$IntMapMultiConsumer'
     * @return original return type: 'java.util.stream.IntStream'
     */
    mapMulti(var0: java_util_stream_IntStream$IntMapMultiConsumer | JavaInterfaceProxy<java_util_stream_IntStream$IntMapMultiConsumerInterface> | null): Promise<IntStream | null>;
    /**
     * @param var0 original type: 'java.util.stream.IntStream$IntMapMultiConsumer'
     * @return original return type: 'java.util.stream.IntStream'
     */
    mapMultiSync(var0: java_util_stream_IntStream$IntMapMultiConsumer | JavaInterfaceProxy<java_util_stream_IntStream$IntMapMultiConsumerInterface> | null): IntStream | null;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'java.util.stream.IntStream'
     */
    takeWhile(var0: java_util_function_IntPredicate | JavaInterfaceProxy<java_util_function_IntPredicateInterface> | null): Promise<IntStream | null>;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'java.util.stream.IntStream'
     */
    takeWhileSync(var0: java_util_function_IntPredicate | JavaInterfaceProxy<java_util_function_IntPredicateInterface> | null): IntStream | null;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'java.util.stream.IntStream'
     */
    dropWhile(var0: java_util_function_IntPredicate | JavaInterfaceProxy<java_util_function_IntPredicateInterface> | null): Promise<IntStream | null>;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'java.util.stream.IntStream'
     */
    dropWhileSync(var0: java_util_function_IntPredicate | JavaInterfaceProxy<java_util_function_IntPredicateInterface> | null): IntStream | null;
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'void'
     */
    forEachOrdered(var0: java_util_function_IntConsumer | JavaInterfaceProxy<java_util_function_IntConsumerInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'void'
     */
    forEachOrderedSync(var0: java_util_function_IntConsumer | JavaInterfaceProxy<java_util_function_IntConsumerInterface> | null): void;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'boolean'
     */
    noneMatch(var0: java_util_function_IntPredicate | JavaInterfaceProxy<java_util_function_IntPredicateInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'boolean'
     */
    noneMatchSync(var0: java_util_function_IntPredicate | JavaInterfaceProxy<java_util_function_IntPredicateInterface> | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.util.stream.IntStream'
     */
    static rangeClosed(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<IntStream | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.util.stream.IntStream'
     */
    static rangeClosedSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): IntStream | null;
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    average(): Promise<java_util_OptionalDouble | null>;
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    averageSync(): java_util_OptionalDouble | null;
    /**
     * @return original return type: 'java.util.IntSummaryStatistics'
     */
    summaryStatistics(): Promise<java_util_IntSummaryStatistics | null>;
    /**
     * @return original return type: 'java.util.IntSummaryStatistics'
     */
    summaryStatisticsSync(): java_util_IntSummaryStatistics | null;
    /**
     * @return original return type: 'java.util.stream.LongStream'
     */
    asLongStream(): Promise<java_util_stream_LongStream | null>;
    /**
     * @return original return type: 'java.util.stream.LongStream'
     */
    asLongStreamSync(): java_util_stream_LongStream | null;
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    asDoubleStream(): Promise<java_util_stream_DoubleStream | null>;
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    asDoubleStreamSync(): java_util_stream_DoubleStream | null;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    boxed(): Promise<java_util_stream_Stream | null>;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    boxedSync(): java_util_stream_Stream | null;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @return original return type: 'boolean'
     */
    isParallel(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isParallelSync(): boolean;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    unordered(): Promise<java_util_stream_BaseStream | null>;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    unorderedSync(): java_util_stream_BaseStream | null;
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.util.stream.BaseStream'
     */
    onClose(var0: java_lang_Runnable | JavaInterfaceProxy<java_lang_RunnableInterface> | null): Promise<java_util_stream_BaseStream | null>;
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.util.stream.BaseStream'
     */
    onCloseSync(var0: java_lang_Runnable | JavaInterfaceProxy<java_lang_RunnableInterface> | null): java_util_stream_BaseStream | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIntStreamProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IntStreamInterface {
    /**
     * @return original return type: 'java.util.OptionalInt'
     */
    min(): java_util_OptionalInt | null;
    /**
     * @return original return type: 'java.util.OptionalInt'
     */
    max(): java_util_OptionalInt | null;
    /**
     * @return original return type: 'int[]'
     */
    toArray(): (number)[] | null;
    /**
     * @return original return type: 'java.util.Iterator'
     */
    iterator?(): java_util_Iterator | null;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @return original return type: 'java.util.PrimitiveIterator$OfInt'
     */
    iterator?(): java_util_PrimitiveIterator$OfInt | null;
    /**
     * @param var0 original type: 'java.util.function.IntUnaryOperator'
     * @return original return type: 'java.util.stream.IntStream'
     */
    map(var0: java_util_function_IntUnaryOperator | JavaInterfaceProxy<java_util_function_IntUnaryOperatorInterface> | null): IntStream | null;
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @param var1 original type: 'java.util.function.ObjIntConsumer'
     * @param var2 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'java.lang.Object'
     */
    collect(var0: java_util_function_Supplier | JavaInterfaceProxy<java_util_function_SupplierInterface> | null, var1: java_util_function_ObjIntConsumer | JavaInterfaceProxy<java_util_function_ObjIntConsumerInterface> | null, var2: java_util_function_BiConsumer | JavaInterfaceProxy<java_util_function_BiConsumerInterface> | null): BasicOrJavaType | null;
    /**
     * @return original return type: 'long'
     */
    count(): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.IntStream'
     */
    limit(var0: java_lang_Long | bigint | number): IntStream | null;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @return original return type: 'java.util.Spliterator$OfInt'
     */
    spliterator?(): java_util_Spliterator$OfInt | null;
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    spliterator?(): java_util_Spliterator | null;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'java.util.stream.IntStream'
     */
    filter(var0: java_util_function_IntPredicate | JavaInterfaceProxy<java_util_function_IntPredicateInterface> | null): IntStream | null;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'boolean'
     */
    anyMatch(var0: java_util_function_IntPredicate | JavaInterfaceProxy<java_util_function_IntPredicateInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.util.function.IntFunction'
     * @return original return type: 'java.util.stream.IntStream'
     */
    flatMap(var0: java_util_function_IntFunction | JavaInterfaceProxy<java_util_function_IntFunctionInterface> | null): IntStream | null;
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'void'
     */
    forEach(var0: java_util_function_IntConsumer | JavaInterfaceProxy<java_util_function_IntConsumerInterface> | null): void;
    /**
     * @return original return type: 'java.util.OptionalInt'
     */
    findAny(): java_util_OptionalInt | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.IntStream'
     */
    skip(var0: java_lang_Long | bigint | number): IntStream | null;
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'java.util.stream.IntStream'
     */
    peek(var0: java_util_function_IntConsumer | JavaInterfaceProxy<java_util_function_IntConsumerInterface> | null): IntStream | null;
    /**
     * @return original return type: 'int'
     */
    sum(): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.util.function.IntBinaryOperator'
     * @return original return type: 'int'
     */
    reduce(var0: java_lang_Integer | number, var1: java_util_function_IntBinaryOperator | JavaInterfaceProxy<java_util_function_IntBinaryOperatorInterface> | null): number;
    /**
     * @param var0 original type: 'java.util.function.IntBinaryOperator'
     * @return original return type: 'java.util.OptionalInt'
     */
    reduce(var0: java_util_function_IntBinaryOperator | JavaInterfaceProxy<java_util_function_IntBinaryOperatorInterface> | null): java_util_OptionalInt | null;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    distinct(): IntStream | null;
    /**
     * @return original return type: 'java.util.OptionalInt'
     */
    findFirst(): java_util_OptionalInt | null;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'boolean'
     */
    allMatch(var0: java_util_function_IntPredicate | JavaInterfaceProxy<java_util_function_IntPredicateInterface> | null): boolean;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @return original return type: 'java.util.stream.IntStream'
     */
    parallel?(): IntStream | null;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    parallel?(): java_util_stream_BaseStream | null;
    /**
     * @param var0 original type: 'java.util.function.IntFunction'
     * @return original return type: 'java.util.stream.Stream'
     */
    mapToObj(var0: java_util_function_IntFunction | JavaInterfaceProxy<java_util_function_IntFunctionInterface> | null): java_util_stream_Stream | null;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    sorted(): IntStream | null;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    sequential?(): java_util_stream_BaseStream | null;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @return original return type: 'java.util.stream.IntStream'
     */
    sequential?(): IntStream | null;
    /**
     * @param var0 original type: 'java.util.function.IntToLongFunction'
     * @return original return type: 'java.util.stream.LongStream'
     */
    mapToLong(var0: java_util_function_IntToLongFunction | JavaInterfaceProxy<java_util_function_IntToLongFunctionInterface> | null): java_util_stream_LongStream | null;
    /**
     * @param var0 original type: 'java.util.function.IntToDoubleFunction'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    mapToDouble(var0: java_util_function_IntToDoubleFunction | JavaInterfaceProxy<java_util_function_IntToDoubleFunctionInterface> | null): java_util_stream_DoubleStream | null;
    /**
     * @param var0 original type: 'java.util.stream.IntStream$IntMapMultiConsumer'
     * @return original return type: 'java.util.stream.IntStream'
     */
    mapMulti?(var0: java_util_stream_IntStream$IntMapMultiConsumer | JavaInterfaceProxy<java_util_stream_IntStream$IntMapMultiConsumerInterface> | null): IntStream | null;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'java.util.stream.IntStream'
     */
    takeWhile?(var0: java_util_function_IntPredicate | JavaInterfaceProxy<java_util_function_IntPredicateInterface> | null): IntStream | null;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'java.util.stream.IntStream'
     */
    dropWhile?(var0: java_util_function_IntPredicate | JavaInterfaceProxy<java_util_function_IntPredicateInterface> | null): IntStream | null;
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'void'
     */
    forEachOrdered(var0: java_util_function_IntConsumer | JavaInterfaceProxy<java_util_function_IntConsumerInterface> | null): void;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'boolean'
     */
    noneMatch(var0: java_util_function_IntPredicate | JavaInterfaceProxy<java_util_function_IntPredicateInterface> | null): boolean;
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    average(): java_util_OptionalDouble | null;
    /**
     * @return original return type: 'java.util.IntSummaryStatistics'
     */
    summaryStatistics(): java_util_IntSummaryStatistics | null;
    /**
     * @return original return type: 'java.util.stream.LongStream'
     */
    asLongStream(): java_util_stream_LongStream | null;
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    asDoubleStream(): java_util_stream_DoubleStream | null;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    boxed(): java_util_stream_Stream | null;
    /**
     * @return original return type: 'void'
     */
    close(): void;
    /**
     * @return original return type: 'boolean'
     */
    isParallel(): boolean;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    unordered(): java_util_stream_BaseStream | null;
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.util.stream.BaseStream'
     */
    onClose(var0: java_lang_Runnable | JavaInterfaceProxy<java_lang_RunnableInterface> | null): java_util_stream_BaseStream | null;
}
/**
 * Create a proxy for the {@link IntStream} interface.
 * All required methods in {@link IntStreamInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIntStreamProxy(methods: IntStreamInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IntStreamInterface>;
declare const IntStream_base: typeof IntStreamClass;
/**
 * Class java.util.stream.IntStream.
 *
 * This actually imports the java class for further use.
 * The class {@link IntStreamClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IntStream extends IntStream_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IntStream;
//# sourceMappingURL=IntStream.d.ts.map