import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Long as java_lang_Long } from "./../../lang/Long";
import { LongConsumer as java_util_function_LongConsumer, LongConsumerInterface as java_util_function_LongConsumerInterface } from "./../function/LongConsumer";
/**
 * This class just defines types, you should import {@link LongStream$LongMapMultiConsumer} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class LongStream$LongMapMultiConsumerClass extends JavaClass {
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.util.function.LongConsumer'
     * @return original return type: 'void'
     */
    accept(var0: java_lang_Long | bigint | number, var1: java_util_function_LongConsumer | JavaInterfaceProxy<java_util_function_LongConsumerInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.util.function.LongConsumer'
     * @return original return type: 'void'
     */
    acceptSync(var0: java_lang_Long | bigint | number, var1: java_util_function_LongConsumer | JavaInterfaceProxy<java_util_function_LongConsumerInterface> | null): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createLongStream$LongMapMultiConsumerProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface LongStream$LongMapMultiConsumerInterface {
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.util.function.LongConsumer'
     * @return original return type: 'void'
     */
    accept(var0: java_lang_Long | bigint | number, var1: java_util_function_LongConsumer | JavaInterfaceProxy<java_util_function_LongConsumerInterface> | null): void;
}
/**
 * Create a proxy for the {@link LongStream$LongMapMultiConsumer} interface.
 * All required methods in {@link LongStream$LongMapMultiConsumerInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createLongStream$LongMapMultiConsumerProxy(methods: LongStream$LongMapMultiConsumerInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<LongStream$LongMapMultiConsumerInterface>;
declare const LongStream$LongMapMultiConsumer_base: typeof LongStream$LongMapMultiConsumerClass;
/**
 * Class java.util.stream.LongStream$LongMapMultiConsumer.
 *
 * This actually imports the java class for further use.
 * The class {@link LongStream$LongMapMultiConsumerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class LongStream$LongMapMultiConsumer extends LongStream$LongMapMultiConsumer_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default LongStream$LongMapMultiConsumer;
//# sourceMappingURL=LongStream$LongMapMultiConsumer.d.ts.map