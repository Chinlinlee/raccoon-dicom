import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Iterator as java_util_Iterator } from "./../Iterator";
import { Spliterator as java_util_Spliterator } from "./../Spliterator";
import { Runnable as java_lang_Runnable, RunnableInterface as java_lang_RunnableInterface } from "./../../lang/Runnable";
/**
 * This class just defines types, you should import {@link BaseStream} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BaseStreamClass extends JavaClass {
    /**
     * @return original return type: 'java.util.Iterator'
     */
    iterator(): Promise<java_util_Iterator | null>;
    /**
     * @return original return type: 'java.util.Iterator'
     */
    iteratorSync(): java_util_Iterator | null;
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    spliterator(): Promise<java_util_Spliterator | null>;
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    spliteratorSync(): java_util_Spliterator | null;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    parallel(): Promise<BaseStream | null>;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    parallelSync(): BaseStream | null;
    /**
     * @return original return type: 'boolean'
     */
    isParallel(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isParallelSync(): boolean;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    sequential(): Promise<BaseStream | null>;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    sequentialSync(): BaseStream | null;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    unordered(): Promise<BaseStream | null>;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    unorderedSync(): BaseStream | null;
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.util.stream.BaseStream'
     */
    onClose(var0: java_lang_Runnable | JavaInterfaceProxy<java_lang_RunnableInterface> | null): Promise<BaseStream | null>;
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.util.stream.BaseStream'
     */
    onCloseSync(var0: java_lang_Runnable | JavaInterfaceProxy<java_lang_RunnableInterface> | null): BaseStream | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createBaseStreamProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface BaseStreamInterface {
    /**
     * @return original return type: 'java.util.Iterator'
     */
    iterator(): java_util_Iterator | null;
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    spliterator(): java_util_Spliterator | null;
    /**
     * @return original return type: 'void'
     */
    close(): void;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    parallel(): BaseStream | null;
    /**
     * @return original return type: 'boolean'
     */
    isParallel(): boolean;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    sequential(): BaseStream | null;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    unordered(): BaseStream | null;
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.util.stream.BaseStream'
     */
    onClose(var0: java_lang_Runnable | JavaInterfaceProxy<java_lang_RunnableInterface> | null): BaseStream | null;
}
/**
 * Create a proxy for the {@link BaseStream} interface.
 * All required methods in {@link BaseStreamInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createBaseStreamProxy(methods: BaseStreamInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<BaseStreamInterface>;
declare const BaseStream_base: typeof BaseStreamClass;
/**
 * Class java.util.stream.BaseStream.
 *
 * This actually imports the java class for further use.
 * The class {@link BaseStreamClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BaseStream extends BaseStream_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default BaseStream;
//# sourceMappingURL=BaseStream.d.ts.map