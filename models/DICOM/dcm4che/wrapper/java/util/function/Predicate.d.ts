import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
/**
 * This class just defines types, you should import {@link Predicate} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class PredicateClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    test(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    testSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.util.function.Predicate'
     * @return original return type: 'java.util.function.Predicate'
     */
    or(var0: PredicateClass | JavaInterfaceProxy<PredicateInterface> | null): Promise<Predicate | null>;
    /**
     * @param var0 original type: 'java.util.function.Predicate'
     * @return original return type: 'java.util.function.Predicate'
     */
    orSync(var0: PredicateClass | JavaInterfaceProxy<PredicateInterface> | null): Predicate | null;
    /**
     * @return original return type: 'java.util.function.Predicate'
     */
    negate(): Promise<Predicate | null>;
    /**
     * @return original return type: 'java.util.function.Predicate'
     */
    negateSync(): Predicate | null;
    /**
     * @param var0 original type: 'java.util.function.Predicate'
     * @return original return type: 'java.util.function.Predicate'
     */
    and(var0: PredicateClass | JavaInterfaceProxy<PredicateInterface> | null): Promise<Predicate | null>;
    /**
     * @param var0 original type: 'java.util.function.Predicate'
     * @return original return type: 'java.util.function.Predicate'
     */
    andSync(var0: PredicateClass | JavaInterfaceProxy<PredicateInterface> | null): Predicate | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.util.function.Predicate'
     */
    static isEqual(var0: BasicOrJavaType | null): Promise<Predicate | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.util.function.Predicate'
     */
    static isEqualSync(var0: BasicOrJavaType | null): Predicate | null;
    /**
     * @param var0 original type: 'java.util.function.Predicate'
     * @return original return type: 'java.util.function.Predicate'
     */
    static not(var0: PredicateClass | JavaInterfaceProxy<PredicateInterface> | null): Promise<Predicate | null>;
    /**
     * @param var0 original type: 'java.util.function.Predicate'
     * @return original return type: 'java.util.function.Predicate'
     */
    static notSync(var0: PredicateClass | JavaInterfaceProxy<PredicateInterface> | null): Predicate | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createPredicateProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface PredicateInterface {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    test(var0: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.util.function.Predicate'
     * @return original return type: 'java.util.function.Predicate'
     */
    or?(var0: PredicateClass | JavaInterfaceProxy<PredicateInterface> | null): Predicate | null;
    /**
     * @return original return type: 'java.util.function.Predicate'
     */
    negate?(): Predicate | null;
    /**
     * @param var0 original type: 'java.util.function.Predicate'
     * @return original return type: 'java.util.function.Predicate'
     */
    and?(var0: PredicateClass | JavaInterfaceProxy<PredicateInterface> | null): Predicate | null;
}
/**
 * Create a proxy for the {@link Predicate} interface.
 * All required methods in {@link PredicateInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createPredicateProxy(methods: PredicateInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<PredicateInterface>;
declare const Predicate_base: typeof PredicateClass;
/**
 * Class java.util.function.Predicate.
 *
 * This actually imports the java class for further use.
 * The class {@link PredicateClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Predicate extends Predicate_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Predicate;
//# sourceMappingURL=Predicate.d.ts.map