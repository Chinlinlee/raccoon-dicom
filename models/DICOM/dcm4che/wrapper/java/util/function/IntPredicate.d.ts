import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
/**
 * This class just defines types, you should import {@link IntPredicate} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IntPredicateClass extends JavaClass {
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    test(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    testSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'java.util.function.IntPredicate'
     */
    or(var0: IntPredicateClass | JavaInterfaceProxy<IntPredicateInterface> | null): Promise<IntPredicate | null>;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'java.util.function.IntPredicate'
     */
    orSync(var0: IntPredicateClass | JavaInterfaceProxy<IntPredicateInterface> | null): IntPredicate | null;
    /**
     * @return original return type: 'java.util.function.IntPredicate'
     */
    negate(): Promise<IntPredicate | null>;
    /**
     * @return original return type: 'java.util.function.IntPredicate'
     */
    negateSync(): IntPredicate | null;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'java.util.function.IntPredicate'
     */
    and(var0: IntPredicateClass | JavaInterfaceProxy<IntPredicateInterface> | null): Promise<IntPredicate | null>;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'java.util.function.IntPredicate'
     */
    andSync(var0: IntPredicateClass | JavaInterfaceProxy<IntPredicateInterface> | null): IntPredicate | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIntPredicateProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IntPredicateInterface {
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    test(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'java.util.function.IntPredicate'
     */
    or?(var0: IntPredicateClass | JavaInterfaceProxy<IntPredicateInterface> | null): IntPredicate | null;
    /**
     * @return original return type: 'java.util.function.IntPredicate'
     */
    negate?(): IntPredicate | null;
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'java.util.function.IntPredicate'
     */
    and?(var0: IntPredicateClass | JavaInterfaceProxy<IntPredicateInterface> | null): IntPredicate | null;
}
/**
 * Create a proxy for the {@link IntPredicate} interface.
 * All required methods in {@link IntPredicateInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIntPredicateProxy(methods: IntPredicateInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IntPredicateInterface>;
declare const IntPredicate_base: typeof IntPredicateClass;
/**
 * Class java.util.function.IntPredicate.
 *
 * This actually imports the java class for further use.
 * The class {@link IntPredicateClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IntPredicate extends IntPredicate_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IntPredicate;
//# sourceMappingURL=IntPredicate.d.ts.map