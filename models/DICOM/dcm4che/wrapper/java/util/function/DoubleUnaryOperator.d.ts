import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Double as java_lang_Double } from "./../../lang/Double";
/**
 * This class just defines types, you should import {@link DoubleUnaryOperator} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DoubleUnaryOperatorClass extends JavaClass {
    /**
     * @return original return type: 'java.util.function.DoubleUnaryOperator'
     */
    static identity(): Promise<DoubleUnaryOperator | null>;
    /**
     * @return original return type: 'java.util.function.DoubleUnaryOperator'
     */
    static identitySync(): DoubleUnaryOperator | null;
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'double'
     */
    applyAsDouble(var0: java_lang_Double | number): Promise<number>;
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'double'
     */
    applyAsDoubleSync(var0: java_lang_Double | number): number;
    /**
     * @param var0 original type: 'java.util.function.DoubleUnaryOperator'
     * @return original return type: 'java.util.function.DoubleUnaryOperator'
     */
    compose(var0: DoubleUnaryOperatorClass | JavaInterfaceProxy<DoubleUnaryOperatorInterface> | null): Promise<DoubleUnaryOperator | null>;
    /**
     * @param var0 original type: 'java.util.function.DoubleUnaryOperator'
     * @return original return type: 'java.util.function.DoubleUnaryOperator'
     */
    composeSync(var0: DoubleUnaryOperatorClass | JavaInterfaceProxy<DoubleUnaryOperatorInterface> | null): DoubleUnaryOperator | null;
    /**
     * @param var0 original type: 'java.util.function.DoubleUnaryOperator'
     * @return original return type: 'java.util.function.DoubleUnaryOperator'
     */
    andThen(var0: DoubleUnaryOperatorClass | JavaInterfaceProxy<DoubleUnaryOperatorInterface> | null): Promise<DoubleUnaryOperator | null>;
    /**
     * @param var0 original type: 'java.util.function.DoubleUnaryOperator'
     * @return original return type: 'java.util.function.DoubleUnaryOperator'
     */
    andThenSync(var0: DoubleUnaryOperatorClass | JavaInterfaceProxy<DoubleUnaryOperatorInterface> | null): DoubleUnaryOperator | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createDoubleUnaryOperatorProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface DoubleUnaryOperatorInterface {
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'double'
     */
    applyAsDouble(var0: java_lang_Double | number): number;
    /**
     * @param var0 original type: 'java.util.function.DoubleUnaryOperator'
     * @return original return type: 'java.util.function.DoubleUnaryOperator'
     */
    compose?(var0: DoubleUnaryOperatorClass | JavaInterfaceProxy<DoubleUnaryOperatorInterface> | null): DoubleUnaryOperator | null;
    /**
     * @param var0 original type: 'java.util.function.DoubleUnaryOperator'
     * @return original return type: 'java.util.function.DoubleUnaryOperator'
     */
    andThen?(var0: DoubleUnaryOperatorClass | JavaInterfaceProxy<DoubleUnaryOperatorInterface> | null): DoubleUnaryOperator | null;
}
/**
 * Create a proxy for the {@link DoubleUnaryOperator} interface.
 * All required methods in {@link DoubleUnaryOperatorInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createDoubleUnaryOperatorProxy(methods: DoubleUnaryOperatorInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<DoubleUnaryOperatorInterface>;
declare const DoubleUnaryOperator_base: typeof DoubleUnaryOperatorClass;
/**
 * Class java.util.function.DoubleUnaryOperator.
 *
 * This actually imports the java class for further use.
 * The class {@link DoubleUnaryOperatorClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DoubleUnaryOperator extends DoubleUnaryOperator_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default DoubleUnaryOperator;
//# sourceMappingURL=DoubleUnaryOperator.d.ts.map