import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Function as java_util_function_Function, FunctionInterface as java_util_function_FunctionInterface } from "./Function";
/**
 * This class just defines types, you should import {@link BiFunction} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BiFunctionClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    apply(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    applySync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.util.function.Function'
     * @return original return type: 'java.util.function.BiFunction'
     */
    andThen(var0: java_util_function_Function | JavaInterfaceProxy<java_util_function_FunctionInterface> | null): Promise<BiFunction | null>;
    /**
     * @param var0 original type: 'java.util.function.Function'
     * @return original return type: 'java.util.function.BiFunction'
     */
    andThenSync(var0: java_util_function_Function | JavaInterfaceProxy<java_util_function_FunctionInterface> | null): BiFunction | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createBiFunctionProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface BiFunctionInterface {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    apply(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.util.function.Function'
     * @return original return type: 'java.util.function.BiFunction'
     */
    andThen?(var0: java_util_function_Function | JavaInterfaceProxy<java_util_function_FunctionInterface> | null): BiFunction | null;
}
/**
 * Create a proxy for the {@link BiFunction} interface.
 * All required methods in {@link BiFunctionInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createBiFunctionProxy(methods: BiFunctionInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<BiFunctionInterface>;
declare const BiFunction_base: typeof BiFunctionClass;
/**
 * Class java.util.function.BiFunction.
 *
 * This actually imports the java class for further use.
 * The class {@link BiFunctionClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BiFunction extends BiFunction_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default BiFunction;
//# sourceMappingURL=BiFunction.d.ts.map