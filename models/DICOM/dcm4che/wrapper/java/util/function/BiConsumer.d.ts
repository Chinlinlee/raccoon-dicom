import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
/**
 * This class just defines types, you should import {@link BiConsumer} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BiConsumerClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    accept(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    acceptSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'java.util.function.BiConsumer'
     */
    andThen(var0: BiConsumerClass | JavaInterfaceProxy<BiConsumerInterface> | null): Promise<BiConsumer | null>;
    /**
     * @param var0 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'java.util.function.BiConsumer'
     */
    andThenSync(var0: BiConsumerClass | JavaInterfaceProxy<BiConsumerInterface> | null): BiConsumer | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createBiConsumerProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface BiConsumerInterface {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    accept(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'java.util.function.BiConsumer'
     */
    andThen?(var0: BiConsumerClass | JavaInterfaceProxy<BiConsumerInterface> | null): BiConsumer | null;
}
/**
 * Create a proxy for the {@link BiConsumer} interface.
 * All required methods in {@link BiConsumerInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createBiConsumerProxy(methods: BiConsumerInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<BiConsumerInterface>;
declare const BiConsumer_base: typeof BiConsumerClass;
/**
 * Class java.util.function.BiConsumer.
 *
 * This actually imports the java class for further use.
 * The class {@link BiConsumerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BiConsumer extends BiConsumer_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default BiConsumer;
//# sourceMappingURL=BiConsumer.d.ts.map