import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Collection as java_util_Collection } from "./Collection";
import { Set as java_util_Set } from "./Set";
import { Comparator as java_util_Comparator } from "./Comparator";
import { BiFunction as java_util_function_BiFunction, BiFunctionInterface as java_util_function_BiFunctionInterface } from "./function/BiFunction";
import { Map as java_util_Map, MapInterface as java_util_MapInterface } from "./Map";
import { BiConsumer as java_util_function_BiConsumer, BiConsumerInterface as java_util_function_BiConsumerInterface } from "./function/BiConsumer";
import { Function as java_util_function_Function, FunctionInterface as java_util_function_FunctionInterface } from "./function/Function";
/**
 * This class just defines types, you should import {@link SortedMap} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class SortedMapClass extends JavaClass {
    /**
     * @return original return type: 'java.util.Collection'
     */
    values(): Promise<java_util_Collection | null>;
    /**
     * @return original return type: 'java.util.Collection'
     */
    valuesSync(): java_util_Collection | null;
    /**
     * @return original return type: 'java.util.Set'
     */
    entrySet(): Promise<java_util_Set | null>;
    /**
     * @return original return type: 'java.util.Set'
     */
    entrySetSync(): java_util_Set | null;
    /**
     * @return original return type: 'java.util.Set'
     */
    keySet(): Promise<java_util_Set | null>;
    /**
     * @return original return type: 'java.util.Set'
     */
    keySetSync(): java_util_Set | null;
    /**
     * @return original return type: 'java.util.Comparator'
     */
    comparator(): Promise<java_util_Comparator | null>;
    /**
     * @return original return type: 'java.util.Comparator'
     */
    comparatorSync(): java_util_Comparator | null;
    /**
     * @return original return type: 'java.lang.Object'
     */
    firstKey(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    firstKeySync(): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.lang.Object'
     */
    lastKey(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    lastKeySync(): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.util.SortedMap'
     */
    subMap(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): Promise<SortedMap | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.util.SortedMap'
     */
    subMapSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): SortedMap | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.util.SortedMap'
     */
    headMap(var0: BasicOrJavaType | null): Promise<SortedMap | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.util.SortedMap'
     */
    headMapSync(var0: BasicOrJavaType | null): SortedMap | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.util.SortedMap'
     */
    tailMap(var0: BasicOrJavaType | null): Promise<SortedMap | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.util.SortedMap'
     */
    tailMapSync(var0: BasicOrJavaType | null): SortedMap | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    remove(var0: BasicOrJavaType | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    removeSync(var0: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    remove(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    removeSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    get(var0: BasicOrJavaType | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    getSync(var0: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    put(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    putSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'void'
     */
    clear(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    clearSync(): void;
    /**
     * @return original return type: 'boolean'
     */
    isEmpty(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isEmptySync(): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    replace(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    replaceSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    replace(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    replaceSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.util.function.BiFunction'
     * @return original return type: 'void'
     */
    replaceAll(var0: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.function.BiFunction'
     * @return original return type: 'void'
     */
    replaceAllSync(var0: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): void;
    /**
     * @return original return type: 'int'
     */
    size(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    sizeSync(): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    merge(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null, var2: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    mergeSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null, var2: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.util.Map'
     * @return original return type: 'void'
     */
    putAll(var0: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.Map'
     * @return original return type: 'void'
     */
    putAllSync(var0: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    putIfAbsent(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    putIfAbsentSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    compute(var0: BasicOrJavaType | null, var1: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    computeSync(var0: BasicOrJavaType | null, var1: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'void'
     */
    forEach(var0: java_util_function_BiConsumer | JavaInterfaceProxy<java_util_function_BiConsumerInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'void'
     */
    forEachSync(var0: java_util_function_BiConsumer | JavaInterfaceProxy<java_util_function_BiConsumerInterface> | null): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    containsKey(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    containsKeySync(var0: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.Function'
     * @return original return type: 'java.lang.Object'
     */
    computeIfAbsent(var0: BasicOrJavaType | null, var1: java_util_function_Function | JavaInterfaceProxy<java_util_function_FunctionInterface> | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.Function'
     * @return original return type: 'java.lang.Object'
     */
    computeIfAbsentSync(var0: BasicOrJavaType | null, var1: java_util_function_Function | JavaInterfaceProxy<java_util_function_FunctionInterface> | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    containsValue(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    containsValueSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    getOrDefault(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    getOrDefaultSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    computeIfPresent(var0: BasicOrJavaType | null, var1: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    computeIfPresentSync(var0: BasicOrJavaType | null, var1: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): BasicOrJavaType | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createSortedMapProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface SortedMapInterface {
    /**
     * @return original return type: 'java.util.Collection'
     */
    values(): java_util_Collection | null;
    /**
     * @return original return type: 'java.util.Set'
     */
    entrySet(): java_util_Set | null;
    /**
     * @return original return type: 'java.util.Set'
     */
    keySet(): java_util_Set | null;
    /**
     * @return original return type: 'java.util.Comparator'
     */
    comparator(): java_util_Comparator | null;
    /**
     * @return original return type: 'java.lang.Object'
     */
    firstKey(): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.lang.Object'
     */
    lastKey(): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.util.SortedMap'
     */
    subMap(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): SortedMap | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.util.SortedMap'
     */
    headMap(var0: BasicOrJavaType | null): SortedMap | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.util.SortedMap'
     */
    tailMap(var0: BasicOrJavaType | null): SortedMap | null;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    remove?(var0: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    remove?(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    get(var0: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    put(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    hashCode(): number;
    /**
     * @return original return type: 'void'
     */
    clear(): void;
    /**
     * @return original return type: 'boolean'
     */
    isEmpty(): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    replace?(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    replace?(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.util.function.BiFunction'
     * @return original return type: 'void'
     */
    replaceAll?(var0: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): void;
    /**
     * @return original return type: 'int'
     */
    size(): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    merge?(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null, var2: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.util.Map'
     * @return original return type: 'void'
     */
    putAll(var0: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    putIfAbsent?(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    compute?(var0: BasicOrJavaType | null, var1: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'void'
     */
    forEach?(var0: java_util_function_BiConsumer | JavaInterfaceProxy<java_util_function_BiConsumerInterface> | null): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    containsKey(var0: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.Function'
     * @return original return type: 'java.lang.Object'
     */
    computeIfAbsent?(var0: BasicOrJavaType | null, var1: java_util_function_Function | JavaInterfaceProxy<java_util_function_FunctionInterface> | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    containsValue(var0: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    getOrDefault?(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    computeIfPresent?(var0: BasicOrJavaType | null, var1: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): BasicOrJavaType | null;
}
/**
 * Create a proxy for the {@link SortedMap} interface.
 * All required methods in {@link SortedMapInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createSortedMapProxy(methods: SortedMapInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<SortedMapInterface>;
declare const SortedMap_base: typeof SortedMapClass;
/**
 * Class java.util.SortedMap.
 *
 * This actually imports the java class for further use.
 * The class {@link SortedMapClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class SortedMap extends SortedMap_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default SortedMap;
//# sourceMappingURL=SortedMap.d.ts.map