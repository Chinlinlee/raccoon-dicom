import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Comparator as java_util_Comparator, ComparatorInterface as java_util_ComparatorInterface } from "./Comparator";
/**
 * This class just defines types, you should import {@link Map$Entry} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Map$EntryClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'java.util.Map$Entry'
     * @return original return type: 'java.util.Map$Entry'
     */
    static copyOf(var0: Map$EntryClass | JavaInterfaceProxy<Map$EntryInterface> | null): Promise<Map$Entry | null>;
    /**
     * @param var0 original type: 'java.util.Map$Entry'
     * @return original return type: 'java.util.Map$Entry'
     */
    static copyOfSync(var0: Map$EntryClass | JavaInterfaceProxy<Map$EntryInterface> | null): Map$Entry | null;
    /**
     * @return original return type: 'java.lang.Object'
     */
    getValue(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    getValueSync(): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.lang.Object'
     */
    getKey(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    getKeySync(): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    setValue(var0: BasicOrJavaType | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    setValueSync(var0: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.util.Comparator'
     * @return original return type: 'java.util.Comparator'
     */
    static comparingByKey(var0: java_util_Comparator | JavaInterfaceProxy<java_util_ComparatorInterface> | null): Promise<java_util_Comparator | null>;
    /**
     * @param var0 original type: 'java.util.Comparator'
     * @return original return type: 'java.util.Comparator'
     */
    static comparingByKeySync(var0: java_util_Comparator | JavaInterfaceProxy<java_util_ComparatorInterface> | null): java_util_Comparator | null;
    /**
     * @return original return type: 'java.util.Comparator'
     */
    static comparingByKey(): Promise<java_util_Comparator | null>;
    /**
     * @return original return type: 'java.util.Comparator'
     */
    static comparingByKeySync(): java_util_Comparator | null;
    /**
     * @return original return type: 'java.util.Comparator'
     */
    static comparingByValue(): Promise<java_util_Comparator | null>;
    /**
     * @return original return type: 'java.util.Comparator'
     */
    static comparingByValueSync(): java_util_Comparator | null;
    /**
     * @param var0 original type: 'java.util.Comparator'
     * @return original return type: 'java.util.Comparator'
     */
    static comparingByValue(var0: java_util_Comparator | JavaInterfaceProxy<java_util_ComparatorInterface> | null): Promise<java_util_Comparator | null>;
    /**
     * @param var0 original type: 'java.util.Comparator'
     * @return original return type: 'java.util.Comparator'
     */
    static comparingByValueSync(var0: java_util_Comparator | JavaInterfaceProxy<java_util_ComparatorInterface> | null): java_util_Comparator | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createMap$EntryProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface Map$EntryInterface {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    hashCode(): number;
    /**
     * @return original return type: 'java.lang.Object'
     */
    getValue(): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.lang.Object'
     */
    getKey(): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    setValue(var0: BasicOrJavaType | null): BasicOrJavaType | null;
}
/**
 * Create a proxy for the {@link Map$Entry} interface.
 * All required methods in {@link Map$EntryInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createMap$EntryProxy(methods: Map$EntryInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<Map$EntryInterface>;
declare const Map$Entry_base: typeof Map$EntryClass;
/**
 * Class java.util.Map$Entry.
 *
 * This actually imports the java class for further use.
 * The class {@link Map$EntryClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Map$Entry extends Map$Entry_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Map$Entry;
//# sourceMappingURL=Map$Entry.d.ts.map