import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Integer as java_lang_Integer } from "./../lang/Integer";
import { LongConsumer as java_util_function_LongConsumer, LongConsumerInterface as java_util_function_LongConsumerInterface } from "./function/LongConsumer";
import { Consumer as java_util_function_Consumer, ConsumerInterface as java_util_function_ConsumerInterface } from "./function/Consumer";
import { Spliterator$OfPrimitive as java_util_Spliterator$OfPrimitive } from "./Spliterator$OfPrimitive";
import { Spliterator as java_util_Spliterator } from "./Spliterator";
import { Comparator as java_util_Comparator } from "./Comparator";
/**
 * This class just defines types, you should import {@link Spliterator$OfLong} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Spliterator$OfLongClass extends JavaClass {
    /**
     * Original type: 'int'
     */
    static readonly ORDERED: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly DISTINCT: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly SORTED: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly SIZED: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly NONNULL: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly IMMUTABLE: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CONCURRENT: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly SUBSIZED: java_lang_Integer | number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    forEachRemaining(var0: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    forEachRemainingSync(var0: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.util.function.LongConsumer'
     * @return original return type: 'void'
     */
    forEachRemaining(var0: java_util_function_LongConsumer | JavaInterfaceProxy<java_util_function_LongConsumerInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.function.LongConsumer'
     * @return original return type: 'void'
     */
    forEachRemainingSync(var0: java_util_function_LongConsumer | JavaInterfaceProxy<java_util_function_LongConsumerInterface> | null): void;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    forEachRemaining(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    forEachRemainingSync(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): void;
    /**
     * @return original return type: 'java.util.Spliterator$OfPrimitive'
     */
    trySplit(): Promise<java_util_Spliterator$OfPrimitive | null>;
    /**
     * @return original return type: 'java.util.Spliterator$OfPrimitive'
     */
    trySplitSync(): java_util_Spliterator$OfPrimitive | null;
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    trySplit(): Promise<java_util_Spliterator | null>;
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    trySplitSync(): java_util_Spliterator | null;
    /**
     * @return original return type: 'java.util.Spliterator$OfLong'
     */
    trySplit(): Promise<Spliterator$OfLong | null>;
    /**
     * @return original return type: 'java.util.Spliterator$OfLong'
     */
    trySplitSync(): Spliterator$OfLong | null;
    /**
     * @param var0 original type: 'java.util.function.LongConsumer'
     * @return original return type: 'boolean'
     */
    tryAdvance(var0: java_util_function_LongConsumer | JavaInterfaceProxy<java_util_function_LongConsumerInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.util.function.LongConsumer'
     * @return original return type: 'boolean'
     */
    tryAdvanceSync(var0: java_util_function_LongConsumer | JavaInterfaceProxy<java_util_function_LongConsumerInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'boolean'
     */
    tryAdvance(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'boolean'
     */
    tryAdvanceSync(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    tryAdvance(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    tryAdvanceSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    characteristics(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    characteristicsSync(): number;
    /**
     * @return original return type: 'long'
     */
    estimateSize(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    estimateSizeSync(): number;
    /**
     * @return original return type: 'long'
     */
    getExactSizeIfKnown(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    getExactSizeIfKnownSync(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    hasCharacteristics(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    hasCharacteristicsSync(var0: java_lang_Integer | number): boolean;
    /**
     * @return original return type: 'java.util.Comparator'
     */
    getComparator(): Promise<java_util_Comparator | null>;
    /**
     * @return original return type: 'java.util.Comparator'
     */
    getComparatorSync(): java_util_Comparator | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createSpliterator$OfLongProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface Spliterator$OfLongInterface {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    forEachRemaining?(var0: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.util.function.LongConsumer'
     * @return original return type: 'void'
     */
    forEachRemaining?(var0: java_util_function_LongConsumer | JavaInterfaceProxy<java_util_function_LongConsumerInterface> | null): void;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    forEachRemaining?(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): void;
    /**
     * @return original return type: 'java.util.Spliterator$OfPrimitive'
     */
    trySplit?(): java_util_Spliterator$OfPrimitive | null;
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    trySplit?(): java_util_Spliterator | null;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @return original return type: 'java.util.Spliterator$OfLong'
     */
    trySplit?(): Spliterator$OfLong | null;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @param var0 original type: 'java.util.function.LongConsumer'
     * @return original return type: 'boolean'
     */
    tryAdvance?(var0: java_util_function_LongConsumer | JavaInterfaceProxy<java_util_function_LongConsumerInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'boolean'
     */
    tryAdvance?(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    tryAdvance?(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    characteristics(): number;
    /**
     * @return original return type: 'long'
     */
    estimateSize(): number;
    /**
     * @return original return type: 'long'
     */
    getExactSizeIfKnown?(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    hasCharacteristics?(var0: java_lang_Integer | number): boolean;
    /**
     * @return original return type: 'java.util.Comparator'
     */
    getComparator?(): java_util_Comparator | null;
}
/**
 * Create a proxy for the {@link Spliterator$OfLong} interface.
 * All required methods in {@link Spliterator$OfLongInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createSpliterator$OfLongProxy(methods: Spliterator$OfLongInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<Spliterator$OfLongInterface>;
declare const Spliterator$OfLong_base: typeof Spliterator$OfLongClass;
/**
 * Class java.util.Spliterator$OfLong.
 *
 * This actually imports the java class for further use.
 * The class {@link Spliterator$OfLongClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Spliterator$OfLong extends Spliterator$OfLong_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Spliterator$OfLong;
//# sourceMappingURL=Spliterator$OfLong.d.ts.map