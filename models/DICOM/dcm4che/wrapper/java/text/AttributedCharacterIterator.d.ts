import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Map as java_util_Map } from "./../util/Map";
import { AttributedCharacterIterator$Attribute as java_text_AttributedCharacterIterator$Attribute } from "./AttributedCharacterIterator$Attribute";
import { Set as java_util_Set, SetInterface as java_util_SetInterface } from "./../util/Set";
import { Integer as java_lang_Integer } from "./../lang/Integer";
/**
 * This class just defines types, you should import {@link AttributedCharacterIterator} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class AttributedCharacterIteratorClass extends JavaClass {
    /**
     * Original type: 'char'
     */
    static readonly DONE: string | null;
    /**
     * @return original return type: 'java.util.Map'
     */
    getAttributes(): Promise<java_util_Map | null>;
    /**
     * @return original return type: 'java.util.Map'
     */
    getAttributesSync(): java_util_Map | null;
    /**
     * @param var0 original type: 'java.text.AttributedCharacterIterator$Attribute'
     * @return original return type: 'java.lang.Object'
     */
    getAttribute(var0: java_text_AttributedCharacterIterator$Attribute | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.text.AttributedCharacterIterator$Attribute'
     * @return original return type: 'java.lang.Object'
     */
    getAttributeSync(var0: java_text_AttributedCharacterIterator$Attribute | null): BasicOrJavaType | null;
    /**
     * @return original return type: 'int'
     */
    getRunStart(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getRunStartSync(): number;
    /**
     * @param var0 original type: 'java.util.Set'
     * @return original return type: 'int'
     */
    getRunStart(var0: java_util_Set | JavaInterfaceProxy<java_util_SetInterface> | null): Promise<number>;
    /**
     * @param var0 original type: 'java.util.Set'
     * @return original return type: 'int'
     */
    getRunStartSync(var0: java_util_Set | JavaInterfaceProxy<java_util_SetInterface> | null): number;
    /**
     * @param var0 original type: 'java.text.AttributedCharacterIterator$Attribute'
     * @return original return type: 'int'
     */
    getRunStart(var0: java_text_AttributedCharacterIterator$Attribute | null): Promise<number>;
    /**
     * @param var0 original type: 'java.text.AttributedCharacterIterator$Attribute'
     * @return original return type: 'int'
     */
    getRunStartSync(var0: java_text_AttributedCharacterIterator$Attribute | null): number;
    /**
     * @param var0 original type: 'java.util.Set'
     * @return original return type: 'int'
     */
    getRunLimit(var0: java_util_Set | JavaInterfaceProxy<java_util_SetInterface> | null): Promise<number>;
    /**
     * @param var0 original type: 'java.util.Set'
     * @return original return type: 'int'
     */
    getRunLimitSync(var0: java_util_Set | JavaInterfaceProxy<java_util_SetInterface> | null): number;
    /**
     * @param var0 original type: 'java.text.AttributedCharacterIterator$Attribute'
     * @return original return type: 'int'
     */
    getRunLimit(var0: java_text_AttributedCharacterIterator$Attribute | null): Promise<number>;
    /**
     * @param var0 original type: 'java.text.AttributedCharacterIterator$Attribute'
     * @return original return type: 'int'
     */
    getRunLimitSync(var0: java_text_AttributedCharacterIterator$Attribute | null): number;
    /**
     * @return original return type: 'int'
     */
    getRunLimit(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getRunLimitSync(): number;
    /**
     * @return original return type: 'java.util.Set'
     */
    getAllAttributeKeys(): Promise<java_util_Set | null>;
    /**
     * @return original return type: 'java.util.Set'
     */
    getAllAttributeKeysSync(): java_util_Set | null;
    /**
     * @return original return type: 'java.lang.Object'
     */
    clone(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    cloneSync(): BasicOrJavaType | null;
    /**
     * @return original return type: 'char'
     */
    next(): Promise<string | null>;
    /**
     * @return original return type: 'char'
     */
    nextSync(): string | null;
    /**
     * @return original return type: 'char'
     */
    last(): Promise<string | null>;
    /**
     * @return original return type: 'char'
     */
    lastSync(): string | null;
    /**
     * @return original return type: 'char'
     */
    first(): Promise<string | null>;
    /**
     * @return original return type: 'char'
     */
    firstSync(): string | null;
    /**
     * @return original return type: 'char'
     */
    current(): Promise<string | null>;
    /**
     * @return original return type: 'char'
     */
    currentSync(): string | null;
    /**
     * @return original return type: 'char'
     */
    previous(): Promise<string | null>;
    /**
     * @return original return type: 'char'
     */
    previousSync(): string | null;
    /**
     * @return original return type: 'int'
     */
    getIndex(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getIndexSync(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'char'
     */
    setIndex(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'char'
     */
    setIndexSync(var0: java_lang_Integer | number): string | null;
    /**
     * @return original return type: 'int'
     */
    getBeginIndex(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getBeginIndexSync(): number;
    /**
     * @return original return type: 'int'
     */
    getEndIndex(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getEndIndexSync(): number;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createAttributedCharacterIteratorProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface AttributedCharacterIteratorInterface {
    /**
     * @return original return type: 'java.util.Map'
     */
    getAttributes(): java_util_Map | null;
    /**
     * @param var0 original type: 'java.text.AttributedCharacterIterator$Attribute'
     * @return original return type: 'java.lang.Object'
     */
    getAttribute(var0: java_text_AttributedCharacterIterator$Attribute | null): BasicOrJavaType | null;
    /**
     * @return original return type: 'int'
     */
    getRunStart(): number;
    /**
     * @param var0 original type: 'java.util.Set'
     * @return original return type: 'int'
     */
    getRunStart(var0: java_util_Set | JavaInterfaceProxy<java_util_SetInterface> | null): number;
    /**
     * @param var0 original type: 'java.text.AttributedCharacterIterator$Attribute'
     * @return original return type: 'int'
     */
    getRunStart(var0: java_text_AttributedCharacterIterator$Attribute | null): number;
    /**
     * @param var0 original type: 'java.util.Set'
     * @return original return type: 'int'
     */
    getRunLimit(var0: java_util_Set | JavaInterfaceProxy<java_util_SetInterface> | null): number;
    /**
     * @param var0 original type: 'java.text.AttributedCharacterIterator$Attribute'
     * @return original return type: 'int'
     */
    getRunLimit(var0: java_text_AttributedCharacterIterator$Attribute | null): number;
    /**
     * @return original return type: 'int'
     */
    getRunLimit(): number;
    /**
     * @return original return type: 'java.util.Set'
     */
    getAllAttributeKeys(): java_util_Set | null;
    /**
     * @return original return type: 'java.lang.Object'
     */
    clone(): BasicOrJavaType | null;
    /**
     * @return original return type: 'char'
     */
    next(): string | null;
    /**
     * @return original return type: 'char'
     */
    last(): string | null;
    /**
     * @return original return type: 'char'
     */
    first(): string | null;
    /**
     * @return original return type: 'char'
     */
    current(): string | null;
    /**
     * @return original return type: 'char'
     */
    previous(): string | null;
    /**
     * @return original return type: 'int'
     */
    getIndex(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'char'
     */
    setIndex(var0: java_lang_Integer | number): string | null;
    /**
     * @return original return type: 'int'
     */
    getBeginIndex(): number;
    /**
     * @return original return type: 'int'
     */
    getEndIndex(): number;
}
/**
 * Create a proxy for the {@link AttributedCharacterIterator} interface.
 * All required methods in {@link AttributedCharacterIteratorInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createAttributedCharacterIteratorProxy(methods: AttributedCharacterIteratorInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<AttributedCharacterIteratorInterface>;
declare const AttributedCharacterIterator_base: typeof AttributedCharacterIteratorClass;
/**
 * Class java.text.AttributedCharacterIterator.
 *
 * This actually imports the java class for further use.
 * The class {@link AttributedCharacterIteratorClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class AttributedCharacterIterator extends AttributedCharacterIterator_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default AttributedCharacterIterator;
//# sourceMappingURL=AttributedCharacterIterator.d.ts.map