import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { List as java_util_List } from "./../../util/List";
import { Watchable as java_nio_file_Watchable } from "./Watchable";
/**
 * This class just defines types, you should import {@link WatchKey} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class WatchKeyClass extends JavaClass {
    /**
     * @return original return type: 'boolean'
     */
    reset(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    resetSync(): boolean;
    /**
     * @return original return type: 'void'
     */
    cancel(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    cancelSync(): void;
    /**
     * @return original return type: 'boolean'
     */
    isValid(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isValidSync(): boolean;
    /**
     * @return original return type: 'java.util.List'
     */
    pollEvents(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    pollEventsSync(): java_util_List | null;
    /**
     * @return original return type: 'java.nio.file.Watchable'
     */
    watchable(): Promise<java_nio_file_Watchable | null>;
    /**
     * @return original return type: 'java.nio.file.Watchable'
     */
    watchableSync(): java_nio_file_Watchable | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createWatchKeyProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface WatchKeyInterface {
    /**
     * @return original return type: 'boolean'
     */
    reset(): boolean;
    /**
     * @return original return type: 'void'
     */
    cancel(): void;
    /**
     * @return original return type: 'boolean'
     */
    isValid(): boolean;
    /**
     * @return original return type: 'java.util.List'
     */
    pollEvents(): java_util_List | null;
    /**
     * @return original return type: 'java.nio.file.Watchable'
     */
    watchable(): java_nio_file_Watchable | null;
}
/**
 * Create a proxy for the {@link WatchKey} interface.
 * All required methods in {@link WatchKeyInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createWatchKeyProxy(methods: WatchKeyInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<WatchKeyInterface>;
declare const WatchKey_base: typeof WatchKeyClass;
/**
 * Class java.nio.file.WatchKey.
 *
 * This actually imports the java class for further use.
 * The class {@link WatchKeyClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class WatchKey extends WatchKey_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default WatchKey;
//# sourceMappingURL=WatchKey.d.ts.map