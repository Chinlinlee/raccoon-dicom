import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { Path as java_nio_file_Path, PathInterface as java_nio_file_PathInterface } from "./../Path";
import { AccessMode as java_nio_file_AccessMode } from "./../AccessMode";
import { CopyOption as java_nio_file_CopyOption, CopyOptionInterface as java_nio_file_CopyOptionInterface } from "./../CopyOption";
import { URI as java_net_URI } from "./../../../net/URI";
import { FileAttribute as java_nio_file_attribute_FileAttribute, FileAttributeInterface as java_nio_file_attribute_FileAttributeInterface } from "./../attribute/FileAttribute";
import { FileSystem as java_nio_file_FileSystem } from "./../FileSystem";
import { List as java_util_List } from "./../../../util/List";
import { Map as java_util_Map, MapInterface as java_util_MapInterface } from "./../../../util/Map";
import { SeekableByteChannel as java_nio_channels_SeekableByteChannel } from "./../../channels/SeekableByteChannel";
import { Set as java_util_Set, SetInterface as java_util_SetInterface } from "./../../../util/Set";
import { InputStream as java_io_InputStream } from "./../../../io/InputStream";
import { OpenOption as java_nio_file_OpenOption, OpenOptionInterface as java_nio_file_OpenOptionInterface } from "./../OpenOption";
import { OutputStream as java_io_OutputStream } from "./../../../io/OutputStream";
import { FileChannel as java_nio_channels_FileChannel } from "./../../channels/FileChannel";
import { AsynchronousFileChannel as java_nio_channels_AsynchronousFileChannel } from "./../../channels/AsynchronousFileChannel";
import { ExecutorService as java_util_concurrent_ExecutorService, ExecutorServiceInterface as java_util_concurrent_ExecutorServiceInterface } from "./../../../util/concurrent/ExecutorService";
import { DirectoryStream as java_nio_file_DirectoryStream } from "./../DirectoryStream";
import { DirectoryStream$Filter as java_nio_file_DirectoryStream$Filter, DirectoryStream$FilterInterface as java_nio_file_DirectoryStream$FilterInterface } from "./../DirectoryStream$Filter";
import { FileStore as java_nio_file_FileStore } from "./../FileStore";
import { FileAttributeView as java_nio_file_attribute_FileAttributeView } from "./../attribute/FileAttributeView";
import { Class as java_lang_Class } from "./../../../lang/Class";
import { LinkOption as java_nio_file_LinkOption } from "./../LinkOption";
import { BasicFileAttributes as java_nio_file_attribute_BasicFileAttributes } from "./../attribute/BasicFileAttributes";
import { Long as java_lang_Long } from "./../../../lang/Long";
import { Integer as java_lang_Integer } from "./../../../lang/Integer";
/**
 * This class just defines types, you should import {@link FileSystemProvider} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class FileSystemProviderClass extends JavaClass {
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'boolean'
     */
    isHidden(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'boolean'
     */
    isHiddenSync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'void'
     */
    delete(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'void'
     */
    deleteSync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null): void;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.nio.file.AccessMode[]'
     * @return original return type: 'void'
     */
    checkAccess(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: (java_nio_file_AccessMode | null)[] | null): Promise<void>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.nio.file.AccessMode[]'
     * @return original return type: 'void'
     */
    checkAccessSync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: (java_nio_file_AccessMode | null)[] | null): void;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.nio.file.Path'
     * @param var2 original type: 'java.nio.file.CopyOption[]'
     * @return original return type: 'void'
     */
    copy(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var2: (java_nio_file_CopyOption | JavaInterfaceProxy<java_nio_file_CopyOptionInterface> | null)[] | null): Promise<void>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.nio.file.Path'
     * @param var2 original type: 'java.nio.file.CopyOption[]'
     * @return original return type: 'void'
     */
    copySync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var2: (java_nio_file_CopyOption | JavaInterfaceProxy<java_nio_file_CopyOptionInterface> | null)[] | null): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getScheme(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getSchemeSync(): string | null;
    /**
     * @param var0 original type: 'java.net.URI'
     * @return original return type: 'java.nio.file.Path'
     */
    getPath(var0: java_net_URI | null): Promise<java_nio_file_Path | null>;
    /**
     * @param var0 original type: 'java.net.URI'
     * @return original return type: 'java.nio.file.Path'
     */
    getPathSync(var0: java_net_URI | null): java_nio_file_Path | null;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.nio.file.attribute.FileAttribute[]'
     * @return original return type: 'void'
     */
    createDirectory(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: (java_nio_file_attribute_FileAttribute | JavaInterfaceProxy<java_nio_file_attribute_FileAttributeInterface> | null)[] | null): Promise<void>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.nio.file.attribute.FileAttribute[]'
     * @return original return type: 'void'
     */
    createDirectorySync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: (java_nio_file_attribute_FileAttribute | JavaInterfaceProxy<java_nio_file_attribute_FileAttributeInterface> | null)[] | null): void;
    /**
     * @param var0 original type: 'java.net.URI'
     * @return original return type: 'java.nio.file.FileSystem'
     */
    getFileSystem(var0: java_net_URI | null): Promise<java_nio_file_FileSystem | null>;
    /**
     * @param var0 original type: 'java.net.URI'
     * @return original return type: 'java.nio.file.FileSystem'
     */
    getFileSystemSync(var0: java_net_URI | null): java_nio_file_FileSystem | null;
    /**
     * @return original return type: 'java.util.List'
     */
    static installedProviders(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    static installedProvidersSync(): java_util_List | null;
    /**
     * @param var0 original type: 'java.net.URI'
     * @param var1 original type: 'java.util.Map'
     * @return original return type: 'java.nio.file.FileSystem'
     */
    newFileSystem(var0: java_net_URI | null, var1: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null): Promise<java_nio_file_FileSystem | null>;
    /**
     * @param var0 original type: 'java.net.URI'
     * @param var1 original type: 'java.util.Map'
     * @return original return type: 'java.nio.file.FileSystem'
     */
    newFileSystemSync(var0: java_net_URI | null, var1: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null): java_nio_file_FileSystem | null;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.util.Map'
     * @return original return type: 'java.nio.file.FileSystem'
     */
    newFileSystem(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null): Promise<java_nio_file_FileSystem | null>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.util.Map'
     * @return original return type: 'java.nio.file.FileSystem'
     */
    newFileSystemSync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null): java_nio_file_FileSystem | null;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.util.Set'
     * @param var2 original type: 'java.nio.file.attribute.FileAttribute[]'
     * @return original return type: 'java.nio.channels.SeekableByteChannel'
     */
    newByteChannel(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_util_Set | JavaInterfaceProxy<java_util_SetInterface> | null, var2: (java_nio_file_attribute_FileAttribute | JavaInterfaceProxy<java_nio_file_attribute_FileAttributeInterface> | null)[] | null): Promise<java_nio_channels_SeekableByteChannel | null>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.util.Set'
     * @param var2 original type: 'java.nio.file.attribute.FileAttribute[]'
     * @return original return type: 'java.nio.channels.SeekableByteChannel'
     */
    newByteChannelSync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_util_Set | JavaInterfaceProxy<java_util_SetInterface> | null, var2: (java_nio_file_attribute_FileAttribute | JavaInterfaceProxy<java_nio_file_attribute_FileAttributeInterface> | null)[] | null): java_nio_channels_SeekableByteChannel | null;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.nio.file.OpenOption[]'
     * @return original return type: 'java.io.InputStream'
     */
    newInputStream(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: (java_nio_file_OpenOption | JavaInterfaceProxy<java_nio_file_OpenOptionInterface> | null)[] | null): Promise<java_io_InputStream | null>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.nio.file.OpenOption[]'
     * @return original return type: 'java.io.InputStream'
     */
    newInputStreamSync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: (java_nio_file_OpenOption | JavaInterfaceProxy<java_nio_file_OpenOptionInterface> | null)[] | null): java_io_InputStream | null;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.nio.file.OpenOption[]'
     * @return original return type: 'java.io.OutputStream'
     */
    newOutputStream(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: (java_nio_file_OpenOption | JavaInterfaceProxy<java_nio_file_OpenOptionInterface> | null)[] | null): Promise<java_io_OutputStream | null>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.nio.file.OpenOption[]'
     * @return original return type: 'java.io.OutputStream'
     */
    newOutputStreamSync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: (java_nio_file_OpenOption | JavaInterfaceProxy<java_nio_file_OpenOptionInterface> | null)[] | null): java_io_OutputStream | null;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.util.Set'
     * @param var2 original type: 'java.nio.file.attribute.FileAttribute[]'
     * @return original return type: 'java.nio.channels.FileChannel'
     */
    newFileChannel(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_util_Set | JavaInterfaceProxy<java_util_SetInterface> | null, var2: (java_nio_file_attribute_FileAttribute | JavaInterfaceProxy<java_nio_file_attribute_FileAttributeInterface> | null)[] | null): Promise<java_nio_channels_FileChannel | null>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.util.Set'
     * @param var2 original type: 'java.nio.file.attribute.FileAttribute[]'
     * @return original return type: 'java.nio.channels.FileChannel'
     */
    newFileChannelSync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_util_Set | JavaInterfaceProxy<java_util_SetInterface> | null, var2: (java_nio_file_attribute_FileAttribute | JavaInterfaceProxy<java_nio_file_attribute_FileAttributeInterface> | null)[] | null): java_nio_channels_FileChannel | null;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.util.Set'
     * @param var2 original type: 'java.util.concurrent.ExecutorService'
     * @param var3 original type: 'java.nio.file.attribute.FileAttribute[]'
     * @return original return type: 'java.nio.channels.AsynchronousFileChannel'
     */
    newAsynchronousFileChannel(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_util_Set | JavaInterfaceProxy<java_util_SetInterface> | null, var2: java_util_concurrent_ExecutorService | JavaInterfaceProxy<java_util_concurrent_ExecutorServiceInterface> | null, var3: (java_nio_file_attribute_FileAttribute | JavaInterfaceProxy<java_nio_file_attribute_FileAttributeInterface> | null)[] | null): Promise<java_nio_channels_AsynchronousFileChannel | null>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.util.Set'
     * @param var2 original type: 'java.util.concurrent.ExecutorService'
     * @param var3 original type: 'java.nio.file.attribute.FileAttribute[]'
     * @return original return type: 'java.nio.channels.AsynchronousFileChannel'
     */
    newAsynchronousFileChannelSync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_util_Set | JavaInterfaceProxy<java_util_SetInterface> | null, var2: java_util_concurrent_ExecutorService | JavaInterfaceProxy<java_util_concurrent_ExecutorServiceInterface> | null, var3: (java_nio_file_attribute_FileAttribute | JavaInterfaceProxy<java_nio_file_attribute_FileAttributeInterface> | null)[] | null): java_nio_channels_AsynchronousFileChannel | null;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.nio.file.DirectoryStream$Filter'
     * @return original return type: 'java.nio.file.DirectoryStream'
     */
    newDirectoryStream(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_nio_file_DirectoryStream$Filter | JavaInterfaceProxy<java_nio_file_DirectoryStream$FilterInterface> | null): Promise<java_nio_file_DirectoryStream | null>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.nio.file.DirectoryStream$Filter'
     * @return original return type: 'java.nio.file.DirectoryStream'
     */
    newDirectoryStreamSync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_nio_file_DirectoryStream$Filter | JavaInterfaceProxy<java_nio_file_DirectoryStream$FilterInterface> | null): java_nio_file_DirectoryStream | null;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.nio.file.Path'
     * @param var2 original type: 'java.nio.file.attribute.FileAttribute[]'
     * @return original return type: 'void'
     */
    createSymbolicLink(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var2: (java_nio_file_attribute_FileAttribute | JavaInterfaceProxy<java_nio_file_attribute_FileAttributeInterface> | null)[] | null): Promise<void>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.nio.file.Path'
     * @param var2 original type: 'java.nio.file.attribute.FileAttribute[]'
     * @return original return type: 'void'
     */
    createSymbolicLinkSync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var2: (java_nio_file_attribute_FileAttribute | JavaInterfaceProxy<java_nio_file_attribute_FileAttributeInterface> | null)[] | null): void;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.nio.file.Path'
     * @return original return type: 'void'
     */
    createLink(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.nio.file.Path'
     * @return original return type: 'void'
     */
    createLinkSync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null): void;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'boolean'
     */
    deleteIfExists(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'boolean'
     */
    deleteIfExistsSync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'java.nio.file.Path'
     */
    readSymbolicLink(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null): Promise<java_nio_file_Path | null>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'java.nio.file.Path'
     */
    readSymbolicLinkSync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null): java_nio_file_Path | null;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.nio.file.Path'
     * @param var2 original type: 'java.nio.file.CopyOption[]'
     * @return original return type: 'void'
     */
    move(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var2: (java_nio_file_CopyOption | JavaInterfaceProxy<java_nio_file_CopyOptionInterface> | null)[] | null): Promise<void>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.nio.file.Path'
     * @param var2 original type: 'java.nio.file.CopyOption[]'
     * @return original return type: 'void'
     */
    moveSync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var2: (java_nio_file_CopyOption | JavaInterfaceProxy<java_nio_file_CopyOptionInterface> | null)[] | null): void;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.nio.file.Path'
     * @return original return type: 'boolean'
     */
    isSameFile(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.nio.file.Path'
     * @return original return type: 'boolean'
     */
    isSameFileSync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'java.nio.file.FileStore'
     */
    getFileStore(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null): Promise<java_nio_file_FileStore | null>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'java.nio.file.FileStore'
     */
    getFileStoreSync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null): java_nio_file_FileStore | null;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.lang.Class'
     * @param var2 original type: 'java.nio.file.LinkOption[]'
     * @return original return type: 'java.nio.file.attribute.FileAttributeView'
     */
    getFileAttributeView(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_lang_Class | null, var2: (java_nio_file_LinkOption | null)[] | null): Promise<java_nio_file_attribute_FileAttributeView | null>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.lang.Class'
     * @param var2 original type: 'java.nio.file.LinkOption[]'
     * @return original return type: 'java.nio.file.attribute.FileAttributeView'
     */
    getFileAttributeViewSync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_lang_Class | null, var2: (java_nio_file_LinkOption | null)[] | null): java_nio_file_attribute_FileAttributeView | null;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.lang.Class'
     * @param var2 original type: 'java.nio.file.LinkOption[]'
     * @return original return type: 'java.nio.file.attribute.BasicFileAttributes'
     */
    readAttributes(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_lang_Class | null, var2: (java_nio_file_LinkOption | null)[] | null): Promise<java_nio_file_attribute_BasicFileAttributes | null>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.lang.Class'
     * @param var2 original type: 'java.nio.file.LinkOption[]'
     * @return original return type: 'java.nio.file.attribute.BasicFileAttributes'
     */
    readAttributesSync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_lang_Class | null, var2: (java_nio_file_LinkOption | null)[] | null): java_nio_file_attribute_BasicFileAttributes | null;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.nio.file.LinkOption[]'
     * @return original return type: 'java.util.Map'
     */
    readAttributes(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: string | null, var2: (java_nio_file_LinkOption | null)[] | null): Promise<java_util_Map | null>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.nio.file.LinkOption[]'
     * @return original return type: 'java.util.Map'
     */
    readAttributesSync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: string | null, var2: (java_nio_file_LinkOption | null)[] | null): java_util_Map | null;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @param var3 original type: 'java.nio.file.LinkOption[]'
     * @return original return type: 'void'
     */
    setAttribute(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: string | null, var2: BasicOrJavaType | null, var3: (java_nio_file_LinkOption | null)[] | null): Promise<void>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @param var3 original type: 'java.nio.file.LinkOption[]'
     * @return original return type: 'void'
     */
    setAttributeSync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: string | null, var2: BasicOrJavaType | null, var3: (java_nio_file_LinkOption | null)[] | null): void;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const FileSystemProvider_base: typeof FileSystemProviderClass;
/**
 * Class java.nio.file.spi.FileSystemProvider.
 *
 * This actually imports the java class for further use.
 * The class {@link FileSystemProviderClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class FileSystemProvider extends FileSystemProvider_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default FileSystemProvider;
//# sourceMappingURL=FileSystemProvider.d.ts.map