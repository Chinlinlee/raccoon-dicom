import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Path as java_nio_file_Path, PathInterface as java_nio_file_PathInterface } from "./Path";
/**
 * This class just defines types, you should import {@link PathMatcher} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class PathMatcherClass extends JavaClass {
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'boolean'
     */
    matches(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'boolean'
     */
    matchesSync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null): boolean;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createPathMatcherProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface PathMatcherInterface {
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'boolean'
     */
    matches(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null): boolean;
}
/**
 * Create a proxy for the {@link PathMatcher} interface.
 * All required methods in {@link PathMatcherInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createPathMatcherProxy(methods: PathMatcherInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<PathMatcherInterface>;
declare const PathMatcher_base: typeof PathMatcherClass;
/**
 * Class java.nio.file.PathMatcher.
 *
 * This actually imports the java class for further use.
 * The class {@link PathMatcherClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class PathMatcher extends PathMatcher_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default PathMatcher;
//# sourceMappingURL=PathMatcher.d.ts.map