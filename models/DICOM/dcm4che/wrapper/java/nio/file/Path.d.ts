import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
import { Iterator as java_util_Iterator } from "./../../util/Iterator";
import { URI as java_net_URI } from "./../../net/URI";
import { WatchKey as java_nio_file_WatchKey } from "./WatchKey";
import { WatchService as java_nio_file_WatchService, WatchServiceInterface as java_nio_file_WatchServiceInterface } from "./WatchService";
import { WatchEvent$Kind as java_nio_file_WatchEvent$Kind, WatchEvent$KindInterface as java_nio_file_WatchEvent$KindInterface } from "./WatchEvent$Kind";
import { WatchEvent$Modifier as java_nio_file_WatchEvent$Modifier, WatchEvent$ModifierInterface as java_nio_file_WatchEvent$ModifierInterface } from "./WatchEvent$Modifier";
import { LinkOption as java_nio_file_LinkOption } from "./LinkOption";
import { File as java_io_File } from "./../../io/File";
import { FileSystem as java_nio_file_FileSystem } from "./FileSystem";
import { Spliterator as java_util_Spliterator } from "./../../util/Spliterator";
import { Consumer as java_util_function_Consumer, ConsumerInterface as java_util_function_ConsumerInterface } from "./../../util/function/Consumer";
/**
 * This class just defines types, you should import {@link Path} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class PathClass extends JavaClass {
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.nio.file.Path'
     */
    getName(var0: java_lang_Integer | number): Promise<Path | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.nio.file.Path'
     */
    getNameSync(var0: java_lang_Integer | number): Path | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'int'
     */
    compareTo(var0: PathClass | JavaInterfaceProxy<PathInterface> | null): Promise<number>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'int'
     */
    compareToSync(var0: PathClass | JavaInterfaceProxy<PathInterface> | null): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareTo(var0: BasicOrJavaType | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareToSync(var0: BasicOrJavaType | null): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    startsWith(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    startsWithSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'boolean'
     */
    startsWith(var0: PathClass | JavaInterfaceProxy<PathInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'boolean'
     */
    startsWithSync(var0: PathClass | JavaInterfaceProxy<PathInterface> | null): boolean;
    /**
     * @return original return type: 'java.util.Iterator'
     */
    iterator(): Promise<java_util_Iterator | null>;
    /**
     * @return original return type: 'java.util.Iterator'
     */
    iteratorSync(): java_util_Iterator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String[]'
     * @return original return type: 'java.nio.file.Path'
     */
    static of(var0: string | null, var1: (string | null)[] | null): Promise<Path | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String[]'
     * @return original return type: 'java.nio.file.Path'
     */
    static ofSync(var0: string | null, var1: (string | null)[] | null): Path | null;
    /**
     * @param var0 original type: 'java.net.URI'
     * @return original return type: 'java.nio.file.Path'
     */
    static of(var0: java_net_URI | null): Promise<Path | null>;
    /**
     * @param var0 original type: 'java.net.URI'
     * @return original return type: 'java.nio.file.Path'
     */
    static ofSync(var0: java_net_URI | null): Path | null;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'boolean'
     */
    endsWith(var0: PathClass | JavaInterfaceProxy<PathInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'boolean'
     */
    endsWithSync(var0: PathClass | JavaInterfaceProxy<PathInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    endsWith(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    endsWithSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'java.nio.file.WatchService'
     * @param var1 original type: 'java.nio.file.WatchEvent$Kind[]'
     * @return original return type: 'java.nio.file.WatchKey'
     */
    register(var0: java_nio_file_WatchService | JavaInterfaceProxy<java_nio_file_WatchServiceInterface> | null, var1: (java_nio_file_WatchEvent$Kind | JavaInterfaceProxy<java_nio_file_WatchEvent$KindInterface> | null)[] | null): Promise<java_nio_file_WatchKey | null>;
    /**
     * @param var0 original type: 'java.nio.file.WatchService'
     * @param var1 original type: 'java.nio.file.WatchEvent$Kind[]'
     * @return original return type: 'java.nio.file.WatchKey'
     */
    registerSync(var0: java_nio_file_WatchService | JavaInterfaceProxy<java_nio_file_WatchServiceInterface> | null, var1: (java_nio_file_WatchEvent$Kind | JavaInterfaceProxy<java_nio_file_WatchEvent$KindInterface> | null)[] | null): java_nio_file_WatchKey | null;
    /**
     * @param var0 original type: 'java.nio.file.WatchService'
     * @param var1 original type: 'java.nio.file.WatchEvent$Kind[]'
     * @param var2 original type: 'java.nio.file.WatchEvent$Modifier[]'
     * @return original return type: 'java.nio.file.WatchKey'
     */
    register(var0: java_nio_file_WatchService | JavaInterfaceProxy<java_nio_file_WatchServiceInterface> | null, var1: (java_nio_file_WatchEvent$Kind | JavaInterfaceProxy<java_nio_file_WatchEvent$KindInterface> | null)[] | null, var2: (java_nio_file_WatchEvent$Modifier | JavaInterfaceProxy<java_nio_file_WatchEvent$ModifierInterface> | null)[] | null): Promise<java_nio_file_WatchKey | null>;
    /**
     * @param var0 original type: 'java.nio.file.WatchService'
     * @param var1 original type: 'java.nio.file.WatchEvent$Kind[]'
     * @param var2 original type: 'java.nio.file.WatchEvent$Modifier[]'
     * @return original return type: 'java.nio.file.WatchKey'
     */
    registerSync(var0: java_nio_file_WatchService | JavaInterfaceProxy<java_nio_file_WatchServiceInterface> | null, var1: (java_nio_file_WatchEvent$Kind | JavaInterfaceProxy<java_nio_file_WatchEvent$KindInterface> | null)[] | null, var2: (java_nio_file_WatchEvent$Modifier | JavaInterfaceProxy<java_nio_file_WatchEvent$ModifierInterface> | null)[] | null): java_nio_file_WatchKey | null;
    /**
     * @return original return type: 'boolean'
     */
    isAbsolute(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isAbsoluteSync(): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.nio.file.Path'
     */
    resolve(var0: string | null): Promise<Path | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.nio.file.Path'
     */
    resolveSync(var0: string | null): Path | null;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'java.nio.file.Path'
     */
    resolve(var0: PathClass | JavaInterfaceProxy<PathInterface> | null): Promise<Path | null>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'java.nio.file.Path'
     */
    resolveSync(var0: PathClass | JavaInterfaceProxy<PathInterface> | null): Path | null;
    /**
     * @return original return type: 'java.nio.file.Path'
     */
    getParent(): Promise<Path | null>;
    /**
     * @return original return type: 'java.nio.file.Path'
     */
    getParentSync(): Path | null;
    /**
     * @return original return type: 'java.nio.file.Path'
     */
    getRoot(): Promise<Path | null>;
    /**
     * @return original return type: 'java.nio.file.Path'
     */
    getRootSync(): Path | null;
    /**
     * @return original return type: 'java.nio.file.Path'
     */
    normalize(): Promise<Path | null>;
    /**
     * @return original return type: 'java.nio.file.Path'
     */
    normalizeSync(): Path | null;
    /**
     * @param var0 original type: 'java.nio.file.LinkOption[]'
     * @return original return type: 'java.nio.file.Path'
     */
    toRealPath(var0: (java_nio_file_LinkOption | null)[] | null): Promise<Path | null>;
    /**
     * @param var0 original type: 'java.nio.file.LinkOption[]'
     * @return original return type: 'java.nio.file.Path'
     */
    toRealPathSync(var0: (java_nio_file_LinkOption | null)[] | null): Path | null;
    /**
     * @return original return type: 'java.io.File'
     */
    toFile(): Promise<java_io_File | null>;
    /**
     * @return original return type: 'java.io.File'
     */
    toFileSync(): java_io_File | null;
    /**
     * @return original return type: 'java.nio.file.Path'
     */
    getFileName(): Promise<Path | null>;
    /**
     * @return original return type: 'java.nio.file.Path'
     */
    getFileNameSync(): Path | null;
    /**
     * @return original return type: 'java.nio.file.FileSystem'
     */
    getFileSystem(): Promise<java_nio_file_FileSystem | null>;
    /**
     * @return original return type: 'java.nio.file.FileSystem'
     */
    getFileSystemSync(): java_nio_file_FileSystem | null;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'java.nio.file.Path'
     */
    relativize(var0: PathClass | JavaInterfaceProxy<PathInterface> | null): Promise<Path | null>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'java.nio.file.Path'
     */
    relativizeSync(var0: PathClass | JavaInterfaceProxy<PathInterface> | null): Path | null;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'java.nio.file.Path'
     */
    resolveSibling(var0: PathClass | JavaInterfaceProxy<PathInterface> | null): Promise<Path | null>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'java.nio.file.Path'
     */
    resolveSiblingSync(var0: PathClass | JavaInterfaceProxy<PathInterface> | null): Path | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.nio.file.Path'
     */
    resolveSibling(var0: string | null): Promise<Path | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.nio.file.Path'
     */
    resolveSiblingSync(var0: string | null): Path | null;
    /**
     * @return original return type: 'int'
     */
    getNameCount(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getNameCountSync(): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.nio.file.Path'
     */
    subpath(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<Path | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.nio.file.Path'
     */
    subpathSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Path | null;
    /**
     * @return original return type: 'java.net.URI'
     */
    toUri(): Promise<java_net_URI | null>;
    /**
     * @return original return type: 'java.net.URI'
     */
    toUriSync(): java_net_URI | null;
    /**
     * @return original return type: 'java.nio.file.Path'
     */
    toAbsolutePath(): Promise<Path | null>;
    /**
     * @return original return type: 'java.nio.file.Path'
     */
    toAbsolutePathSync(): Path | null;
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    spliterator(): Promise<java_util_Spliterator | null>;
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    spliteratorSync(): java_util_Spliterator | null;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    forEach(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    forEachSync(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createPathProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface PathInterface {
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.nio.file.Path'
     */
    getName(var0: java_lang_Integer | number): Path | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): number;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'int'
     */
    compareTo?(var0: PathClass | JavaInterfaceProxy<PathInterface> | null): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareTo?(var0: BasicOrJavaType | null): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    startsWith?(var0: string | null): boolean;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'boolean'
     */
    startsWith?(var0: PathClass | JavaInterfaceProxy<PathInterface> | null): boolean;
    /**
     * @return original return type: 'java.util.Iterator'
     */
    iterator?(): java_util_Iterator | null;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'boolean'
     */
    endsWith?(var0: PathClass | JavaInterfaceProxy<PathInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    endsWith?(var0: string | null): boolean;
    /**
     * @param var0 original type: 'java.nio.file.WatchService'
     * @param var1 original type: 'java.nio.file.WatchEvent$Kind[]'
     * @return original return type: 'java.nio.file.WatchKey'
     */
    register?(var0: java_nio_file_WatchService | JavaInterfaceProxy<java_nio_file_WatchServiceInterface> | null, var1: (java_nio_file_WatchEvent$Kind | JavaInterfaceProxy<java_nio_file_WatchEvent$KindInterface> | null)[] | null): java_nio_file_WatchKey | null;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @param var0 original type: 'java.nio.file.WatchService'
     * @param var1 original type: 'java.nio.file.WatchEvent$Kind[]'
     * @param var2 original type: 'java.nio.file.WatchEvent$Modifier[]'
     * @return original return type: 'java.nio.file.WatchKey'
     */
    register?(var0: java_nio_file_WatchService | JavaInterfaceProxy<java_nio_file_WatchServiceInterface> | null, var1: (java_nio_file_WatchEvent$Kind | JavaInterfaceProxy<java_nio_file_WatchEvent$KindInterface> | null)[] | null, var2: (java_nio_file_WatchEvent$Modifier | JavaInterfaceProxy<java_nio_file_WatchEvent$ModifierInterface> | null)[] | null): java_nio_file_WatchKey | null;
    /**
     * @return original return type: 'boolean'
     */
    isAbsolute(): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.nio.file.Path'
     */
    resolve?(var0: string | null): Path | null;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'java.nio.file.Path'
     */
    resolve?(var0: PathClass | JavaInterfaceProxy<PathInterface> | null): Path | null;
    /**
     * @return original return type: 'java.nio.file.Path'
     */
    getParent(): Path | null;
    /**
     * @return original return type: 'java.nio.file.Path'
     */
    getRoot(): Path | null;
    /**
     * @return original return type: 'java.nio.file.Path'
     */
    normalize(): Path | null;
    /**
     * @param var0 original type: 'java.nio.file.LinkOption[]'
     * @return original return type: 'java.nio.file.Path'
     */
    toRealPath(var0: (java_nio_file_LinkOption | null)[] | null): Path | null;
    /**
     * @return original return type: 'java.io.File'
     */
    toFile?(): java_io_File | null;
    /**
     * @return original return type: 'java.nio.file.Path'
     */
    getFileName(): Path | null;
    /**
     * @return original return type: 'java.nio.file.FileSystem'
     */
    getFileSystem(): java_nio_file_FileSystem | null;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'java.nio.file.Path'
     */
    relativize(var0: PathClass | JavaInterfaceProxy<PathInterface> | null): Path | null;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @return original return type: 'java.nio.file.Path'
     */
    resolveSibling?(var0: PathClass | JavaInterfaceProxy<PathInterface> | null): Path | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.nio.file.Path'
     */
    resolveSibling?(var0: string | null): Path | null;
    /**
     * @return original return type: 'int'
     */
    getNameCount(): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.nio.file.Path'
     */
    subpath(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Path | null;
    /**
     * @return original return type: 'java.net.URI'
     */
    toUri(): java_net_URI | null;
    /**
     * @return original return type: 'java.nio.file.Path'
     */
    toAbsolutePath(): Path | null;
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    spliterator?(): java_util_Spliterator | null;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    forEach?(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): void;
}
/**
 * Create a proxy for the {@link Path} interface.
 * All required methods in {@link PathInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createPathProxy(methods: PathInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<PathInterface>;
declare const Path_base: typeof PathClass;
/**
 * Class java.nio.file.Path.
 *
 * This actually imports the java class for further use.
 * The class {@link PathClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Path extends Path_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Path;
//# sourceMappingURL=Path.d.ts.map