import { JavaClass, BasicOrJavaType } from "java-bridge";
import { FileSystemProvider as java_nio_file_spi_FileSystemProvider } from "./spi/FileSystemProvider";
import { Path as java_nio_file_Path } from "./Path";
import { Iterable as java_lang_Iterable } from "./../../lang/Iterable";
import { Set as java_util_Set } from "./../../util/Set";
import { PathMatcher as java_nio_file_PathMatcher } from "./PathMatcher";
import { UserPrincipalLookupService as java_nio_file_attribute_UserPrincipalLookupService } from "./attribute/UserPrincipalLookupService";
import { WatchService as java_nio_file_WatchService } from "./WatchService";
import { Long as java_lang_Long } from "./../../lang/Long";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
import { Class as java_lang_Class } from "./../../lang/Class";
/**
 * This class just defines types, you should import {@link FileSystem} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class FileSystemClass extends JavaClass {
    /**
     * @return original return type: 'boolean'
     */
    isOpen(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isOpenSync(): boolean;
    /**
     * @return original return type: 'java.nio.file.spi.FileSystemProvider'
     */
    provider(): Promise<java_nio_file_spi_FileSystemProvider | null>;
    /**
     * @return original return type: 'java.nio.file.spi.FileSystemProvider'
     */
    providerSync(): java_nio_file_spi_FileSystemProvider | null;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String[]'
     * @return original return type: 'java.nio.file.Path'
     */
    getPath(var0: string | null, var1: (string | null)[] | null): Promise<java_nio_file_Path | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String[]'
     * @return original return type: 'java.nio.file.Path'
     */
    getPathSync(var0: string | null, var1: (string | null)[] | null): java_nio_file_Path | null;
    /**
     * @return original return type: 'boolean'
     */
    isReadOnly(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isReadOnlySync(): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    getSeparator(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getSeparatorSync(): string | null;
    /**
     * @return original return type: 'java.lang.Iterable'
     */
    getRootDirectories(): Promise<java_lang_Iterable | null>;
    /**
     * @return original return type: 'java.lang.Iterable'
     */
    getRootDirectoriesSync(): java_lang_Iterable | null;
    /**
     * @return original return type: 'java.lang.Iterable'
     */
    getFileStores(): Promise<java_lang_Iterable | null>;
    /**
     * @return original return type: 'java.lang.Iterable'
     */
    getFileStoresSync(): java_lang_Iterable | null;
    /**
     * @return original return type: 'java.util.Set'
     */
    supportedFileAttributeViews(): Promise<java_util_Set | null>;
    /**
     * @return original return type: 'java.util.Set'
     */
    supportedFileAttributeViewsSync(): java_util_Set | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.nio.file.PathMatcher'
     */
    getPathMatcher(var0: string | null): Promise<java_nio_file_PathMatcher | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.nio.file.PathMatcher'
     */
    getPathMatcherSync(var0: string | null): java_nio_file_PathMatcher | null;
    /**
     * @return original return type: 'java.nio.file.attribute.UserPrincipalLookupService'
     */
    getUserPrincipalLookupService(): Promise<java_nio_file_attribute_UserPrincipalLookupService | null>;
    /**
     * @return original return type: 'java.nio.file.attribute.UserPrincipalLookupService'
     */
    getUserPrincipalLookupServiceSync(): java_nio_file_attribute_UserPrincipalLookupService | null;
    /**
     * @return original return type: 'java.nio.file.WatchService'
     */
    newWatchService(): Promise<java_nio_file_WatchService | null>;
    /**
     * @return original return type: 'java.nio.file.WatchService'
     */
    newWatchServiceSync(): java_nio_file_WatchService | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const FileSystem_base: typeof FileSystemClass;
/**
 * Class java.nio.file.FileSystem.
 *
 * This actually imports the java class for further use.
 * The class {@link FileSystemClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class FileSystem extends FileSystem_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default FileSystem;
//# sourceMappingURL=FileSystem.d.ts.map