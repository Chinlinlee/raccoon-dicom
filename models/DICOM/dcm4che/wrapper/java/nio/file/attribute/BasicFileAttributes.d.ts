import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { FileTime as java_nio_file_attribute_FileTime } from "./FileTime";
/**
 * This class just defines types, you should import {@link BasicFileAttributes} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BasicFileAttributesClass extends JavaClass {
    /**
     * @return original return type: 'long'
     */
    size(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    sizeSync(): number;
    /**
     * @return original return type: 'boolean'
     */
    isDirectory(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isDirectorySync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isRegularFile(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isRegularFileSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isOther(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isOtherSync(): boolean;
    /**
     * @return original return type: 'java.nio.file.attribute.FileTime'
     */
    lastModifiedTime(): Promise<java_nio_file_attribute_FileTime | null>;
    /**
     * @return original return type: 'java.nio.file.attribute.FileTime'
     */
    lastModifiedTimeSync(): java_nio_file_attribute_FileTime | null;
    /**
     * @return original return type: 'java.nio.file.attribute.FileTime'
     */
    lastAccessTime(): Promise<java_nio_file_attribute_FileTime | null>;
    /**
     * @return original return type: 'java.nio.file.attribute.FileTime'
     */
    lastAccessTimeSync(): java_nio_file_attribute_FileTime | null;
    /**
     * @return original return type: 'java.nio.file.attribute.FileTime'
     */
    creationTime(): Promise<java_nio_file_attribute_FileTime | null>;
    /**
     * @return original return type: 'java.nio.file.attribute.FileTime'
     */
    creationTimeSync(): java_nio_file_attribute_FileTime | null;
    /**
     * @return original return type: 'boolean'
     */
    isSymbolicLink(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isSymbolicLinkSync(): boolean;
    /**
     * @return original return type: 'java.lang.Object'
     */
    fileKey(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    fileKeySync(): BasicOrJavaType | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createBasicFileAttributesProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface BasicFileAttributesInterface {
    /**
     * @return original return type: 'long'
     */
    size(): number;
    /**
     * @return original return type: 'boolean'
     */
    isDirectory(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isRegularFile(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isOther(): boolean;
    /**
     * @return original return type: 'java.nio.file.attribute.FileTime'
     */
    lastModifiedTime(): java_nio_file_attribute_FileTime | null;
    /**
     * @return original return type: 'java.nio.file.attribute.FileTime'
     */
    lastAccessTime(): java_nio_file_attribute_FileTime | null;
    /**
     * @return original return type: 'java.nio.file.attribute.FileTime'
     */
    creationTime(): java_nio_file_attribute_FileTime | null;
    /**
     * @return original return type: 'boolean'
     */
    isSymbolicLink(): boolean;
    /**
     * @return original return type: 'java.lang.Object'
     */
    fileKey(): BasicOrJavaType | null;
}
/**
 * Create a proxy for the {@link BasicFileAttributes} interface.
 * All required methods in {@link BasicFileAttributesInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createBasicFileAttributesProxy(methods: BasicFileAttributesInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<BasicFileAttributesInterface>;
declare const BasicFileAttributes_base: typeof BasicFileAttributesClass;
/**
 * Class java.nio.file.attribute.BasicFileAttributes.
 *
 * This actually imports the java class for further use.
 * The class {@link BasicFileAttributesClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BasicFileAttributes extends BasicFileAttributes_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default BasicFileAttributes;
//# sourceMappingURL=BasicFileAttributes.d.ts.map