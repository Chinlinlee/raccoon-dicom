import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Iterator as java_util_Iterator } from "./../../util/Iterator";
import { Spliterator as java_util_Spliterator } from "./../../util/Spliterator";
import { Consumer as java_util_function_Consumer, ConsumerInterface as java_util_function_ConsumerInterface } from "./../../util/function/Consumer";
/**
 * This class just defines types, you should import {@link DirectoryStream} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DirectoryStreamClass extends JavaClass {
    /**
     * @return original return type: 'java.util.Iterator'
     */
    iterator(): Promise<java_util_Iterator | null>;
    /**
     * @return original return type: 'java.util.Iterator'
     */
    iteratorSync(): java_util_Iterator | null;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    spliterator(): Promise<java_util_Spliterator | null>;
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    spliteratorSync(): java_util_Spliterator | null;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    forEach(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    forEachSync(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createDirectoryStreamProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface DirectoryStreamInterface {
    /**
     * @return original return type: 'java.util.Iterator'
     */
    iterator(): java_util_Iterator | null;
    /**
     * @return original return type: 'void'
     */
    close(): void;
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    spliterator?(): java_util_Spliterator | null;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    forEach?(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): void;
}
/**
 * Create a proxy for the {@link DirectoryStream} interface.
 * All required methods in {@link DirectoryStreamInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createDirectoryStreamProxy(methods: DirectoryStreamInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<DirectoryStreamInterface>;
declare const DirectoryStream_base: typeof DirectoryStreamClass;
/**
 * Class java.nio.file.DirectoryStream.
 *
 * This actually imports the java class for further use.
 * The class {@link DirectoryStreamClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DirectoryStream extends DirectoryStream_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default DirectoryStream;
//# sourceMappingURL=DirectoryStream.d.ts.map