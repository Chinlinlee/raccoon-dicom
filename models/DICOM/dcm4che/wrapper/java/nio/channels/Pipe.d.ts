import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Pipe$SourceChannel as java_nio_channels_Pipe$SourceChannel } from "./Pipe$SourceChannel";
import { Pipe$SinkChannel as java_nio_channels_Pipe$SinkChannel } from "./Pipe$SinkChannel";
import { Long as java_lang_Long } from "./../../lang/Long";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
import { Class as java_lang_Class } from "./../../lang/Class";
/**
 * This class just defines types, you should import {@link Pipe} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class PipeClass extends JavaClass {
    /**
     * @return original return type: 'java.nio.channels.Pipe$SourceChannel'
     */
    source(): Promise<java_nio_channels_Pipe$SourceChannel | null>;
    /**
     * @return original return type: 'java.nio.channels.Pipe$SourceChannel'
     */
    sourceSync(): java_nio_channels_Pipe$SourceChannel | null;
    /**
     * @return original return type: 'java.nio.channels.Pipe'
     */
    static open(): Promise<Pipe | null>;
    /**
     * @return original return type: 'java.nio.channels.Pipe'
     */
    static openSync(): Pipe | null;
    /**
     * @return original return type: 'java.nio.channels.Pipe$SinkChannel'
     */
    sink(): Promise<java_nio_channels_Pipe$SinkChannel | null>;
    /**
     * @return original return type: 'java.nio.channels.Pipe$SinkChannel'
     */
    sinkSync(): java_nio_channels_Pipe$SinkChannel | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const Pipe_base: typeof PipeClass;
/**
 * Class java.nio.channels.Pipe.
 *
 * This actually imports the java class for further use.
 * The class {@link PipeClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Pipe extends Pipe_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Pipe;
//# sourceMappingURL=Pipe.d.ts.map