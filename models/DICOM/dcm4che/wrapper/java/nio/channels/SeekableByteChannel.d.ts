import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Long as java_lang_Long } from "./../../lang/Long";
import { ByteBuffer as java_nio_ByteBuffer } from "./../ByteBuffer";
/**
 * This class just defines types, you should import {@link SeekableByteChannel} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class SeekableByteChannelClass extends JavaClass {
    /**
     * @return original return type: 'long'
     */
    position(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    positionSync(): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.nio.channels.SeekableByteChannel'
     */
    position(var0: java_lang_Long | bigint | number): Promise<SeekableByteChannel | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.nio.channels.SeekableByteChannel'
     */
    positionSync(var0: java_lang_Long | bigint | number): SeekableByteChannel | null;
    /**
     * @return original return type: 'long'
     */
    size(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    sizeSync(): number;
    /**
     * @param var0 original type: 'java.nio.ByteBuffer'
     * @return original return type: 'int'
     */
    write(var0: java_nio_ByteBuffer | null): Promise<number>;
    /**
     * @param var0 original type: 'java.nio.ByteBuffer'
     * @return original return type: 'int'
     */
    writeSync(var0: java_nio_ByteBuffer | null): number;
    /**
     * @param var0 original type: 'java.nio.ByteBuffer'
     * @return original return type: 'int'
     */
    read(var0: java_nio_ByteBuffer | null): Promise<number>;
    /**
     * @param var0 original type: 'java.nio.ByteBuffer'
     * @return original return type: 'int'
     */
    readSync(var0: java_nio_ByteBuffer | null): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.nio.channels.SeekableByteChannel'
     */
    truncate(var0: java_lang_Long | bigint | number): Promise<SeekableByteChannel | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.nio.channels.SeekableByteChannel'
     */
    truncateSync(var0: java_lang_Long | bigint | number): SeekableByteChannel | null;
    /**
     * @return original return type: 'boolean'
     */
    isOpen(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isOpenSync(): boolean;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createSeekableByteChannelProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface SeekableByteChannelInterface {
    /**
     * @return original return type: 'long'
     */
    position(): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.nio.channels.SeekableByteChannel'
     */
    position(var0: java_lang_Long | bigint | number): SeekableByteChannel | null;
    /**
     * @return original return type: 'long'
     */
    size(): number;
    /**
     * @param var0 original type: 'java.nio.ByteBuffer'
     * @return original return type: 'int'
     */
    write(var0: java_nio_ByteBuffer | null): number;
    /**
     * @param var0 original type: 'java.nio.ByteBuffer'
     * @return original return type: 'int'
     */
    read(var0: java_nio_ByteBuffer | null): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.nio.channels.SeekableByteChannel'
     */
    truncate(var0: java_lang_Long | bigint | number): SeekableByteChannel | null;
    /**
     * @return original return type: 'boolean'
     */
    isOpen(): boolean;
    /**
     * @return original return type: 'void'
     */
    close(): void;
}
/**
 * Create a proxy for the {@link SeekableByteChannel} interface.
 * All required methods in {@link SeekableByteChannelInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createSeekableByteChannelProxy(methods: SeekableByteChannelInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<SeekableByteChannelInterface>;
declare const SeekableByteChannel_base: typeof SeekableByteChannelClass;
/**
 * Class java.nio.channels.SeekableByteChannel.
 *
 * This actually imports the java class for further use.
 * The class {@link SeekableByteChannelClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class SeekableByteChannel extends SeekableByteChannel_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default SeekableByteChannel;
//# sourceMappingURL=SeekableByteChannel.d.ts.map