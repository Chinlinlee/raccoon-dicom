import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { MembershipKey as java_nio_channels_MembershipKey } from "./MembershipKey";
import { InetAddress as java_net_InetAddress } from "./../../net/InetAddress";
import { NetworkInterface as java_net_NetworkInterface } from "./../../net/NetworkInterface";
import { NetworkChannel as java_nio_channels_NetworkChannel } from "./NetworkChannel";
import { SocketAddress as java_net_SocketAddress } from "./../../net/SocketAddress";
import { SocketOption as java_net_SocketOption, SocketOptionInterface as java_net_SocketOptionInterface } from "./../../net/SocketOption";
import { Set as java_util_Set } from "./../../util/Set";
/**
 * This class just defines types, you should import {@link MulticastChannel} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class MulticastChannelClass extends JavaClass {
    /**
     * @param var0 original type: 'java.net.InetAddress'
     * @param var1 original type: 'java.net.NetworkInterface'
     * @return original return type: 'java.nio.channels.MembershipKey'
     */
    join(var0: java_net_InetAddress | null, var1: java_net_NetworkInterface | null): Promise<java_nio_channels_MembershipKey | null>;
    /**
     * @param var0 original type: 'java.net.InetAddress'
     * @param var1 original type: 'java.net.NetworkInterface'
     * @return original return type: 'java.nio.channels.MembershipKey'
     */
    joinSync(var0: java_net_InetAddress | null, var1: java_net_NetworkInterface | null): java_nio_channels_MembershipKey | null;
    /**
     * @param var0 original type: 'java.net.InetAddress'
     * @param var1 original type: 'java.net.NetworkInterface'
     * @param var2 original type: 'java.net.InetAddress'
     * @return original return type: 'java.nio.channels.MembershipKey'
     */
    join(var0: java_net_InetAddress | null, var1: java_net_NetworkInterface | null, var2: java_net_InetAddress | null): Promise<java_nio_channels_MembershipKey | null>;
    /**
     * @param var0 original type: 'java.net.InetAddress'
     * @param var1 original type: 'java.net.NetworkInterface'
     * @param var2 original type: 'java.net.InetAddress'
     * @return original return type: 'java.nio.channels.MembershipKey'
     */
    joinSync(var0: java_net_InetAddress | null, var1: java_net_NetworkInterface | null, var2: java_net_InetAddress | null): java_nio_channels_MembershipKey | null;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @param var0 original type: 'java.net.SocketAddress'
     * @return original return type: 'java.nio.channels.NetworkChannel'
     */
    bind(var0: java_net_SocketAddress | null): Promise<java_nio_channels_NetworkChannel | null>;
    /**
     * @param var0 original type: 'java.net.SocketAddress'
     * @return original return type: 'java.nio.channels.NetworkChannel'
     */
    bindSync(var0: java_net_SocketAddress | null): java_nio_channels_NetworkChannel | null;
    /**
     * @param var0 original type: 'java.net.SocketOption'
     * @return original return type: 'java.lang.Object'
     */
    getOption(var0: java_net_SocketOption | JavaInterfaceProxy<java_net_SocketOptionInterface> | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.net.SocketOption'
     * @return original return type: 'java.lang.Object'
     */
    getOptionSync(var0: java_net_SocketOption | JavaInterfaceProxy<java_net_SocketOptionInterface> | null): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.net.SocketAddress'
     */
    getLocalAddress(): Promise<java_net_SocketAddress | null>;
    /**
     * @return original return type: 'java.net.SocketAddress'
     */
    getLocalAddressSync(): java_net_SocketAddress | null;
    /**
     * @param var0 original type: 'java.net.SocketOption'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.nio.channels.NetworkChannel'
     */
    setOption(var0: java_net_SocketOption | JavaInterfaceProxy<java_net_SocketOptionInterface> | null, var1: BasicOrJavaType | null): Promise<java_nio_channels_NetworkChannel | null>;
    /**
     * @param var0 original type: 'java.net.SocketOption'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.nio.channels.NetworkChannel'
     */
    setOptionSync(var0: java_net_SocketOption | JavaInterfaceProxy<java_net_SocketOptionInterface> | null, var1: BasicOrJavaType | null): java_nio_channels_NetworkChannel | null;
    /**
     * @return original return type: 'java.util.Set'
     */
    supportedOptions(): Promise<java_util_Set | null>;
    /**
     * @return original return type: 'java.util.Set'
     */
    supportedOptionsSync(): java_util_Set | null;
    /**
     * @return original return type: 'boolean'
     */
    isOpen(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isOpenSync(): boolean;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createMulticastChannelProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface MulticastChannelInterface {
    /**
     * @param var0 original type: 'java.net.InetAddress'
     * @param var1 original type: 'java.net.NetworkInterface'
     * @return original return type: 'java.nio.channels.MembershipKey'
     */
    join(var0: java_net_InetAddress | null, var1: java_net_NetworkInterface | null): java_nio_channels_MembershipKey | null;
    /**
     * @param var0 original type: 'java.net.InetAddress'
     * @param var1 original type: 'java.net.NetworkInterface'
     * @param var2 original type: 'java.net.InetAddress'
     * @return original return type: 'java.nio.channels.MembershipKey'
     */
    join(var0: java_net_InetAddress | null, var1: java_net_NetworkInterface | null, var2: java_net_InetAddress | null): java_nio_channels_MembershipKey | null;
    /**
     * @return original return type: 'void'
     */
    close(): void;
    /**
     * @param var0 original type: 'java.net.SocketAddress'
     * @return original return type: 'java.nio.channels.NetworkChannel'
     */
    bind(var0: java_net_SocketAddress | null): java_nio_channels_NetworkChannel | null;
    /**
     * @param var0 original type: 'java.net.SocketOption'
     * @return original return type: 'java.lang.Object'
     */
    getOption(var0: java_net_SocketOption | JavaInterfaceProxy<java_net_SocketOptionInterface> | null): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.net.SocketAddress'
     */
    getLocalAddress(): java_net_SocketAddress | null;
    /**
     * @param var0 original type: 'java.net.SocketOption'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.nio.channels.NetworkChannel'
     */
    setOption(var0: java_net_SocketOption | JavaInterfaceProxy<java_net_SocketOptionInterface> | null, var1: BasicOrJavaType | null): java_nio_channels_NetworkChannel | null;
    /**
     * @return original return type: 'java.util.Set'
     */
    supportedOptions(): java_util_Set | null;
    /**
     * @return original return type: 'boolean'
     */
    isOpen(): boolean;
}
/**
 * Create a proxy for the {@link MulticastChannel} interface.
 * All required methods in {@link MulticastChannelInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createMulticastChannelProxy(methods: MulticastChannelInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<MulticastChannelInterface>;
declare const MulticastChannel_base: typeof MulticastChannelClass;
/**
 * Class java.nio.channels.MulticastChannel.
 *
 * This actually imports the java class for further use.
 * The class {@link MulticastChannelClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class MulticastChannel extends MulticastChannel_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default MulticastChannel;
//# sourceMappingURL=MulticastChannel.d.ts.map