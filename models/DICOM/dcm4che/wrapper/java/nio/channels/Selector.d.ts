import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { SelectorProvider as java_nio_channels_spi_SelectorProvider } from "./spi/SelectorProvider";
import { Set as java_util_Set } from "./../../util/Set";
import { Consumer as java_util_function_Consumer, ConsumerInterface as java_util_function_ConsumerInterface } from "./../../util/function/Consumer";
import { Long as java_lang_Long } from "./../../lang/Long";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
import { Class as java_lang_Class } from "./../../lang/Class";
/**
 * This class just defines types, you should import {@link Selector} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class SelectorClass extends JavaClass {
    /**
     * @return original return type: 'boolean'
     */
    isOpen(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isOpenSync(): boolean;
    /**
     * @return original return type: 'java.nio.channels.spi.SelectorProvider'
     */
    provider(): Promise<java_nio_channels_spi_SelectorProvider | null>;
    /**
     * @return original return type: 'java.nio.channels.spi.SelectorProvider'
     */
    providerSync(): java_nio_channels_spi_SelectorProvider | null;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @return original return type: 'java.util.Set'
     */
    keys(): Promise<java_util_Set | null>;
    /**
     * @return original return type: 'java.util.Set'
     */
    keysSync(): java_util_Set | null;
    /**
     * @return original return type: 'java.nio.channels.Selector'
     */
    static open(): Promise<Selector | null>;
    /**
     * @return original return type: 'java.nio.channels.Selector'
     */
    static openSync(): Selector | null;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'int'
     */
    select(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): Promise<number>;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'int'
     */
    selectSync(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): number;
    /**
     * @return original return type: 'int'
     */
    select(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    selectSync(): number;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @param var1 original type: 'long'
     * @return original return type: 'int'
     */
    select(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null, var1: java_lang_Long | bigint | number): Promise<number>;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @param var1 original type: 'long'
     * @return original return type: 'int'
     */
    selectSync(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null, var1: java_lang_Long | bigint | number): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'int'
     */
    select(var0: java_lang_Long | bigint | number): Promise<number>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'int'
     */
    selectSync(var0: java_lang_Long | bigint | number): number;
    /**
     * @return original return type: 'java.util.Set'
     */
    selectedKeys(): Promise<java_util_Set | null>;
    /**
     * @return original return type: 'java.util.Set'
     */
    selectedKeysSync(): java_util_Set | null;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'int'
     */
    selectNow(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): Promise<number>;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'int'
     */
    selectNowSync(var0: java_util_function_Consumer | JavaInterfaceProxy<java_util_function_ConsumerInterface> | null): number;
    /**
     * @return original return type: 'int'
     */
    selectNow(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    selectNowSync(): number;
    /**
     * @return original return type: 'java.nio.channels.Selector'
     */
    wakeup(): Promise<Selector | null>;
    /**
     * @return original return type: 'java.nio.channels.Selector'
     */
    wakeupSync(): Selector | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const Selector_base: typeof SelectorClass;
/**
 * Class java.nio.channels.Selector.
 *
 * This actually imports the java class for further use.
 * The class {@link SelectorClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Selector extends Selector_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Selector;
//# sourceMappingURL=Selector.d.ts.map