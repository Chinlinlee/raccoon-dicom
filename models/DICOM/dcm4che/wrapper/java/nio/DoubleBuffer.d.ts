import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Integer as java_lang_Integer } from "./../lang/Integer";
import { Double as java_lang_Double } from "./../lang/Double";
import { Buffer as java_nio_Buffer } from "./Buffer";
import { ByteOrder as java_nio_ByteOrder } from "./ByteOrder";
import { Long as java_lang_Long } from "./../lang/Long";
import { Class as java_lang_Class } from "./../lang/Class";
/**
 * This class just defines types, you should import {@link DoubleBuffer} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DoubleBufferClass extends JavaClass {
    /**
     * @return original return type: 'double'
     */
    get(): Promise<number>;
    /**
     * @return original return type: 'double'
     */
    getSync(): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'double[]'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    get(var0: java_lang_Integer | number, var1: (java_lang_Double | number)[] | null): Promise<DoubleBuffer | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'double[]'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    getSync(var0: java_lang_Integer | number, var1: (java_lang_Double | number)[] | null): DoubleBuffer | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'double'
     */
    get(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'double'
     */
    getSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'double[]'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    get(var0: java_lang_Integer | number, var1: (java_lang_Double | number)[] | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number): Promise<DoubleBuffer | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'double[]'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    getSync(var0: java_lang_Integer | number, var1: (java_lang_Double | number)[] | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number): DoubleBuffer | null;
    /**
     * @param var0 original type: 'double[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    get(var0: (java_lang_Double | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<DoubleBuffer | null>;
    /**
     * @param var0 original type: 'double[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    getSync(var0: (java_lang_Double | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): DoubleBuffer | null;
    /**
     * @param var0 original type: 'double[]'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    get(var0: (java_lang_Double | number)[] | null): Promise<DoubleBuffer | null>;
    /**
     * @param var0 original type: 'double[]'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    getSync(var0: (java_lang_Double | number)[] | null): DoubleBuffer | null;
    /**
     * @param var0 original type: 'double[]'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    put(var0: (java_lang_Double | number)[] | null): Promise<DoubleBuffer | null>;
    /**
     * @param var0 original type: 'double[]'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    putSync(var0: (java_lang_Double | number)[] | null): DoubleBuffer | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'double[]'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    put(var0: java_lang_Integer | number, var1: (java_lang_Double | number)[] | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number): Promise<DoubleBuffer | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'double[]'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    putSync(var0: java_lang_Integer | number, var1: (java_lang_Double | number)[] | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number): DoubleBuffer | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'double[]'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    put(var0: java_lang_Integer | number, var1: (java_lang_Double | number)[] | null): Promise<DoubleBuffer | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'double[]'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    putSync(var0: java_lang_Integer | number, var1: (java_lang_Double | number)[] | null): DoubleBuffer | null;
    /**
     * @param var0 original type: 'double[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    put(var0: (java_lang_Double | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<DoubleBuffer | null>;
    /**
     * @param var0 original type: 'double[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    putSync(var0: (java_lang_Double | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): DoubleBuffer | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.nio.DoubleBuffer'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    put(var0: java_lang_Integer | number, var1: DoubleBufferClass | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number): Promise<DoubleBuffer | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.nio.DoubleBuffer'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    putSync(var0: java_lang_Integer | number, var1: DoubleBufferClass | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number): DoubleBuffer | null;
    /**
     * @param var0 original type: 'java.nio.DoubleBuffer'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    put(var0: DoubleBufferClass | null): Promise<DoubleBuffer | null>;
    /**
     * @param var0 original type: 'java.nio.DoubleBuffer'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    putSync(var0: DoubleBufferClass | null): DoubleBuffer | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'double'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    put(var0: java_lang_Integer | number, var1: java_lang_Double | number): Promise<DoubleBuffer | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'double'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    putSync(var0: java_lang_Integer | number, var1: java_lang_Double | number): DoubleBuffer | null;
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    put(var0: java_lang_Double | number): Promise<DoubleBuffer | null>;
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    putSync(var0: java_lang_Double | number): DoubleBuffer | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareTo(var0: BasicOrJavaType | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareToSync(var0: BasicOrJavaType | null): number;
    /**
     * @param var0 original type: 'java.nio.DoubleBuffer'
     * @return original return type: 'int'
     */
    compareTo(var0: DoubleBufferClass | null): Promise<number>;
    /**
     * @param var0 original type: 'java.nio.DoubleBuffer'
     * @return original return type: 'int'
     */
    compareToSync(var0: DoubleBufferClass | null): number;
    /**
     * @return original return type: 'java.nio.Buffer'
     */
    clear(): Promise<java_nio_Buffer | null>;
    /**
     * @return original return type: 'java.nio.Buffer'
     */
    clearSync(): java_nio_Buffer | null;
    /**
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    clear(): Promise<DoubleBuffer | null>;
    /**
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    clearSync(): DoubleBuffer | null;
    /**
     * @param var0 original type: 'double[]'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    static wrap(var0: (java_lang_Double | number)[] | null): Promise<DoubleBuffer | null>;
    /**
     * @param var0 original type: 'double[]'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    static wrapSync(var0: (java_lang_Double | number)[] | null): DoubleBuffer | null;
    /**
     * @param var0 original type: 'double[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    static wrap(var0: (java_lang_Double | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<DoubleBuffer | null>;
    /**
     * @param var0 original type: 'double[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    static wrapSync(var0: (java_lang_Double | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): DoubleBuffer | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    position(var0: java_lang_Integer | number): Promise<DoubleBuffer | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    positionSync(var0: java_lang_Integer | number): DoubleBuffer | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.nio.Buffer'
     */
    position(var0: java_lang_Integer | number): Promise<java_nio_Buffer | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.nio.Buffer'
     */
    positionSync(var0: java_lang_Integer | number): java_nio_Buffer | null;
    /**
     * @return original return type: 'int'
     */
    position(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    positionSync(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    limit(var0: java_lang_Integer | number): Promise<DoubleBuffer | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    limitSync(var0: java_lang_Integer | number): DoubleBuffer | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.nio.Buffer'
     */
    limit(var0: java_lang_Integer | number): Promise<java_nio_Buffer | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.nio.Buffer'
     */
    limitSync(var0: java_lang_Integer | number): java_nio_Buffer | null;
    /**
     * @return original return type: 'int'
     */
    limit(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    limitSync(): number;
    /**
     * @return original return type: 'boolean'
     */
    isDirect(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isDirectSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    hasArray(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasArraySync(): boolean;
    /**
     * @return original return type: 'double[]'
     */
    array(): Promise<(number)[] | null>;
    /**
     * @return original return type: 'double[]'
     */
    arraySync(): (number)[] | null;
    /**
     * @return original return type: 'java.lang.Object'
     */
    array(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    arraySync(): BasicOrJavaType | null;
    /**
     * @return original return type: 'int'
     */
    arrayOffset(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    arrayOffsetSync(): number;
    /**
     * @return original return type: 'java.nio.Buffer'
     */
    mark(): Promise<java_nio_Buffer | null>;
    /**
     * @return original return type: 'java.nio.Buffer'
     */
    markSync(): java_nio_Buffer | null;
    /**
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    mark(): Promise<DoubleBuffer | null>;
    /**
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    markSync(): DoubleBuffer | null;
    /**
     * @return original return type: 'java.nio.Buffer'
     */
    reset(): Promise<java_nio_Buffer | null>;
    /**
     * @return original return type: 'java.nio.Buffer'
     */
    resetSync(): java_nio_Buffer | null;
    /**
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    reset(): Promise<DoubleBuffer | null>;
    /**
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    resetSync(): DoubleBuffer | null;
    /**
     * @return original return type: 'java.nio.Buffer'
     */
    flip(): Promise<java_nio_Buffer | null>;
    /**
     * @return original return type: 'java.nio.Buffer'
     */
    flipSync(): java_nio_Buffer | null;
    /**
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    flip(): Promise<DoubleBuffer | null>;
    /**
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    flipSync(): DoubleBuffer | null;
    /**
     * @return original return type: 'java.nio.Buffer'
     */
    rewind(): Promise<java_nio_Buffer | null>;
    /**
     * @return original return type: 'java.nio.Buffer'
     */
    rewindSync(): java_nio_Buffer | null;
    /**
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    rewind(): Promise<DoubleBuffer | null>;
    /**
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    rewindSync(): DoubleBuffer | null;
    /**
     * @return original return type: 'java.nio.Buffer'
     */
    slice(): Promise<java_nio_Buffer | null>;
    /**
     * @return original return type: 'java.nio.Buffer'
     */
    sliceSync(): java_nio_Buffer | null;
    /**
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    slice(): Promise<DoubleBuffer | null>;
    /**
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    sliceSync(): DoubleBuffer | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.nio.Buffer'
     */
    slice(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<java_nio_Buffer | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.nio.Buffer'
     */
    sliceSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): java_nio_Buffer | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    slice(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<DoubleBuffer | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    sliceSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): DoubleBuffer | null;
    /**
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    duplicate(): Promise<DoubleBuffer | null>;
    /**
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    duplicateSync(): DoubleBuffer | null;
    /**
     * @return original return type: 'java.nio.Buffer'
     */
    duplicate(): Promise<java_nio_Buffer | null>;
    /**
     * @return original return type: 'java.nio.Buffer'
     */
    duplicateSync(): java_nio_Buffer | null;
    /**
     * @return original return type: 'java.nio.ByteOrder'
     */
    order(): Promise<java_nio_ByteOrder | null>;
    /**
     * @return original return type: 'java.nio.ByteOrder'
     */
    orderSync(): java_nio_ByteOrder | null;
    /**
     * @param var0 original type: 'java.nio.DoubleBuffer'
     * @return original return type: 'int'
     */
    mismatch(var0: DoubleBufferClass | null): Promise<number>;
    /**
     * @param var0 original type: 'java.nio.DoubleBuffer'
     * @return original return type: 'int'
     */
    mismatchSync(var0: DoubleBufferClass | null): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    static allocate(var0: java_lang_Integer | number): Promise<DoubleBuffer | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    static allocateSync(var0: java_lang_Integer | number): DoubleBuffer | null;
    /**
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    asReadOnlyBuffer(): Promise<DoubleBuffer | null>;
    /**
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    asReadOnlyBufferSync(): DoubleBuffer | null;
    /**
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    compact(): Promise<DoubleBuffer | null>;
    /**
     * @return original return type: 'java.nio.DoubleBuffer'
     */
    compactSync(): DoubleBuffer | null;
    /**
     * @return original return type: 'int'
     */
    remaining(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    remainingSync(): number;
    /**
     * @return original return type: 'int'
     */
    capacity(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    capacitySync(): number;
    /**
     * @return original return type: 'boolean'
     */
    hasRemaining(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasRemainingSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isReadOnly(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isReadOnlySync(): boolean;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const DoubleBuffer_base: typeof DoubleBufferClass;
/**
 * Class java.nio.DoubleBuffer.
 *
 * This actually imports the java class for further use.
 * The class {@link DoubleBufferClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DoubleBuffer extends DoubleBuffer_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default DoubleBuffer;
//# sourceMappingURL=DoubleBuffer.d.ts.map