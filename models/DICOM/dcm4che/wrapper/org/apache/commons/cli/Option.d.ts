import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Integer as java_lang_Integer } from "./../../../../java/lang/Integer";
import { Option$Builder as org_apache_commons_cli_Option$Builder } from "./Option$Builder";
import { Boolean as java_lang_Boolean } from "./../../../../java/lang/Boolean";
import { List as java_util_List } from "./../../../../java/util/List";
import { Class as java_lang_Class } from "./../../../../java/lang/Class";
import { Long as java_lang_Long } from "./../../../../java/lang/Long";
/**
 * This class just defines types, you should import {@link Option} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class OptionClass extends JavaClass {
    /**
     * Original type: 'int'
     */
    static readonly UNINITIALIZED: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly UNLIMITED_VALUES: java_lang_Integer | number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Object'
     */
    clone(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    cloneSync(): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getValue(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getValueSync(var0: string | null): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getValue(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getValueSync(var0: java_lang_Integer | number): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getValue(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getValueSync(): string | null;
    /**
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    static builder(): Promise<org_apache_commons_cli_Option$Builder | null>;
    /**
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    static builderSync(): org_apache_commons_cli_Option$Builder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    static builder(var0: string | null): Promise<org_apache_commons_cli_Option$Builder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    static builderSync(var0: string | null): org_apache_commons_cli_Option$Builder | null;
    /**
     * @return original return type: 'int'
     */
    getId(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getIdSync(): number;
    /**
     * @return original return type: 'java.lang.Object'
     */
    getType(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    getTypeSync(): BasicOrJavaType | null;
    /**
     * @return original return type: 'boolean'
     */
    hasArg(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasArgSync(): boolean;
    /**
     * @return original return type: 'java.lang.String[]'
     */
    getValues(): Promise<(string | null)[] | null>;
    /**
     * @return original return type: 'java.lang.String[]'
     */
    getValuesSync(): (string | null)[] | null;
    /**
     * @return original return type: 'boolean'
     */
    isRequired(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isRequiredSync(): boolean;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setRequired(var0: java_lang_Boolean | boolean): Promise<void>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setRequiredSync(var0: java_lang_Boolean | boolean): void;
    /**
     * @return original return type: 'boolean'
     */
    hasLongOpt(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasLongOptSync(): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    getLongOpt(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getLongOptSync(): string | null;
    /**
     * @return original return type: 'java.util.List'
     */
    getValuesList(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    getValuesListSync(): java_util_List | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getOpt(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getOptSync(): string | null;
    /**
     * @return original return type: 'int'
     */
    getArgs(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getArgsSync(): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    getDescription(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getDescriptionSync(): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setDescription(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setDescriptionSync(var0: string | null): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    setType(var0: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    setTypeSync(var0: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'void'
     */
    setType(var0: java_lang_Class | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'void'
     */
    setTypeSync(var0: java_lang_Class | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setArgName(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setArgNameSync(var0: string | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setLongOpt(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setLongOptSync(var0: string | null): void;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setOptionalArg(var0: java_lang_Boolean | boolean): Promise<void>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setOptionalArgSync(var0: java_lang_Boolean | boolean): void;
    /**
     * @return original return type: 'char'
     */
    getValueSeparator(): Promise<string | null>;
    /**
     * @return original return type: 'char'
     */
    getValueSeparatorSync(): string | null;
    /**
     * @return original return type: 'boolean'
     */
    hasValueSeparator(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasValueSeparatorSync(): boolean;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'void'
     */
    setValueSeparator(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'void'
     */
    setValueSeparatorSync(var0: string | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    addValue(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    addValueSync(var0: string | null): boolean;
    /**
     * @return original return type: 'boolean'
     */
    hasArgName(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasArgNameSync(): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    setArgs(var0: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    setArgsSync(var0: java_lang_Integer | number): void;
    /**
     * @return original return type: 'boolean'
     */
    hasArgs(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasArgsSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    hasOptionalArg(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasOptionalArgSync(): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    getArgName(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getArgNameSync(): string | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'boolean'
     * @param var3 original type: 'java.lang.String'
     * @return original return type: 'org.apache.commons.cli.Option'
     */
    static newInstanceAsync(var0: string | null, var1: string | null, var2: java_lang_Boolean | boolean, var3: string | null): Promise<Option>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'boolean'
     * @param var2 original type: 'java.lang.String'
     * @return original return type: 'org.apache.commons.cli.Option'
     */
    static newInstanceAsync(var0: string | null, var1: java_lang_Boolean | boolean, var2: string | null): Promise<Option>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'org.apache.commons.cli.Option'
     */
    static newInstanceAsync(var0: string | null, var1: string | null): Promise<Option>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'boolean'
     * @param var3 original type: 'java.lang.String'
     */
    constructor(var0: string | null, var1: string | null, var2: java_lang_Boolean | boolean, var3: string | null);
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'boolean'
     * @param var2 original type: 'java.lang.String'
     */
    constructor(var0: string | null, var1: java_lang_Boolean | boolean, var2: string | null);
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     */
    constructor(var0: string | null, var1: string | null);
}
declare const Option_base: typeof OptionClass;
/**
 * Class org.apache.commons.cli.Option.
 *
 * This actually imports the java class for further use.
 * The class {@link OptionClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Option extends Option_base {
}
export default Option;
//# sourceMappingURL=Option.d.ts.map