import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Class as java_lang_Class } from "./../../../../java/lang/Class";
import { Option as org_apache_commons_cli_Option } from "./Option";
import { Boolean as java_lang_Boolean } from "./../../../../java/lang/Boolean";
import { Integer as java_lang_Integer } from "./../../../../java/lang/Integer";
import { Long as java_lang_Long } from "./../../../../java/lang/Long";
/**
 * This class just defines types, you should import {@link Option$Builder} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Option$BuilderClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    type(var0: java_lang_Class | null): Promise<Option$Builder | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    typeSync(var0: java_lang_Class | null): Option$Builder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    desc(var0: string | null): Promise<Option$Builder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    descSync(var0: string | null): Option$Builder | null;
    /**
     * @return original return type: 'org.apache.commons.cli.Option'
     */
    build(): Promise<org_apache_commons_cli_Option | null>;
    /**
     * @return original return type: 'org.apache.commons.cli.Option'
     */
    buildSync(): org_apache_commons_cli_Option | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    argName(var0: string | null): Promise<Option$Builder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    argNameSync(var0: string | null): Option$Builder | null;
    /**
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    hasArg(): Promise<Option$Builder | null>;
    /**
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    hasArgSync(): Option$Builder | null;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    hasArg(var0: java_lang_Boolean | boolean): Promise<Option$Builder | null>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    hasArgSync(var0: java_lang_Boolean | boolean): Option$Builder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    longOpt(var0: string | null): Promise<Option$Builder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    longOptSync(var0: string | null): Option$Builder | null;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    optionalArg(var0: java_lang_Boolean | boolean): Promise<Option$Builder | null>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    optionalArgSync(var0: java_lang_Boolean | boolean): Option$Builder | null;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    required(var0: java_lang_Boolean | boolean): Promise<Option$Builder | null>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    requiredSync(var0: java_lang_Boolean | boolean): Option$Builder | null;
    /**
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    required(): Promise<Option$Builder | null>;
    /**
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    requiredSync(): Option$Builder | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    numberOfArgs(var0: java_lang_Integer | number): Promise<Option$Builder | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    numberOfArgsSync(var0: java_lang_Integer | number): Option$Builder | null;
    /**
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    hasArgs(): Promise<Option$Builder | null>;
    /**
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    hasArgsSync(): Option$Builder | null;
    /**
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    valueSeparator(): Promise<Option$Builder | null>;
    /**
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    valueSeparatorSync(): Option$Builder | null;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    valueSeparator(var0: string | null): Promise<Option$Builder | null>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'org.apache.commons.cli.Option$Builder'
     */
    valueSeparatorSync(var0: string | null): Option$Builder | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const Option$Builder_base: typeof Option$BuilderClass;
/**
 * Class org.apache.commons.cli.Option$Builder.
 *
 * This actually imports the java class for further use.
 * The class {@link Option$BuilderClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Option$Builder extends Option$Builder_base {
}
export default Option$Builder;
//# sourceMappingURL=Option$Builder.d.ts.map