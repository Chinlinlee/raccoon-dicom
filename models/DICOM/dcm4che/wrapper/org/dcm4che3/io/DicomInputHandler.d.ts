import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { DicomInputStream as org_dcm4che3_io_DicomInputStream } from "./DicomInputStream";
import { Fragments as org_dcm4che3_data_Fragments } from "./../data/Fragments";
import { Sequence as org_dcm4che3_data_Sequence } from "./../data/Sequence";
import { Attributes as org_dcm4che3_data_Attributes } from "./../data/Attributes";
/**
 * This class just defines types, you should import {@link DicomInputHandler} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DicomInputHandlerClass extends JavaClass {
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomInputStream'
     * @param var1 original type: 'org.dcm4che3.data.Fragments'
     * @return original return type: 'void'
     */
    readValue(var0: org_dcm4che3_io_DicomInputStream | null, var1: org_dcm4che3_data_Fragments | null): Promise<void>;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomInputStream'
     * @param var1 original type: 'org.dcm4che3.data.Fragments'
     * @return original return type: 'void'
     */
    readValueSync(var0: org_dcm4che3_io_DicomInputStream | null, var1: org_dcm4che3_data_Fragments | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomInputStream'
     * @param var1 original type: 'org.dcm4che3.data.Sequence'
     * @return original return type: 'void'
     */
    readValue(var0: org_dcm4che3_io_DicomInputStream | null, var1: org_dcm4che3_data_Sequence | null): Promise<void>;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomInputStream'
     * @param var1 original type: 'org.dcm4che3.data.Sequence'
     * @return original return type: 'void'
     */
    readValueSync(var0: org_dcm4che3_io_DicomInputStream | null, var1: org_dcm4che3_data_Sequence | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomInputStream'
     * @param var1 original type: 'org.dcm4che3.data.Attributes'
     * @return original return type: 'void'
     */
    readValue(var0: org_dcm4che3_io_DicomInputStream | null, var1: org_dcm4che3_data_Attributes | null): Promise<void>;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomInputStream'
     * @param var1 original type: 'org.dcm4che3.data.Attributes'
     * @return original return type: 'void'
     */
    readValueSync(var0: org_dcm4che3_io_DicomInputStream | null, var1: org_dcm4che3_data_Attributes | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomInputStream'
     * @return original return type: 'void'
     */
    endDataset(var0: org_dcm4che3_io_DicomInputStream | null): Promise<void>;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomInputStream'
     * @return original return type: 'void'
     */
    endDatasetSync(var0: org_dcm4che3_io_DicomInputStream | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomInputStream'
     * @return original return type: 'void'
     */
    startDataset(var0: org_dcm4che3_io_DicomInputStream | null): Promise<void>;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomInputStream'
     * @return original return type: 'void'
     */
    startDatasetSync(var0: org_dcm4che3_io_DicomInputStream | null): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createDicomInputHandlerProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface DicomInputHandlerInterface {
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomInputStream'
     * @param var1 original type: 'org.dcm4che3.data.Fragments'
     * @return original return type: 'void'
     */
    readValue(var0: org_dcm4che3_io_DicomInputStream | null, var1: org_dcm4che3_data_Fragments | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomInputStream'
     * @param var1 original type: 'org.dcm4che3.data.Sequence'
     * @return original return type: 'void'
     */
    readValue(var0: org_dcm4che3_io_DicomInputStream | null, var1: org_dcm4che3_data_Sequence | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomInputStream'
     * @param var1 original type: 'org.dcm4che3.data.Attributes'
     * @return original return type: 'void'
     */
    readValue(var0: org_dcm4che3_io_DicomInputStream | null, var1: org_dcm4che3_data_Attributes | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomInputStream'
     * @return original return type: 'void'
     */
    endDataset(var0: org_dcm4che3_io_DicomInputStream | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomInputStream'
     * @return original return type: 'void'
     */
    startDataset(var0: org_dcm4che3_io_DicomInputStream | null): void;
}
/**
 * Create a proxy for the {@link DicomInputHandler} interface.
 * All required methods in {@link DicomInputHandlerInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createDicomInputHandlerProxy(methods: DicomInputHandlerInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<DicomInputHandlerInterface>;
declare const DicomInputHandler_base: typeof DicomInputHandlerClass;
/**
 * Class org.dcm4che3.io.DicomInputHandler.
 *
 * This actually imports the java class for further use.
 * The class {@link DicomInputHandlerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DicomInputHandler extends DicomInputHandler_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default DicomInputHandler;
//# sourceMappingURL=DicomInputHandler.d.ts.map