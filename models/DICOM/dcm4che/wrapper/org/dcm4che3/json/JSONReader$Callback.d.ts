import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Attributes as org_dcm4che3_data_Attributes } from "./../data/Attributes";
/**
 * This class just defines types, you should import {@link JSONReader$Callback} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JSONReader$CallbackClass extends JavaClass {
    /**
     * @param var0 original type: 'org.dcm4che3.data.Attributes'
     * @param var1 original type: 'org.dcm4che3.data.Attributes'
     * @return original return type: 'void'
     */
    onDataset(var0: org_dcm4che3_data_Attributes | null, var1: org_dcm4che3_data_Attributes | null): Promise<void>;
    /**
     * @param var0 original type: 'org.dcm4che3.data.Attributes'
     * @param var1 original type: 'org.dcm4che3.data.Attributes'
     * @return original return type: 'void'
     */
    onDatasetSync(var0: org_dcm4che3_data_Attributes | null, var1: org_dcm4che3_data_Attributes | null): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createJSONReader$CallbackProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface JSONReader$CallbackInterface {
    /**
     * @param var0 original type: 'org.dcm4che3.data.Attributes'
     * @param var1 original type: 'org.dcm4che3.data.Attributes'
     * @return original return type: 'void'
     */
    onDataset(var0: org_dcm4che3_data_Attributes | null, var1: org_dcm4che3_data_Attributes | null): void;
}
/**
 * Create a proxy for the {@link JSONReader$Callback} interface.
 * All required methods in {@link JSONReader$CallbackInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createJSONReader$CallbackProxy(methods: JSONReader$CallbackInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<JSONReader$CallbackInterface>;
declare const JSONReader$Callback_base: typeof JSONReader$CallbackClass;
/**
 * Class org.dcm4che3.json.JSONReader$Callback.
 *
 * This actually imports the java class for further use.
 * The class {@link JSONReader$CallbackClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JSONReader$Callback extends JSONReader$Callback_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default JSONReader$Callback;
//# sourceMappingURL=JSONReader$Callback.d.ts.map