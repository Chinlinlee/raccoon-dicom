import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Connection as org_dcm4che3_net_Connection } from "./Connection";
import { Socket as java_net_Socket } from "./../../../java/net/Socket";
import { Throwable as java_lang_Throwable } from "./../../../java/lang/Throwable";
/**
 * This class just defines types, you should import {@link ConnectionMonitor} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ConnectionMonitorClass extends JavaClass {
    /**
     * @param var0 original type: 'org.dcm4che3.net.Connection'
     * @param var1 original type: 'java.net.Socket'
     * @return original return type: 'void'
     */
    onConnectionRejectedBlacklisted(var0: org_dcm4che3_net_Connection | null, var1: java_net_Socket | null): Promise<void>;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Connection'
     * @param var1 original type: 'java.net.Socket'
     * @return original return type: 'void'
     */
    onConnectionRejectedBlacklistedSync(var0: org_dcm4che3_net_Connection | null, var1: java_net_Socket | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Connection'
     * @param var1 original type: 'java.net.Socket'
     * @param var2 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    onConnectionRejected(var0: org_dcm4che3_net_Connection | null, var1: java_net_Socket | null, var2: java_lang_Throwable | null): Promise<void>;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Connection'
     * @param var1 original type: 'java.net.Socket'
     * @param var2 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    onConnectionRejectedSync(var0: org_dcm4che3_net_Connection | null, var1: java_net_Socket | null, var2: java_lang_Throwable | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Connection'
     * @param var1 original type: 'java.net.Socket'
     * @return original return type: 'void'
     */
    onConnectionAccepted(var0: org_dcm4che3_net_Connection | null, var1: java_net_Socket | null): Promise<void>;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Connection'
     * @param var1 original type: 'java.net.Socket'
     * @return original return type: 'void'
     */
    onConnectionAcceptedSync(var0: org_dcm4che3_net_Connection | null, var1: java_net_Socket | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Connection'
     * @param var1 original type: 'org.dcm4che3.net.Connection'
     * @param var2 original type: 'java.net.Socket'
     * @return original return type: 'void'
     */
    onConnectionEstablished(var0: org_dcm4che3_net_Connection | null, var1: org_dcm4che3_net_Connection | null, var2: java_net_Socket | null): Promise<void>;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Connection'
     * @param var1 original type: 'org.dcm4che3.net.Connection'
     * @param var2 original type: 'java.net.Socket'
     * @return original return type: 'void'
     */
    onConnectionEstablishedSync(var0: org_dcm4che3_net_Connection | null, var1: org_dcm4che3_net_Connection | null, var2: java_net_Socket | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Connection'
     * @param var1 original type: 'org.dcm4che3.net.Connection'
     * @param var2 original type: 'java.net.Socket'
     * @param var3 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    onConnectionFailed(var0: org_dcm4che3_net_Connection | null, var1: org_dcm4che3_net_Connection | null, var2: java_net_Socket | null, var3: java_lang_Throwable | null): Promise<void>;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Connection'
     * @param var1 original type: 'org.dcm4che3.net.Connection'
     * @param var2 original type: 'java.net.Socket'
     * @param var3 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    onConnectionFailedSync(var0: org_dcm4che3_net_Connection | null, var1: org_dcm4che3_net_Connection | null, var2: java_net_Socket | null, var3: java_lang_Throwable | null): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createConnectionMonitorProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface ConnectionMonitorInterface {
    /**
     * @param var0 original type: 'org.dcm4che3.net.Connection'
     * @param var1 original type: 'java.net.Socket'
     * @return original return type: 'void'
     */
    onConnectionRejectedBlacklisted(var0: org_dcm4che3_net_Connection | null, var1: java_net_Socket | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Connection'
     * @param var1 original type: 'java.net.Socket'
     * @param var2 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    onConnectionRejected(var0: org_dcm4che3_net_Connection | null, var1: java_net_Socket | null, var2: java_lang_Throwable | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Connection'
     * @param var1 original type: 'java.net.Socket'
     * @return original return type: 'void'
     */
    onConnectionAccepted(var0: org_dcm4che3_net_Connection | null, var1: java_net_Socket | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Connection'
     * @param var1 original type: 'org.dcm4che3.net.Connection'
     * @param var2 original type: 'java.net.Socket'
     * @return original return type: 'void'
     */
    onConnectionEstablished(var0: org_dcm4che3_net_Connection | null, var1: org_dcm4che3_net_Connection | null, var2: java_net_Socket | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Connection'
     * @param var1 original type: 'org.dcm4che3.net.Connection'
     * @param var2 original type: 'java.net.Socket'
     * @param var3 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    onConnectionFailed(var0: org_dcm4che3_net_Connection | null, var1: org_dcm4che3_net_Connection | null, var2: java_net_Socket | null, var3: java_lang_Throwable | null): void;
}
/**
 * Create a proxy for the {@link ConnectionMonitor} interface.
 * All required methods in {@link ConnectionMonitorInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createConnectionMonitorProxy(methods: ConnectionMonitorInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<ConnectionMonitorInterface>;
declare const ConnectionMonitor_base: typeof ConnectionMonitorClass;
/**
 * Class org.dcm4che3.net.ConnectionMonitor.
 *
 * This actually imports the java class for further use.
 * The class {@link ConnectionMonitorClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ConnectionMonitor extends ConnectionMonitor_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default ConnectionMonitor;
//# sourceMappingURL=ConnectionMonitor.d.ts.map