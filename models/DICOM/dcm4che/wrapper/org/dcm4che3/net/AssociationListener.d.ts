import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Association as org_dcm4che3_net_Association } from "./Association";
/**
 * This class just defines types, you should import {@link AssociationListener} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class AssociationListenerClass extends JavaClass {
    /**
     * @param var0 original type: 'org.dcm4che3.net.Association'
     * @return original return type: 'void'
     */
    onClose(var0: org_dcm4che3_net_Association | null): Promise<void>;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Association'
     * @return original return type: 'void'
     */
    onCloseSync(var0: org_dcm4che3_net_Association | null): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createAssociationListenerProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface AssociationListenerInterface {
    /**
     * @param var0 original type: 'org.dcm4che3.net.Association'
     * @return original return type: 'void'
     */
    onClose(var0: org_dcm4che3_net_Association | null): void;
}
/**
 * Create a proxy for the {@link AssociationListener} interface.
 * All required methods in {@link AssociationListenerInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createAssociationListenerProxy(methods: AssociationListenerInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<AssociationListenerInterface>;
declare const AssociationListener_base: typeof AssociationListenerClass;
/**
 * Class org.dcm4che3.net.AssociationListener.
 *
 * This actually imports the java class for further use.
 * The class {@link AssociationListenerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class AssociationListener extends AssociationListener_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default AssociationListener;
//# sourceMappingURL=AssociationListener.d.ts.map