import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { SocketAddress as java_net_SocketAddress } from "./../../../java/net/SocketAddress";
/**
 * This class just defines types, you should import {@link Listener} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ListenerClass extends JavaClass {
    /**
     * @return original return type: 'java.net.SocketAddress'
     */
    getEndPoint(): Promise<java_net_SocketAddress | null>;
    /**
     * @return original return type: 'java.net.SocketAddress'
     */
    getEndPointSync(): java_net_SocketAddress | null;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createListenerProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface ListenerInterface {
    /**
     * @return original return type: 'java.net.SocketAddress'
     */
    getEndPoint(): java_net_SocketAddress | null;
    /**
     * @return original return type: 'void'
     */
    close(): void;
}
/**
 * Create a proxy for the {@link Listener} interface.
 * All required methods in {@link ListenerInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createListenerProxy(methods: ListenerInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<ListenerInterface>;
declare const Listener_base: typeof ListenerClass;
/**
 * Class org.dcm4che3.net.Listener.
 *
 * This actually imports the java class for further use.
 * The class {@link ListenerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Listener extends Listener_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Listener;
//# sourceMappingURL=Listener.d.ts.map