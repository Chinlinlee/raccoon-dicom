import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Association as org_dcm4che3_net_Association } from "./../Association";
import { PresentationContext as org_dcm4che3_net_pdu_PresentationContext } from "./../pdu/PresentationContext";
import { Dimse as org_dcm4che3_net_Dimse } from "./../Dimse";
import { Attributes as org_dcm4che3_data_Attributes } from "./../../data/Attributes";
import { PDVInputStream as org_dcm4che3_net_PDVInputStream } from "./../PDVInputStream";
/**
 * This class just defines types, you should import {@link DicomService} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DicomServiceClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.String[]'
     */
    getSOPClasses(): Promise<(string | null)[] | null>;
    /**
     * @return original return type: 'java.lang.String[]'
     */
    getSOPClassesSync(): (string | null)[] | null;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Association'
     * @return original return type: 'void'
     */
    onClose(var0: org_dcm4che3_net_Association | null): Promise<void>;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Association'
     * @return original return type: 'void'
     */
    onCloseSync(var0: org_dcm4che3_net_Association | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Association'
     * @param var1 original type: 'org.dcm4che3.net.pdu.PresentationContext'
     * @param var2 original type: 'org.dcm4che3.net.Dimse'
     * @param var3 original type: 'org.dcm4che3.data.Attributes'
     * @param var4 original type: 'org.dcm4che3.net.PDVInputStream'
     * @return original return type: 'void'
     */
    onDimseRQ(var0: org_dcm4che3_net_Association | null, var1: org_dcm4che3_net_pdu_PresentationContext | null, var2: org_dcm4che3_net_Dimse | null, var3: org_dcm4che3_data_Attributes | null, var4: org_dcm4che3_net_PDVInputStream | null): Promise<void>;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Association'
     * @param var1 original type: 'org.dcm4che3.net.pdu.PresentationContext'
     * @param var2 original type: 'org.dcm4che3.net.Dimse'
     * @param var3 original type: 'org.dcm4che3.data.Attributes'
     * @param var4 original type: 'org.dcm4che3.net.PDVInputStream'
     * @return original return type: 'void'
     */
    onDimseRQSync(var0: org_dcm4che3_net_Association | null, var1: org_dcm4che3_net_pdu_PresentationContext | null, var2: org_dcm4che3_net_Dimse | null, var3: org_dcm4che3_data_Attributes | null, var4: org_dcm4che3_net_PDVInputStream | null): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createDicomServiceProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface DicomServiceInterface {
    /**
     * @return original return type: 'java.lang.String[]'
     */
    getSOPClasses(): (string | null)[] | null;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Association'
     * @return original return type: 'void'
     */
    onClose(var0: org_dcm4che3_net_Association | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Association'
     * @param var1 original type: 'org.dcm4che3.net.pdu.PresentationContext'
     * @param var2 original type: 'org.dcm4che3.net.Dimse'
     * @param var3 original type: 'org.dcm4che3.data.Attributes'
     * @param var4 original type: 'org.dcm4che3.net.PDVInputStream'
     * @return original return type: 'void'
     */
    onDimseRQ(var0: org_dcm4che3_net_Association | null, var1: org_dcm4che3_net_pdu_PresentationContext | null, var2: org_dcm4che3_net_Dimse | null, var3: org_dcm4che3_data_Attributes | null, var4: org_dcm4che3_net_PDVInputStream | null): void;
}
/**
 * Create a proxy for the {@link DicomService} interface.
 * All required methods in {@link DicomServiceInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createDicomServiceProxy(methods: DicomServiceInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<DicomServiceInterface>;
declare const DicomService_base: typeof DicomServiceClass;
/**
 * Class org.dcm4che3.net.service.DicomService.
 *
 * This actually imports the java class for further use.
 * The class {@link DicomServiceClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DicomService extends DicomService_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default DicomService;
//# sourceMappingURL=DicomService.d.ts.map