import { JavaClass, BasicOrJavaType } from "java-bridge";
import { File as java_io_File } from "./../../../../java/io/File";
import { Long as java_lang_Long } from "./../../../../java/lang/Long";
import { Integer as java_lang_Integer } from "./../../../../java/lang/Integer";
import { Class as java_lang_Class } from "./../../../../java/lang/Class";
/**
 * This class just defines types, you should import {@link InstanceLocator} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class InstanceLocatorClass extends JavaClass {
    /**
     * Original type: 'java.lang.String'
     */
    readonly cuid: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    readonly iuid: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    readonly tsuid: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    readonly uri: string | null;
    /**
     * @return original return type: 'java.lang.Object'
     */
    getObject(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    getObjectSync(): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.io.File'
     */
    getFile(): Promise<java_io_File | null>;
    /**
     * @return original return type: 'java.io.File'
     */
    getFileSync(): java_io_File | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'org.dcm4che3.net.service.InstanceLocator'
     */
    setObject(var0: BasicOrJavaType | null): Promise<InstanceLocator | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'org.dcm4che3.net.service.InstanceLocator'
     */
    setObjectSync(var0: BasicOrJavaType | null): InstanceLocator | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.String'
     * @return original return type: 'org.dcm4che3.net.service.InstanceLocator'
     */
    static newInstanceAsync(var0: string | null, var1: string | null, var2: string | null, var3: string | null): Promise<InstanceLocator>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.String'
     */
    constructor(var0: string | null, var1: string | null, var2: string | null, var3: string | null);
}
declare const InstanceLocator_base: typeof InstanceLocatorClass;
/**
 * Class org.dcm4che3.net.service.InstanceLocator.
 *
 * This actually imports the java class for further use.
 * The class {@link InstanceLocatorClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class InstanceLocator extends InstanceLocator_base {
}
export default InstanceLocator;
//# sourceMappingURL=InstanceLocator.d.ts.map