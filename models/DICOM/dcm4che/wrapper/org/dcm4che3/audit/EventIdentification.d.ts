import { JavaClass, BasicOrJavaType } from "java-bridge";
import { List as java_util_List } from "./../../../java/util/List";
import { Calendar as java_util_Calendar } from "./../../../java/util/Calendar";
import { EventID as org_dcm4che3_audit_EventID } from "./EventID";
import { Long as java_lang_Long } from "./../../../java/lang/Long";
import { Integer as java_lang_Integer } from "./../../../java/lang/Integer";
import { Class as java_lang_Class } from "./../../../java/lang/Class";
/**
 * This class just defines types, you should import {@link EventIdentification} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class EventIdentificationClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setEventOutcomeIndicator(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setEventOutcomeIndicatorSync(var0: string | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setEventOutcomeDescription(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setEventOutcomeDescriptionSync(var0: string | null): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getEventOutcomeIndicator(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getEventOutcomeIndicatorSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getEventOutcomeDescription(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getEventOutcomeDescriptionSync(): string | null;
    /**
     * @return original return type: 'java.util.List'
     */
    getEventTypeCode(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    getEventTypeCodeSync(): java_util_List | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setEventActionCode(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setEventActionCodeSync(var0: string | null): void;
    /**
     * @return original return type: 'java.util.Calendar'
     */
    getEventDateTime(): Promise<java_util_Calendar | null>;
    /**
     * @return original return type: 'java.util.Calendar'
     */
    getEventDateTimeSync(): java_util_Calendar | null;
    /**
     * @param var0 original type: 'java.util.Calendar'
     * @return original return type: 'void'
     */
    setEventDateTime(var0: java_util_Calendar | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.Calendar'
     * @return original return type: 'void'
     */
    setEventDateTimeSync(var0: java_util_Calendar | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.audit.EventID'
     * @return original return type: 'void'
     */
    setEventID(var0: org_dcm4che3_audit_EventID | null): Promise<void>;
    /**
     * @param var0 original type: 'org.dcm4che3.audit.EventID'
     * @return original return type: 'void'
     */
    setEventIDSync(var0: org_dcm4che3_audit_EventID | null): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getEventActionCode(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getEventActionCodeSync(): string | null;
    /**
     * @return original return type: 'org.dcm4che3.audit.EventID'
     */
    getEventID(): Promise<org_dcm4che3_audit_EventID | null>;
    /**
     * @return original return type: 'org.dcm4che3.audit.EventID'
     */
    getEventIDSync(): org_dcm4che3_audit_EventID | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @return original return type: 'org.dcm4che3.audit.EventIdentification'
     */
    static newInstanceAsync(): Promise<EventIdentification>;
    constructor();
}
declare const EventIdentification_base: typeof EventIdentificationClass;
/**
 * Class org.dcm4che3.audit.EventIdentification.
 *
 * This actually imports the java class for further use.
 * The class {@link EventIdentificationClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class EventIdentification extends EventIdentification_base {
}
export default EventIdentification;
//# sourceMappingURL=EventIdentification.d.ts.map