/// <reference types="node" />
import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Integer as java_lang_Integer } from "./../../../java/lang/Integer";
import { Long as java_lang_Long } from "./../../../java/lang/Long";
import { Class as java_lang_Class } from "./../../../java/lang/Class";
/**
 * This class just defines types, you should import {@link TagUtils} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class TagUtilsClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int'
     */
    static forName(var0: string | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int'
     */
    static forNameSync(var0: string | null): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    static toString(var0: java_lang_Integer | number): Promise<string>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    static toStringSync(var0: java_lang_Integer | number): string;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    static toHexString(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    static toHexStringSync(var0: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'java.lang.String'
     */
    static toHexString(var0: Buffer | null): Promise<string | null>;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'java.lang.String'
     */
    static toHexStringSync(var0: Buffer | null): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static creatorTagOf(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static creatorTagOfSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static groupNumber(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static groupNumberSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    static toPrivateTag(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    static toPrivateTagSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isPrivateTag(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isPrivateTagSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isPrivateGroup(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isPrivateGroupSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isGroupLength(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isGroupLengthSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static groupLengthTagOf(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static groupLengthTagOfSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isPrivateCreator(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isPrivateCreatorSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    static shortToHexString(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    static shortToHexStringSync(var0: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int'
     */
    static intFromHexString(var0: string | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int'
     */
    static intFromHexStringSync(var0: string | null): number;
    /**
     * @param var0 original type: 'int[]'
     * @return original return type: 'java.lang.String[]'
     */
    static toHexStrings(var0: (java_lang_Integer | number)[] | null): Promise<(string | null)[] | null>;
    /**
     * @param var0 original type: 'int[]'
     * @return original return type: 'java.lang.String[]'
     */
    static toHexStringsSync(var0: (java_lang_Integer | number)[] | null): (string | null)[] | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'byte[]'
     */
    static fromHexString(var0: string | null): Promise<Buffer | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'byte[]'
     */
    static fromHexStringSync(var0: string | null): Buffer | null;
    /**
     * @param var0 original type: 'java.lang.String[]'
     * @return original return type: 'int[]'
     */
    static fromHexStrings(var0: (string | null)[] | null): Promise<(number)[] | null>;
    /**
     * @param var0 original type: 'java.lang.String[]'
     * @return original return type: 'int[]'
     */
    static fromHexStringsSync(var0: (string | null)[] | null): (number)[] | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    static toTag(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    static toTagSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isFileMetaInformation(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isFileMetaInformationSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static normalizeRepeatingGroup(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static normalizeRepeatingGroupSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int[]'
     */
    static parseTagPath(var0: string | null): Promise<(number)[] | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int[]'
     */
    static parseTagPathSync(var0: string | null): (number)[] | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isItem(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isItemSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static elementNumber(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static elementNumberSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @return original return type: 'org.dcm4che3.util.TagUtils'
     */
    static newInstanceAsync(): Promise<TagUtils>;
    constructor();
}
declare const TagUtils_base: typeof TagUtilsClass;
/**
 * Class org.dcm4che3.util.TagUtils.
 *
 * This actually imports the java class for further use.
 * The class {@link TagUtilsClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class TagUtils extends TagUtils_base {
}
export default TagUtils;
//# sourceMappingURL=TagUtils.d.ts.map