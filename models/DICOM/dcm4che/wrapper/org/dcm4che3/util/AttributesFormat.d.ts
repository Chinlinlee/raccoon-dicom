import { JavaClass, BasicOrJavaType } from "java-bridge";
import { StringBuffer as java_lang_StringBuffer } from "./../../../java/lang/StringBuffer";
import { FieldPosition as java_text_FieldPosition } from "./../../../java/text/FieldPosition";
import { ParsePosition as java_text_ParsePosition } from "./../../../java/text/ParsePosition";
import { AttributedCharacterIterator as java_text_AttributedCharacterIterator } from "./../../../java/text/AttributedCharacterIterator";
import { Long as java_lang_Long } from "./../../../java/lang/Long";
import { Integer as java_lang_Integer } from "./../../../java/lang/Integer";
import { Class as java_lang_Class } from "./../../../java/lang/Class";
/**
 * This class just defines types, you should import {@link AttributesFormat} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class AttributesFormatClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.dcm4che3.util.AttributesFormat'
     */
    static valueOf(var0: string | null): Promise<AttributesFormat | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.dcm4che3.util.AttributesFormat'
     */
    static valueOfSync(var0: string | null): AttributesFormat | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.StringBuffer'
     * @param var2 original type: 'java.text.FieldPosition'
     * @return original return type: 'java.lang.StringBuffer'
     */
    format(var0: BasicOrJavaType | null, var1: java_lang_StringBuffer | null, var2: java_text_FieldPosition | null): Promise<java_lang_StringBuffer | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.StringBuffer'
     * @param var2 original type: 'java.text.FieldPosition'
     * @return original return type: 'java.lang.StringBuffer'
     */
    formatSync(var0: BasicOrJavaType | null, var1: java_lang_StringBuffer | null, var2: java_text_FieldPosition | null): java_lang_StringBuffer | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.String'
     */
    format(var0: BasicOrJavaType | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.String'
     */
    formatSync(var0: BasicOrJavaType | null): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.text.ParsePosition'
     * @return original return type: 'java.lang.Object'
     */
    parseObject(var0: string | null, var1: java_text_ParsePosition | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.text.ParsePosition'
     * @return original return type: 'java.lang.Object'
     */
    parseObjectSync(var0: string | null, var1: java_text_ParsePosition | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Object'
     */
    parseObject(var0: string | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Object'
     */
    parseObjectSync(var0: string | null): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.lang.Object'
     */
    clone(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    cloneSync(): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.text.AttributedCharacterIterator'
     */
    formatToCharacterIterator(var0: BasicOrJavaType | null): Promise<java_text_AttributedCharacterIterator | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.text.AttributedCharacterIterator'
     */
    formatToCharacterIteratorSync(var0: BasicOrJavaType | null): java_text_AttributedCharacterIterator | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.dcm4che3.util.AttributesFormat'
     */
    static newInstanceAsync(var0: string | null): Promise<AttributesFormat>;
    /**
     * @param var0 original type: 'java.lang.String'
     */
    constructor(var0: string | null);
}
declare const AttributesFormat_base: typeof AttributesFormatClass;
/**
 * Class org.dcm4che3.util.AttributesFormat.
 *
 * This actually imports the java class for further use.
 * The class {@link AttributesFormatClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class AttributesFormat extends AttributesFormat_base {
}
export default AttributesFormat;
//# sourceMappingURL=AttributesFormat.d.ts.map