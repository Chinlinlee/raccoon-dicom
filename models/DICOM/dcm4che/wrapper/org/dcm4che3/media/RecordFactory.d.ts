import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Integer as java_lang_Integer } from "./../../../java/lang/Integer";
import { RecordType as org_dcm4che3_media_RecordType } from "./RecordType";
import { Attributes as org_dcm4che3_data_Attributes } from "./../data/Attributes";
import { Long as java_lang_Long } from "./../../../java/lang/Long";
import { Class as java_lang_Class } from "./../../../java/lang/Class";
/**
 * This class just defines types, you should import {@link RecordFactory} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class RecordFactoryClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int[]'
     * @return original return type: 'int[]'
     */
    setPrivateRecordKeys(var0: string | null, var1: (java_lang_Integer | number)[] | null): Promise<(number)[] | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int[]'
     * @return original return type: 'int[]'
     */
    setPrivateRecordKeysSync(var0: string | null, var1: (java_lang_Integer | number)[] | null): (number)[] | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getPrivateRecordUID(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getPrivateRecordUIDSync(var0: string | null): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    setPrivateRecordUID(var0: string | null, var1: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    setPrivateRecordUIDSync(var0: string | null, var1: string | null): string | null;
    /**
     * @return original return type: 'void'
     */
    loadDefaultConfiguration(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    loadDefaultConfigurationSync(): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.dcm4che3.media.RecordType'
     */
    getRecordType(var0: string | null): Promise<org_dcm4che3_media_RecordType | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.dcm4che3.media.RecordType'
     */
    getRecordTypeSync(var0: string | null): org_dcm4che3_media_RecordType | null;
    /**
     * @param var0 original type: 'org.dcm4che3.media.RecordType'
     * @return original return type: 'int[]'
     */
    getRecordKeys(var0: org_dcm4che3_media_RecordType | null): Promise<(number)[] | null>;
    /**
     * @param var0 original type: 'org.dcm4che3.media.RecordType'
     * @return original return type: 'int[]'
     */
    getRecordKeysSync(var0: org_dcm4che3_media_RecordType | null): (number)[] | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    loadConfiguration(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    loadConfigurationSync(var0: string | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.media.RecordType'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'org.dcm4che3.data.Attributes'
     * @param var3 original type: 'org.dcm4che3.data.Attributes'
     * @param var4 original type: 'java.lang.String[]'
     * @return original return type: 'org.dcm4che3.data.Attributes'
     */
    createRecord(var0: org_dcm4che3_media_RecordType | null, var1: string | null, var2: org_dcm4che3_data_Attributes | null, var3: org_dcm4che3_data_Attributes | null, var4: (string | null)[] | null): Promise<org_dcm4che3_data_Attributes | null>;
    /**
     * @param var0 original type: 'org.dcm4che3.media.RecordType'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'org.dcm4che3.data.Attributes'
     * @param var3 original type: 'org.dcm4che3.data.Attributes'
     * @param var4 original type: 'java.lang.String[]'
     * @return original return type: 'org.dcm4che3.data.Attributes'
     */
    createRecordSync(var0: org_dcm4che3_media_RecordType | null, var1: string | null, var2: org_dcm4che3_data_Attributes | null, var3: org_dcm4che3_data_Attributes | null, var4: (string | null)[] | null): org_dcm4che3_data_Attributes | null;
    /**
     * @param var0 original type: 'org.dcm4che3.data.Attributes'
     * @param var1 original type: 'org.dcm4che3.data.Attributes'
     * @param var2 original type: 'java.lang.String[]'
     * @return original return type: 'org.dcm4che3.data.Attributes'
     */
    createRecord(var0: org_dcm4che3_data_Attributes | null, var1: org_dcm4che3_data_Attributes | null, var2: (string | null)[] | null): Promise<org_dcm4che3_data_Attributes | null>;
    /**
     * @param var0 original type: 'org.dcm4che3.data.Attributes'
     * @param var1 original type: 'org.dcm4che3.data.Attributes'
     * @param var2 original type: 'java.lang.String[]'
     * @return original return type: 'org.dcm4che3.data.Attributes'
     */
    createRecordSync(var0: org_dcm4che3_data_Attributes | null, var1: org_dcm4che3_data_Attributes | null, var2: (string | null)[] | null): org_dcm4che3_data_Attributes | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'org.dcm4che3.media.RecordType'
     * @return original return type: 'org.dcm4che3.media.RecordType'
     */
    setRecordType(var0: string | null, var1: org_dcm4che3_media_RecordType | null): Promise<org_dcm4che3_media_RecordType | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'org.dcm4che3.media.RecordType'
     * @return original return type: 'org.dcm4che3.media.RecordType'
     */
    setRecordTypeSync(var0: string | null, var1: org_dcm4che3_media_RecordType | null): org_dcm4che3_media_RecordType | null;
    /**
     * @param var0 original type: 'org.dcm4che3.media.RecordType'
     * @param var1 original type: 'int[]'
     * @return original return type: 'void'
     */
    setRecordKeys(var0: org_dcm4che3_media_RecordType | null, var1: (java_lang_Integer | number)[] | null): Promise<void>;
    /**
     * @param var0 original type: 'org.dcm4che3.media.RecordType'
     * @param var1 original type: 'int[]'
     * @return original return type: 'void'
     */
    setRecordKeysSync(var0: org_dcm4che3_media_RecordType | null, var1: (java_lang_Integer | number)[] | null): void;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @return original return type: 'org.dcm4che3.media.RecordFactory'
     */
    static newInstanceAsync(): Promise<RecordFactory>;
    constructor();
}
declare const RecordFactory_base: typeof RecordFactoryClass;
/**
 * Class org.dcm4che3.media.RecordFactory.
 *
 * This actually imports the java class for further use.
 * The class {@link RecordFactoryClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class RecordFactory extends RecordFactory_base {
}
export default RecordFactory;
//# sourceMappingURL=RecordFactory.d.ts.map