import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Enum as java_lang_Enum } from "./../../../java/lang/Enum";
import { Class as java_lang_Class } from "./../../../java/lang/Class";
import { Integer as java_lang_Integer } from "./../../../java/lang/Integer";
import { SampleModel as java_awt_image_SampleModel } from "./../../../java/awt/image/SampleModel";
import { Boolean as java_lang_Boolean } from "./../../../java/lang/Boolean";
import { ColorModel as java_awt_image_ColorModel } from "./../../../java/awt/image/ColorModel";
import { ColorSpace as java_awt_color_ColorSpace } from "./../../../java/awt/color/ColorSpace";
import { Attributes as org_dcm4che3_data_Attributes } from "./../data/Attributes";
import { Optional as java_util_Optional } from "./../../../java/util/Optional";
import { Long as java_lang_Long } from "./../../../java/lang/Long";
/**
 * This class just defines types, you should import {@link PhotometricInterpretation} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class PhotometricInterpretationClass extends JavaClass {
    /**
     * Original type: 'org.dcm4che3.image.PhotometricInterpretation'
     */
    static readonly MONOCHROME1: PhotometricInterpretationClass | null;
    /**
     * Original type: 'org.dcm4che3.image.PhotometricInterpretation'
     */
    static readonly MONOCHROME2: PhotometricInterpretationClass | null;
    /**
     * Original type: 'org.dcm4che3.image.PhotometricInterpretation'
     */
    static readonly PALETTE_COLOR: PhotometricInterpretationClass | null;
    /**
     * Original type: 'org.dcm4che3.image.PhotometricInterpretation'
     */
    static readonly RGB: PhotometricInterpretationClass | null;
    /**
     * Original type: 'org.dcm4che3.image.PhotometricInterpretation'
     */
    static readonly YBR_FULL: PhotometricInterpretationClass | null;
    /**
     * Original type: 'org.dcm4che3.image.PhotometricInterpretation'
     */
    static readonly YBR_FULL_422: PhotometricInterpretationClass | null;
    /**
     * Original type: 'org.dcm4che3.image.PhotometricInterpretation'
     */
    static readonly YBR_ICT: PhotometricInterpretationClass | null;
    /**
     * Original type: 'org.dcm4che3.image.PhotometricInterpretation'
     */
    static readonly YBR_PARTIAL_420: PhotometricInterpretationClass | null;
    /**
     * Original type: 'org.dcm4che3.image.PhotometricInterpretation'
     */
    static readonly YBR_PARTIAL_422: PhotometricInterpretationClass | null;
    /**
     * Original type: 'org.dcm4che3.image.PhotometricInterpretation'
     */
    static readonly YBR_RCT: PhotometricInterpretationClass | null;
    /**
     * @return original return type: 'org.dcm4che3.image.PhotometricInterpretation[]'
     */
    static values(): Promise<(PhotometricInterpretation | null)[] | null>;
    /**
     * @return original return type: 'org.dcm4che3.image.PhotometricInterpretation[]'
     */
    static valuesSync(): (PhotometricInterpretation | null)[] | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.dcm4che3.image.PhotometricInterpretation'
     */
    compress(var0: string | null): Promise<PhotometricInterpretation | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.dcm4che3.image.PhotometricInterpretation'
     */
    compressSync(var0: string | null): PhotometricInterpretation | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.dcm4che3.image.PhotometricInterpretation'
     */
    static valueOf(var0: string | null): Promise<PhotometricInterpretation | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.dcm4che3.image.PhotometricInterpretation'
     */
    static valueOfSync(var0: string | null): PhotometricInterpretation | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Enum'
     */
    static valueOf(var0: java_lang_Class | null, var1: string | null): Promise<java_lang_Enum | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Enum'
     */
    static valueOfSync(var0: java_lang_Class | null, var1: string | null): java_lang_Enum | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'int'
     */
    frameLength(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'int'
     */
    frameLengthSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'boolean'
     * @return original return type: 'java.awt.image.SampleModel'
     */
    createSampleModel(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Boolean | boolean): Promise<java_awt_image_SampleModel | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'boolean'
     * @return original return type: 'java.awt.image.SampleModel'
     */
    createSampleModelSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Boolean | boolean): java_awt_image_SampleModel | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.awt.color.ColorSpace'
     * @param var3 original type: 'org.dcm4che3.data.Attributes'
     * @return original return type: 'java.awt.image.ColorModel'
     */
    createColorModel(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_awt_color_ColorSpace | null, var3: org_dcm4che3_data_Attributes | null): Promise<java_awt_image_ColorModel | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.awt.color.ColorSpace'
     * @param var3 original type: 'org.dcm4che3.data.Attributes'
     * @return original return type: 'java.awt.image.ColorModel'
     */
    createColorModelSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_awt_color_ColorSpace | null, var3: org_dcm4che3_data_Attributes | null): java_awt_image_ColorModel | null;
    /**
     * @return original return type: 'boolean'
     */
    isSubSampled(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isSubSampledSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isYBR(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isYBRSync(): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.dcm4che3.image.PhotometricInterpretation'
     */
    static fromString(var0: string | null): Promise<PhotometricInterpretation | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.dcm4che3.image.PhotometricInterpretation'
     */
    static fromStringSync(var0: string | null): PhotometricInterpretation | null;
    /**
     * @return original return type: 'boolean'
     */
    isMonochrome(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isMonochromeSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isInverse(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isInverseSync(): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    name(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    nameSync(): string | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareTo(var0: BasicOrJavaType | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareToSync(var0: BasicOrJavaType | null): number;
    /**
     * @param var0 original type: 'java.lang.Enum'
     * @return original return type: 'int'
     */
    compareTo(var0: java_lang_Enum | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Enum'
     * @return original return type: 'int'
     */
    compareToSync(var0: java_lang_Enum | null): number;
    /**
     * @return original return type: 'java.util.Optional'
     */
    describeConstable(): Promise<java_util_Optional | null>;
    /**
     * @return original return type: 'java.util.Optional'
     */
    describeConstableSync(): java_util_Optional | null;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getDeclaringClass(): Promise<java_lang_Class | null>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getDeclaringClassSync(): java_lang_Class | null;
    /**
     * @return original return type: 'int'
     */
    ordinal(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    ordinalSync(): number;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const PhotometricInterpretation_base: typeof PhotometricInterpretationClass;
/**
 * Class org.dcm4che3.image.PhotometricInterpretation.
 *
 * This actually imports the java class for further use.
 * The class {@link PhotometricInterpretationClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class PhotometricInterpretation extends PhotometricInterpretation_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default PhotometricInterpretation;
//# sourceMappingURL=PhotometricInterpretation.d.ts.map