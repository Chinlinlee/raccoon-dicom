import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Attributes as org_dcm4che3_data_Attributes } from "./Attributes";
import { Integer as java_lang_Integer } from "./../../../java/lang/Integer";
import { VR as org_dcm4che3_data_VR } from "./VR";
/**
 * This class just defines types, you should import {@link Attributes$Visitor} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Attributes$VisitorClass extends JavaClass {
    /**
     * @param var0 original type: 'org.dcm4che3.data.Attributes'
     * @param var1 original type: 'int'
     * @param var2 original type: 'org.dcm4che3.data.VR'
     * @param var3 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    visit(var0: org_dcm4che3_data_Attributes | null, var1: java_lang_Integer | number, var2: org_dcm4che3_data_VR | null, var3: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'org.dcm4che3.data.Attributes'
     * @param var1 original type: 'int'
     * @param var2 original type: 'org.dcm4che3.data.VR'
     * @param var3 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    visitSync(var0: org_dcm4che3_data_Attributes | null, var1: java_lang_Integer | number, var2: org_dcm4che3_data_VR | null, var3: BasicOrJavaType | null): boolean;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createAttributes$VisitorProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface Attributes$VisitorInterface {
    /**
     * @param var0 original type: 'org.dcm4che3.data.Attributes'
     * @param var1 original type: 'int'
     * @param var2 original type: 'org.dcm4che3.data.VR'
     * @param var3 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    visit(var0: org_dcm4che3_data_Attributes | null, var1: java_lang_Integer | number, var2: org_dcm4che3_data_VR | null, var3: BasicOrJavaType | null): boolean;
}
/**
 * Create a proxy for the {@link Attributes$Visitor} interface.
 * All required methods in {@link Attributes$VisitorInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createAttributes$VisitorProxy(methods: Attributes$VisitorInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<Attributes$VisitorInterface>;
declare const Attributes$Visitor_base: typeof Attributes$VisitorClass;
/**
 * Class org.dcm4che3.data.Attributes$Visitor.
 *
 * This actually imports the java class for further use.
 * The class {@link Attributes$VisitorClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Attributes$Visitor extends Attributes$Visitor_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Attributes$Visitor;
//# sourceMappingURL=Attributes$Visitor.d.ts.map