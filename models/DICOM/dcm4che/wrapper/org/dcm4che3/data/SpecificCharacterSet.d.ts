/// <reference types="node" />
import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Long as java_lang_Long } from "./../../../java/lang/Long";
import { Integer as java_lang_Integer } from "./../../../java/lang/Integer";
import { Class as java_lang_Class } from "./../../../java/lang/Class";
/**
 * This class just defines types, you should import {@link SpecificCharacterSet} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class SpecificCharacterSetClass extends JavaClass {
    /**
     * Original type: 'org.dcm4che3.data.SpecificCharacterSet'
     */
    static readonly ASCII: SpecificCharacterSetClass | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'java.lang.String[]'
     * @return original return type: 'org.dcm4che3.data.SpecificCharacterSet'
     */
    static valueOf(var0: (string | null)[] | null): Promise<SpecificCharacterSet | null>;
    /**
     * @param var0 original type: 'java.lang.String[]'
     * @return original return type: 'org.dcm4che3.data.SpecificCharacterSet'
     */
    static valueOfSync(var0: (string | null)[] | null): SpecificCharacterSet | null;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'java.lang.String'
     */
    decode(var0: Buffer | null): Promise<string | null>;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'java.lang.String'
     */
    decodeSync(var0: Buffer | null): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'byte[]'
     */
    encode(var0: string | null, var1: string | null): Promise<Buffer | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'byte[]'
     */
    encodeSync(var0: string | null, var1: string | null): Buffer | null;
    /**
     * @return original return type: 'boolean'
     */
    isASCII(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isASCIISync(): boolean;
    /**
     * @param var0 original type: 'org.dcm4che3.data.SpecificCharacterSet'
     * @return original return type: 'boolean'
     */
    contains(var0: SpecificCharacterSetClass | null): Promise<boolean>;
    /**
     * @param var0 original type: 'org.dcm4che3.data.SpecificCharacterSet'
     * @return original return type: 'boolean'
     */
    containsSync(var0: SpecificCharacterSetClass | null): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isUTF8(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isUTF8Sync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    containsASCII(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    containsASCIISync(): boolean;
    /**
     * @return original return type: 'org.dcm4che3.data.SpecificCharacterSet'
     */
    static getDefaultCharacterSet(): Promise<SpecificCharacterSet | null>;
    /**
     * @return original return type: 'org.dcm4che3.data.SpecificCharacterSet'
     */
    static getDefaultCharacterSetSync(): SpecificCharacterSet | null;
    /**
     * @return original return type: 'java.lang.String[]'
     */
    toCodes(): Promise<(string | null)[] | null>;
    /**
     * @return original return type: 'java.lang.String[]'
     */
    toCodesSync(): (string | null)[] | null;
    /**
     * @return original return type: 'void'
     */
    static resetCharsetNameMappings(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    static resetCharsetNameMappingsSync(): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    static setDefaultCharacterSet(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    static setDefaultCharacterSetSync(var0: string | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    static setCharsetNameMapping(var0: string | null, var1: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    static setCharsetNameMappingSync(var0: string | null, var1: string | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    static checkSpecificCharacterSet(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    static checkSpecificCharacterSetSync(var0: string | null): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    static checkCharsetName(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    static checkCharsetNameSync(var0: string | null): string | null;
    /**
     * @param var0 original type: 'java.lang.String[]'
     * @return original return type: 'boolean'
     */
    static trimISO2022(var0: (string | null)[] | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String[]'
     * @return original return type: 'boolean'
     */
    static trimISO2022Sync(var0: (string | null)[] | null): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    toText(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    toTextSync(var0: string | null): string | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const SpecificCharacterSet_base: typeof SpecificCharacterSetClass;
/**
 * Class org.dcm4che3.data.SpecificCharacterSet.
 *
 * This actually imports the java class for further use.
 * The class {@link SpecificCharacterSetClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class SpecificCharacterSet extends SpecificCharacterSet_base {
}
export default SpecificCharacterSet;
//# sourceMappingURL=SpecificCharacterSet.d.ts.map