import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { BulkData as org_dcm4che3_data_BulkData } from "./BulkData";
import { Boolean as java_lang_Boolean } from "./../../../java/lang/Boolean";
/**
 * This class just defines types, you should import {@link BulkData$Creator} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BulkData$CreatorClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'boolean'
     * @return original return type: 'org.dcm4che3.data.BulkData'
     */
    create(var0: string | null, var1: string | null, var2: java_lang_Boolean | boolean): Promise<org_dcm4che3_data_BulkData | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'boolean'
     * @return original return type: 'org.dcm4che3.data.BulkData'
     */
    createSync(var0: string | null, var1: string | null, var2: java_lang_Boolean | boolean): org_dcm4che3_data_BulkData | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createBulkData$CreatorProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface BulkData$CreatorInterface {
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'boolean'
     * @return original return type: 'org.dcm4che3.data.BulkData'
     */
    create(var0: string | null, var1: string | null, var2: java_lang_Boolean | boolean): org_dcm4che3_data_BulkData | null;
}
/**
 * Create a proxy for the {@link BulkData$Creator} interface.
 * All required methods in {@link BulkData$CreatorInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createBulkData$CreatorProxy(methods: BulkData$CreatorInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<BulkData$CreatorInterface>;
declare const BulkData$Creator_base: typeof BulkData$CreatorClass;
/**
 * Class org.dcm4che3.data.BulkData$Creator.
 *
 * This actually imports the java class for further use.
 * The class {@link BulkData$CreatorClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BulkData$Creator extends BulkData$Creator_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default BulkData$Creator;
//# sourceMappingURL=BulkData$Creator.d.ts.map