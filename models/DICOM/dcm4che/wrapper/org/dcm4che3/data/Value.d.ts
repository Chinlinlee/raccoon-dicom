/// <reference types="node" />
import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { VR as org_dcm4che3_data_VR } from "./VR";
import { Boolean as java_lang_Boolean } from "./../../../java/lang/Boolean";
import { DicomOutputStream as org_dcm4che3_io_DicomOutputStream } from "./../io/DicomOutputStream";
import { DicomEncodingOptions as org_dcm4che3_io_DicomEncodingOptions } from "./../io/DicomEncodingOptions";
/**
 * This class just defines types, you should import {@link Value} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ValueClass extends JavaClass {
    /**
     * Original type: 'org.dcm4che3.data.Value'
     */
    static readonly NULL: ValueClass | JavaInterfaceProxy<ValueInterface> | null;
    /**
     * @param var0 original type: 'org.dcm4che3.data.VR'
     * @param var1 original type: 'boolean'
     * @return original return type: 'byte[]'
     */
    toBytes(var0: org_dcm4che3_data_VR | null, var1: java_lang_Boolean | boolean): Promise<Buffer | null>;
    /**
     * @param var0 original type: 'org.dcm4che3.data.VR'
     * @param var1 original type: 'boolean'
     * @return original return type: 'byte[]'
     */
    toBytesSync(var0: org_dcm4che3_data_VR | null, var1: java_lang_Boolean | boolean): Buffer | null;
    /**
     * @return original return type: 'boolean'
     */
    isEmpty(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isEmptySync(): boolean;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomOutputStream'
     * @param var1 original type: 'org.dcm4che3.data.VR'
     * @return original return type: 'void'
     */
    writeTo(var0: org_dcm4che3_io_DicomOutputStream | null, var1: org_dcm4che3_data_VR | null): Promise<void>;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomOutputStream'
     * @param var1 original type: 'org.dcm4che3.data.VR'
     * @return original return type: 'void'
     */
    writeToSync(var0: org_dcm4che3_io_DicomOutputStream | null, var1: org_dcm4che3_data_VR | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomEncodingOptions'
     * @param var1 original type: 'boolean'
     * @param var2 original type: 'org.dcm4che3.data.VR'
     * @return original return type: 'int'
     */
    calcLength(var0: org_dcm4che3_io_DicomEncodingOptions | null, var1: java_lang_Boolean | boolean, var2: org_dcm4che3_data_VR | null): Promise<number>;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomEncodingOptions'
     * @param var1 original type: 'boolean'
     * @param var2 original type: 'org.dcm4che3.data.VR'
     * @return original return type: 'int'
     */
    calcLengthSync(var0: org_dcm4che3_io_DicomEncodingOptions | null, var1: java_lang_Boolean | boolean, var2: org_dcm4che3_data_VR | null): number;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomEncodingOptions'
     * @param var1 original type: 'boolean'
     * @param var2 original type: 'org.dcm4che3.data.VR'
     * @return original return type: 'int'
     */
    getEncodedLength(var0: org_dcm4che3_io_DicomEncodingOptions | null, var1: java_lang_Boolean | boolean, var2: org_dcm4che3_data_VR | null): Promise<number>;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomEncodingOptions'
     * @param var1 original type: 'boolean'
     * @param var2 original type: 'org.dcm4che3.data.VR'
     * @return original return type: 'int'
     */
    getEncodedLengthSync(var0: org_dcm4che3_io_DicomEncodingOptions | null, var1: java_lang_Boolean | boolean, var2: org_dcm4che3_data_VR | null): number;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createValueProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface ValueInterface {
    /**
     * @param var0 original type: 'org.dcm4che3.data.VR'
     * @param var1 original type: 'boolean'
     * @return original return type: 'byte[]'
     */
    toBytes(var0: org_dcm4che3_data_VR | null, var1: java_lang_Boolean | boolean): Buffer | null;
    /**
     * @return original return type: 'boolean'
     */
    isEmpty(): boolean;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomOutputStream'
     * @param var1 original type: 'org.dcm4che3.data.VR'
     * @return original return type: 'void'
     */
    writeTo(var0: org_dcm4che3_io_DicomOutputStream | null, var1: org_dcm4che3_data_VR | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomEncodingOptions'
     * @param var1 original type: 'boolean'
     * @param var2 original type: 'org.dcm4che3.data.VR'
     * @return original return type: 'int'
     */
    calcLength(var0: org_dcm4che3_io_DicomEncodingOptions | null, var1: java_lang_Boolean | boolean, var2: org_dcm4che3_data_VR | null): number;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomEncodingOptions'
     * @param var1 original type: 'boolean'
     * @param var2 original type: 'org.dcm4che3.data.VR'
     * @return original return type: 'int'
     */
    getEncodedLength(var0: org_dcm4che3_io_DicomEncodingOptions | null, var1: java_lang_Boolean | boolean, var2: org_dcm4che3_data_VR | null): number;
}
/**
 * Create a proxy for the {@link Value} interface.
 * All required methods in {@link ValueInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createValueProxy(methods: ValueInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<ValueInterface>;
declare const Value_base: typeof ValueClass;
/**
 * Class org.dcm4che3.data.Value.
 *
 * This actually imports the java class for further use.
 * The class {@link ValueClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Value extends Value_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Value;
//# sourceMappingURL=Value.d.ts.map