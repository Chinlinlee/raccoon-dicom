/// <reference types="node" />
import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { Integer as java_lang_Integer } from "./../../../java/lang/Integer";
import { Value as org_dcm4che3_data_Value, ValueInterface as org_dcm4che3_data_ValueInterface } from "./Value";
import { VR as org_dcm4che3_data_VR } from "./VR";
import { Boolean as java_lang_Boolean } from "./../../../java/lang/Boolean";
import { InputStream as java_io_InputStream } from "./../../../java/io/InputStream";
import { Long as java_lang_Long } from "./../../../java/lang/Long";
import { File as java_io_File } from "./../../../java/io/File";
import { DicomOutputStream as org_dcm4che3_io_DicomOutputStream } from "./../io/DicomOutputStream";
import { DicomEncodingOptions as org_dcm4che3_io_DicomEncodingOptions } from "./../io/DicomEncodingOptions";
import { Class as java_lang_Class } from "./../../../java/lang/Class";
/**
 * This class just defines types, you should import {@link BulkData} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BulkDataClass extends JavaClass {
    /**
     * Original type: 'int'
     */
    static readonly MAGIC_LEN: java_lang_Integer | number;
    /**
     * Original type: 'org.dcm4che3.data.Value'
     */
    static readonly NULL: org_dcm4che3_data_Value | JavaInterfaceProxy<org_dcm4che3_data_ValueInterface> | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    length(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    lengthSync(): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'org.dcm4che3.data.VR'
     * @param var1 original type: 'boolean'
     * @return original return type: 'byte[]'
     */
    toBytes(var0: org_dcm4che3_data_VR | null, var1: java_lang_Boolean | boolean): Promise<Buffer | null>;
    /**
     * @param var0 original type: 'org.dcm4che3.data.VR'
     * @param var1 original type: 'boolean'
     * @return original return type: 'byte[]'
     */
    toBytesSync(var0: org_dcm4che3_data_VR | null, var1: java_lang_Boolean | boolean): Buffer | null;
    /**
     * @return original return type: 'boolean'
     */
    isEmpty(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isEmptySync(): boolean;
    /**
     * @return original return type: 'long'
     */
    offset(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    offsetSync(): number;
    /**
     * @return original return type: 'java.io.InputStream'
     */
    openStream(): Promise<java_io_InputStream | null>;
    /**
     * @return original return type: 'java.io.InputStream'
     */
    openStreamSync(): java_io_InputStream | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    setLength(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    setLengthSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'boolean'
     */
    bigEndian(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    bigEndianSync(): boolean;
    /**
     * @return original return type: 'java.io.File'
     */
    getFile(): Promise<java_io_File | null>;
    /**
     * @return original return type: 'java.io.File'
     */
    getFileSync(): java_io_File | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    setOffset(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    setOffsetSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomOutputStream'
     * @param var1 original type: 'org.dcm4che3.data.VR'
     * @return original return type: 'void'
     */
    writeTo(var0: org_dcm4che3_io_DicomOutputStream | null, var1: org_dcm4che3_data_VR | null): Promise<void>;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomOutputStream'
     * @param var1 original type: 'org.dcm4che3.data.VR'
     * @return original return type: 'void'
     */
    writeToSync(var0: org_dcm4che3_io_DicomOutputStream | null, var1: org_dcm4che3_data_VR | null): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    uriWithoutOffsetAndLength(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    uriWithoutOffsetAndLengthSync(): string | null;
    /**
     * @return original return type: 'long'
     */
    getSegmentEnd(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    getSegmentEndSync(): number;
    /**
     * @return original return type: 'long'
     */
    longLength(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    longLengthSync(): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    getUUID(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getUUIDSync(): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setURI(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setURISync(var0: string | null): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getURI(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getURISync(): string | null;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomEncodingOptions'
     * @param var1 original type: 'boolean'
     * @param var2 original type: 'org.dcm4che3.data.VR'
     * @return original return type: 'int'
     */
    calcLength(var0: org_dcm4che3_io_DicomEncodingOptions | null, var1: java_lang_Boolean | boolean, var2: org_dcm4che3_data_VR | null): Promise<number>;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomEncodingOptions'
     * @param var1 original type: 'boolean'
     * @param var2 original type: 'org.dcm4che3.data.VR'
     * @return original return type: 'int'
     */
    calcLengthSync(var0: org_dcm4che3_io_DicomEncodingOptions | null, var1: java_lang_Boolean | boolean, var2: org_dcm4che3_data_VR | null): number;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomEncodingOptions'
     * @param var1 original type: 'boolean'
     * @param var2 original type: 'org.dcm4che3.data.VR'
     * @return original return type: 'int'
     */
    getEncodedLength(var0: org_dcm4che3_io_DicomEncodingOptions | null, var1: java_lang_Boolean | boolean, var2: org_dcm4che3_data_VR | null): Promise<number>;
    /**
     * @param var0 original type: 'org.dcm4che3.io.DicomEncodingOptions'
     * @param var1 original type: 'boolean'
     * @param var2 original type: 'org.dcm4che3.data.VR'
     * @return original return type: 'int'
     */
    getEncodedLengthSync(var0: org_dcm4che3_io_DicomEncodingOptions | null, var1: java_lang_Boolean | boolean, var2: org_dcm4che3_data_VR | null): number;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'boolean'
     * @return original return type: 'org.dcm4che3.data.BulkData'
     */
    static newInstance(var0: string | null, var1: string | null, var2: java_lang_Boolean | boolean): Promise<BulkData>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'long'
     * @param var2 original type: 'int'
     * @param var3 original type: 'boolean'
     * @return original return type: 'org.dcm4che3.data.BulkData'
     */
    static newInstance(var0: string | null, var1: java_lang_Long | bigint | number, var2: java_lang_Integer | number, var3: java_lang_Boolean | boolean): Promise<BulkData>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'boolean'
     */
    constructor(var0: string | null, var1: string | null, var2: java_lang_Boolean | boolean);
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'long'
     * @param var2 original type: 'int'
     * @param var3 original type: 'boolean'
     */
    constructor(var0: string | null, var1: java_lang_Long | bigint | number, var2: java_lang_Integer | number, var3: java_lang_Boolean | boolean);
}
declare const BulkData_base: typeof BulkDataClass;
/**
 * Class org.dcm4che3.data.BulkData.
 *
 * This actually imports the java class for further use.
 * The class {@link BulkDataClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BulkData extends BulkData_base {
}
export default BulkData;
//# sourceMappingURL=BulkData.d.ts.map