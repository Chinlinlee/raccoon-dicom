import { JavaClass, BasicOrJavaType } from "java-bridge";
import { File as java_io_File } from "./../../../../java/io/File";
import { Long as java_lang_Long } from "./../../../../java/lang/Long";
import { Integer as java_lang_Integer } from "./../../../../java/lang/Integer";
import { Class as java_lang_Class } from "./../../../../java/lang/Class";
/**
 * This class just defines types, you should import {@link FilesetInfo} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class FilesetInfoClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.String'
     */
    getDescriptorFileCharset(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getDescriptorFileCharsetSync(): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setDescriptorFileCharset(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setDescriptorFileCharsetSync(var0: string | null): void;
    /**
     * @param var0 original type: 'java.io.File'
     * @return original return type: 'void'
     */
    setDescriptorFile(var0: java_io_File | null): Promise<void>;
    /**
     * @param var0 original type: 'java.io.File'
     * @return original return type: 'void'
     */
    setDescriptorFileSync(var0: java_io_File | null): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getFilesetUID(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getFilesetUIDSync(): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setFilesetUID(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setFilesetUIDSync(var0: string | null): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getFilesetID(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getFilesetIDSync(): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setFilesetID(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setFilesetIDSync(var0: string | null): void;
    /**
     * @return original return type: 'java.io.File'
     */
    getDescriptorFile(): Promise<java_io_File | null>;
    /**
     * @return original return type: 'java.io.File'
     */
    getDescriptorFileSync(): java_io_File | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @return original return type: 'org.dcm4che3.tool.common.FilesetInfo'
     */
    static newInstanceAsync(): Promise<FilesetInfo>;
    constructor();
}
declare const FilesetInfo_base: typeof FilesetInfoClass;
/**
 * Class org.dcm4che3.tool.common.FilesetInfo.
 *
 * This actually imports the java class for further use.
 * The class {@link FilesetInfoClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class FilesetInfo extends FilesetInfo_base {
}
export default FilesetInfo;
//# sourceMappingURL=FilesetInfo.d.ts.map