"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dcm2Jpg$ReadImage = exports.createDcm2Jpg$ReadImageProxy = void 0;
const java_bridge_1 = require("java-bridge");
/**
 * Create a proxy for the {@link Dcm2Jpg$ReadImage} interface.
 * All required methods in {@link Dcm2Jpg$ReadImageInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
function createDcm2Jpg$ReadImageProxy(methods, opts) {
    return (0, java_bridge_1.newProxy)('org.dcm4che3.tool.dcm2jpg.Dcm2Jpg$ReadImage', methods, opts);
}
exports.createDcm2Jpg$ReadImageProxy = createDcm2Jpg$ReadImageProxy;
/**
 * Class org.dcm4che3.tool.dcm2jpg.Dcm2Jpg$ReadImage.
 *
 * This actually imports the java class for further use.
 * The class {@link Dcm2Jpg$ReadImageClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
class Dcm2Jpg$ReadImage extends (0, java_bridge_1.importClass)('org.dcm4che3.tool.dcm2jpg.Dcm2Jpg$ReadImage') {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    constructor() {
        super();
    }
}
exports.Dcm2Jpg$ReadImage = Dcm2Jpg$ReadImage;
exports.default = Dcm2Jpg$ReadImage;
//# sourceMappingURL=Dcm2Jpg$ReadImage.js.map