import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { OutputStream as java_io_OutputStream } from "./../../../../java/io/OutputStream";
import { Transcoder as org_dcm4che3_imageio_codec_Transcoder } from "./Transcoder";
import { Attributes as org_dcm4che3_data_Attributes } from "./../../data/Attributes";
/**
 * This class just defines types, you should import {@link Transcoder$Handler} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Transcoder$HandlerClass extends JavaClass {
    /**
     * @param var0 original type: 'org.dcm4che3.imageio.codec.Transcoder'
     * @param var1 original type: 'org.dcm4che3.data.Attributes'
     * @return original return type: 'java.io.OutputStream'
     */
    newOutputStream(var0: org_dcm4che3_imageio_codec_Transcoder | null, var1: org_dcm4che3_data_Attributes | null): Promise<java_io_OutputStream | null>;
    /**
     * @param var0 original type: 'org.dcm4che3.imageio.codec.Transcoder'
     * @param var1 original type: 'org.dcm4che3.data.Attributes'
     * @return original return type: 'java.io.OutputStream'
     */
    newOutputStreamSync(var0: org_dcm4che3_imageio_codec_Transcoder | null, var1: org_dcm4che3_data_Attributes | null): java_io_OutputStream | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createTranscoder$HandlerProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface Transcoder$HandlerInterface {
    /**
     * @param var0 original type: 'org.dcm4che3.imageio.codec.Transcoder'
     * @param var1 original type: 'org.dcm4che3.data.Attributes'
     * @return original return type: 'java.io.OutputStream'
     */
    newOutputStream(var0: org_dcm4che3_imageio_codec_Transcoder | null, var1: org_dcm4che3_data_Attributes | null): java_io_OutputStream | null;
}
/**
 * Create a proxy for the {@link Transcoder$Handler} interface.
 * All required methods in {@link Transcoder$HandlerInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createTranscoder$HandlerProxy(methods: Transcoder$HandlerInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<Transcoder$HandlerInterface>;
declare const Transcoder$Handler_base: typeof Transcoder$HandlerClass;
/**
 * Class org.dcm4che3.imageio.codec.Transcoder$Handler.
 *
 * This actually imports the java class for further use.
 * The class {@link Transcoder$HandlerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Transcoder$Handler extends Transcoder$Handler_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Transcoder$Handler;
//# sourceMappingURL=Transcoder$Handler.d.ts.map