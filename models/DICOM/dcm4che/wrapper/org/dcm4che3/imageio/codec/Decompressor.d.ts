import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { OutputStream as java_io_OutputStream } from "./../../../../java/io/OutputStream";
import { Attributes as org_dcm4che3_data_Attributes } from "./../../data/Attributes";
import { FileImageInputStream as javax_imageio_stream_FileImageInputStream } from "./../../../../javax/imageio/stream/FileImageInputStream";
import { ImageInputStream as javax_imageio_stream_ImageInputStream, ImageInputStreamInterface as javax_imageio_stream_ImageInputStreamInterface } from "./../../../../javax/imageio/stream/ImageInputStream";
import { Integer as java_lang_Integer } from "./../../../../java/lang/Integer";
import { Long as java_lang_Long } from "./../../../../java/lang/Long";
import { Class as java_lang_Class } from "./../../../../java/lang/Class";
/**
 * This class just defines types, you should import {@link Decompressor} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DecompressorClass extends JavaClass {
    /**
     * @param var0 original type: 'java.io.OutputStream'
     * @return original return type: 'void'
     */
    writeTo(var0: java_io_OutputStream | null): Promise<void>;
    /**
     * @param var0 original type: 'java.io.OutputStream'
     * @return original return type: 'void'
     */
    writeToSync(var0: java_io_OutputStream | null): void;
    /**
     * @return original return type: 'void'
     */
    dispose(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    disposeSync(): void;
    /**
     * @return original return type: 'boolean'
     */
    decompress(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    decompressSync(): boolean;
    /**
     * @param var0 original type: 'org.dcm4che3.data.Attributes'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    static decompress(var0: org_dcm4che3_data_Attributes | null, var1: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'org.dcm4che3.data.Attributes'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    static decompressSync(var0: org_dcm4che3_data_Attributes | null, var1: string | null): boolean;
    /**
     * @return original return type: 'javax.imageio.stream.FileImageInputStream'
     */
    createImageInputStream(): Promise<javax_imageio_stream_FileImageInputStream | null>;
    /**
     * @return original return type: 'javax.imageio.stream.FileImageInputStream'
     */
    createImageInputStreamSync(): javax_imageio_stream_FileImageInputStream | null;
    /**
     * @param var0 original type: 'javax.imageio.stream.ImageInputStream'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.io.OutputStream'
     * @return original return type: 'void'
     */
    writeFrameTo(var0: javax_imageio_stream_ImageInputStream | JavaInterfaceProxy<javax_imageio_stream_ImageInputStreamInterface> | null, var1: java_lang_Integer | number, var2: java_io_OutputStream | null): Promise<void>;
    /**
     * @param var0 original type: 'javax.imageio.stream.ImageInputStream'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.io.OutputStream'
     * @return original return type: 'void'
     */
    writeFrameToSync(var0: javax_imageio_stream_ImageInputStream | JavaInterfaceProxy<javax_imageio_stream_ImageInputStreamInterface> | null, var1: java_lang_Integer | number, var2: java_io_OutputStream | null): void;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'org.dcm4che3.data.Attributes'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'org.dcm4che3.imageio.codec.Decompressor'
     */
    static newInstanceAsync(var0: org_dcm4che3_data_Attributes | null, var1: string | null): Promise<Decompressor>;
    /**
     * @param var0 original type: 'org.dcm4che3.data.Attributes'
     * @param var1 original type: 'java.lang.String'
     */
    constructor(var0: org_dcm4che3_data_Attributes | null, var1: string | null);
}
declare const Decompressor_base: typeof DecompressorClass;
/**
 * Class org.dcm4che3.imageio.codec.Decompressor.
 *
 * This actually imports the java class for further use.
 * The class {@link DecompressorClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Decompressor extends Decompressor_base {
}
export default Decompressor;
//# sourceMappingURL=Decompressor.d.ts.map