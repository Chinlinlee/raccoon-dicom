import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Iterator as java_util_Iterator } from "./../../java/util/Iterator";
/**
 * This class just defines types, you should import {@link Marker} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class MarkerClass extends JavaClass {
    /**
     * Original type: 'java.lang.String'
     */
    static readonly ANY_MARKER: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly ANY_NON_NULL_MARKER: string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getName(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getNameSync(): string | null;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'void'
     */
    add(var0: MarkerClass | JavaInterfaceProxy<MarkerInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'void'
     */
    addSync(var0: MarkerClass | JavaInterfaceProxy<MarkerInterface> | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'boolean'
     */
    remove(var0: MarkerClass | JavaInterfaceProxy<MarkerInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'boolean'
     */
    removeSync(var0: MarkerClass | JavaInterfaceProxy<MarkerInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.util.Iterator'
     */
    iterator(): Promise<java_util_Iterator | null>;
    /**
     * @return original return type: 'java.util.Iterator'
     */
    iteratorSync(): java_util_Iterator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    contains(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    containsSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'boolean'
     */
    contains(var0: MarkerClass | JavaInterfaceProxy<MarkerInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'boolean'
     */
    containsSync(var0: MarkerClass | JavaInterfaceProxy<MarkerInterface> | null): boolean;
    /**
     * @return original return type: 'boolean'
     */
    hasChildren(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasChildrenSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    hasReferences(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasReferencesSync(): boolean;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createMarkerProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface MarkerInterface {
    /**
     * @return original return type: 'java.lang.String'
     */
    getName(): string | null;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'void'
     */
    add(var0: MarkerClass | JavaInterfaceProxy<MarkerInterface> | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'boolean'
     */
    remove(var0: MarkerClass | JavaInterfaceProxy<MarkerInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    hashCode(): number;
    /**
     * @return original return type: 'java.util.Iterator'
     */
    iterator(): java_util_Iterator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    contains(var0: string | null): boolean;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'boolean'
     */
    contains(var0: MarkerClass | JavaInterfaceProxy<MarkerInterface> | null): boolean;
    /**
     * @return original return type: 'boolean'
     */
    hasChildren(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    hasReferences(): boolean;
}
/**
 * Create a proxy for the {@link Marker} interface.
 * All required methods in {@link MarkerInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createMarkerProxy(methods: MarkerInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<MarkerInterface>;
declare const Marker_base: typeof MarkerClass;
/**
 * Class org.slf4j.Marker.
 *
 * This actually imports the java class for further use.
 * The class {@link MarkerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Marker extends Marker_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Marker;
//# sourceMappingURL=Marker.d.ts.map