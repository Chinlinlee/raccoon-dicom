import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Throwable as java_lang_Throwable } from "./../../java/lang/Throwable";
import { Marker as org_slf4j_Marker, MarkerInterface as org_slf4j_MarkerInterface } from "./Marker";
/**
 * This class just defines types, you should import {@link Logger} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class LoggerClass extends JavaClass {
    /**
     * Original type: 'java.lang.String'
     */
    static readonly ROOT_LOGGER_NAME: string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getName(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getNameSync(): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    info(var0: string | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    infoSync(var0: string | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    info(var0: string | null, var1: (BasicOrJavaType | null)[] | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    infoSync(var0: string | null, var1: (BasicOrJavaType | null)[] | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    info(var0: string | null, var1: java_lang_Throwable | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    infoSync(var0: string | null, var1: java_lang_Throwable | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    info(var0: string | null, var1: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    infoSync(var0: string | null, var1: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    info(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    infoSync(var0: string | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    info(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: java_lang_Throwable | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    infoSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: java_lang_Throwable | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    info(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: (BasicOrJavaType | null)[] | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    infoSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: (BasicOrJavaType | null)[] | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @param var3 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    info(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null, var3: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @param var3 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    infoSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null, var3: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    info(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    infoSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    info(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    infoSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    trace(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    traceSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    trace(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    traceSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @param var3 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    trace(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null, var3: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @param var3 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    traceSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null, var3: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    trace(var0: string | null, var1: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    traceSync(var0: string | null, var1: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    trace(var0: string | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    traceSync(var0: string | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    trace(var0: string | null, var1: (BasicOrJavaType | null)[] | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    traceSync(var0: string | null, var1: (BasicOrJavaType | null)[] | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    trace(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    traceSync(var0: string | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    trace(var0: string | null, var1: java_lang_Throwable | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    traceSync(var0: string | null, var1: java_lang_Throwable | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    trace(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: (BasicOrJavaType | null)[] | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    traceSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: (BasicOrJavaType | null)[] | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    trace(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: java_lang_Throwable | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    traceSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: java_lang_Throwable | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    debug(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: (BasicOrJavaType | null)[] | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    debugSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: (BasicOrJavaType | null)[] | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    debug(var0: string | null, var1: (BasicOrJavaType | null)[] | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    debugSync(var0: string | null, var1: (BasicOrJavaType | null)[] | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    debug(var0: string | null, var1: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    debugSync(var0: string | null, var1: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    debug(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    debugSync(var0: string | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    debug(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    debugSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    debug(var0: string | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    debugSync(var0: string | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @param var3 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    debug(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null, var3: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @param var3 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    debugSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null, var3: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    debug(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    debugSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    debug(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: java_lang_Throwable | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    debugSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: java_lang_Throwable | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    debug(var0: string | null, var1: java_lang_Throwable | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    debugSync(var0: string | null, var1: java_lang_Throwable | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    error(var0: string | null, var1: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    errorSync(var0: string | null, var1: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    error(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    errorSync(var0: string | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    error(var0: string | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    errorSync(var0: string | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    error(var0: string | null, var1: (BasicOrJavaType | null)[] | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    errorSync(var0: string | null, var1: (BasicOrJavaType | null)[] | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    error(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: (BasicOrJavaType | null)[] | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    errorSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: (BasicOrJavaType | null)[] | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @param var3 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    error(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null, var3: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @param var3 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    errorSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null, var3: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    error(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    errorSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    error(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    errorSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    error(var0: string | null, var1: java_lang_Throwable | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    errorSync(var0: string | null, var1: java_lang_Throwable | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    error(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: java_lang_Throwable | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    errorSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: java_lang_Throwable | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    warn(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: java_lang_Throwable | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    warnSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: java_lang_Throwable | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    warn(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: (BasicOrJavaType | null)[] | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    warnSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: (BasicOrJavaType | null)[] | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @param var3 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    warn(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null, var3: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @param var3 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    warnSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null, var3: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    warn(var0: string | null, var1: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    warnSync(var0: string | null, var1: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    warn(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    warnSync(var0: string | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    warn(var0: string | null, var1: (BasicOrJavaType | null)[] | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    warnSync(var0: string | null, var1: (BasicOrJavaType | null)[] | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    warn(var0: string | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    warnSync(var0: string | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    warn(var0: string | null, var1: java_lang_Throwable | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    warnSync(var0: string | null, var1: java_lang_Throwable | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    warn(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    warnSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    warn(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null): Promise<void>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    warnSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'boolean'
     */
    isTraceEnabled(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'boolean'
     */
    isTraceEnabledSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isTraceEnabled(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isTraceEnabledSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isInfoEnabled(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isInfoEnabledSync(): boolean;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'boolean'
     */
    isInfoEnabled(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'boolean'
     */
    isInfoEnabledSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isDebugEnabled(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isDebugEnabledSync(): boolean;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'boolean'
     */
    isDebugEnabled(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'boolean'
     */
    isDebugEnabledSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null): boolean;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'boolean'
     */
    isWarnEnabled(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'boolean'
     */
    isWarnEnabledSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isWarnEnabled(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isWarnEnabledSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isErrorEnabled(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isErrorEnabledSync(): boolean;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'boolean'
     */
    isErrorEnabled(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'boolean'
     */
    isErrorEnabledSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null): boolean;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createLoggerProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface LoggerInterface {
    /**
     * @return original return type: 'java.lang.String'
     */
    getName(): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    info(var0: string | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    info(var0: string | null, var1: (BasicOrJavaType | null)[] | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    info(var0: string | null, var1: java_lang_Throwable | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    info(var0: string | null, var1: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    info(var0: string | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    info(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: java_lang_Throwable | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    info(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: (BasicOrJavaType | null)[] | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @param var3 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    info(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null, var3: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    info(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    info(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    trace(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    trace(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @param var3 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    trace(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null, var3: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    trace(var0: string | null, var1: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    trace(var0: string | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    trace(var0: string | null, var1: (BasicOrJavaType | null)[] | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    trace(var0: string | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    trace(var0: string | null, var1: java_lang_Throwable | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    trace(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: (BasicOrJavaType | null)[] | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    trace(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: java_lang_Throwable | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    debug(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: (BasicOrJavaType | null)[] | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    debug(var0: string | null, var1: (BasicOrJavaType | null)[] | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    debug(var0: string | null, var1: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    debug(var0: string | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    debug(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    debug(var0: string | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @param var3 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    debug(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null, var3: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    debug(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    debug(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: java_lang_Throwable | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    debug(var0: string | null, var1: java_lang_Throwable | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    error(var0: string | null, var1: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    error(var0: string | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    error(var0: string | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    error(var0: string | null, var1: (BasicOrJavaType | null)[] | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    error(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: (BasicOrJavaType | null)[] | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @param var3 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    error(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null, var3: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    error(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    error(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    error(var0: string | null, var1: java_lang_Throwable | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    error(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: java_lang_Throwable | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    warn(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: java_lang_Throwable | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    warn(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: (BasicOrJavaType | null)[] | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @param var3 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    warn(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null, var3: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    warn(var0: string | null, var1: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    warn(var0: string | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    warn(var0: string | null, var1: (BasicOrJavaType | null)[] | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    warn(var0: string | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    warn(var0: string | null, var1: java_lang_Throwable | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    warn(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null, var2: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    warn(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null, var1: string | null): void;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'boolean'
     */
    isTraceEnabled(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isTraceEnabled(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isInfoEnabled(): boolean;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'boolean'
     */
    isInfoEnabled(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isDebugEnabled(): boolean;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'boolean'
     */
    isDebugEnabled(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null): boolean;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'boolean'
     */
    isWarnEnabled(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isWarnEnabled(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isErrorEnabled(): boolean;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'boolean'
     */
    isErrorEnabled(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null): boolean;
}
/**
 * Create a proxy for the {@link Logger} interface.
 * All required methods in {@link LoggerInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createLoggerProxy(methods: LoggerInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<LoggerInterface>;
declare const Logger_base: typeof LoggerClass;
/**
 * Class org.slf4j.Logger.
 *
 * This actually imports the java class for further use.
 * The class {@link LoggerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Logger extends Logger_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Logger;
//# sourceMappingURL=Logger.d.ts.map