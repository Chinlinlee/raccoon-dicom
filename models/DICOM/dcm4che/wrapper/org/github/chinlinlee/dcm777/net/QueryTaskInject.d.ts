import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Attributes as org_dcm4che3_data_Attributes } from "./../../../../dcm4che3/data/Attributes";
/**
 * This class just defines types, you should import {@link QueryTaskInject} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class QueryTaskInjectClass extends JavaClass {
    /**
     * @param var0 original type: 'org.dcm4che3.data.Attributes'
     * @return original return type: 'org.dcm4che3.data.Attributes'
     */
    adjust(var0: org_dcm4che3_data_Attributes | null): Promise<org_dcm4che3_data_Attributes | null>;
    /**
     * @param var0 original type: 'org.dcm4che3.data.Attributes'
     * @return original return type: 'org.dcm4che3.data.Attributes'
     */
    adjustSync(var0: org_dcm4che3_data_Attributes | null): org_dcm4che3_data_Attributes | null;
    /**
     * @return original return type: 'boolean'
     */
    hasMoreMatches(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasMoreMatchesSync(): boolean;
    /**
     * @return original return type: 'org.dcm4che3.data.Attributes'
     */
    nextMatch(): Promise<org_dcm4che3_data_Attributes | null>;
    /**
     * @return original return type: 'org.dcm4che3.data.Attributes'
     */
    nextMatchSync(): org_dcm4che3_data_Attributes | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createQueryTaskInjectProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface QueryTaskInjectInterface {
    /**
     * @param var0 original type: 'org.dcm4che3.data.Attributes'
     * @return original return type: 'org.dcm4che3.data.Attributes'
     */
    adjust(var0: org_dcm4che3_data_Attributes | null): org_dcm4che3_data_Attributes | null;
    /**
     * @return original return type: 'boolean'
     */
    hasMoreMatches(): boolean;
    /**
     * @return original return type: 'org.dcm4che3.data.Attributes'
     */
    nextMatch(): org_dcm4che3_data_Attributes | null;
}
/**
 * Create a proxy for the {@link QueryTaskInject} interface.
 * All required methods in {@link QueryTaskInjectInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createQueryTaskInjectProxy(methods: QueryTaskInjectInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<QueryTaskInjectInterface>;
declare const QueryTaskInject_base: typeof QueryTaskInjectClass;
/**
 * Class org.github.chinlinlee.dcm777.net.QueryTaskInject.
 *
 * This actually imports the java class for further use.
 * The class {@link QueryTaskInjectClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class QueryTaskInject extends QueryTaskInject_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default QueryTaskInject;
//# sourceMappingURL=QueryTaskInject.d.ts.map