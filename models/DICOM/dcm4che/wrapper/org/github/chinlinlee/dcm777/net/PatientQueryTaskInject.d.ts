import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
/**
 * This class just defines types, you should import {@link PatientQueryTaskInject} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class PatientQueryTaskInjectClass extends JavaClass {
    /**
     * @return original return type: 'void'
     */
    wrappedFindNextPatient(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    wrappedFindNextPatientSync(): void;
    /**
     * @return original return type: 'void'
     */
    getPatient(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    getPatientSync(): void;
    /**
     * @return original return type: 'boolean'
     */
    findNextPatient(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    findNextPatientSync(): boolean;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createPatientQueryTaskInjectProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface PatientQueryTaskInjectInterface {
    /**
     * @return original return type: 'void'
     */
    wrappedFindNextPatient(): void;
    /**
     * @return original return type: 'void'
     */
    getPatient(): void;
    /**
     * @return original return type: 'boolean'
     */
    findNextPatient(): boolean;
}
/**
 * Create a proxy for the {@link PatientQueryTaskInject} interface.
 * All required methods in {@link PatientQueryTaskInjectInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createPatientQueryTaskInjectProxy(methods: PatientQueryTaskInjectInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<PatientQueryTaskInjectInterface>;
declare const PatientQueryTaskInject_base: typeof PatientQueryTaskInjectClass;
/**
 * Class org.github.chinlinlee.dcm777.net.PatientQueryTaskInject.
 *
 * This actually imports the java class for further use.
 * The class {@link PatientQueryTaskInjectClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class PatientQueryTaskInject extends PatientQueryTaskInject_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default PatientQueryTaskInject;
//# sourceMappingURL=PatientQueryTaskInject.d.ts.map