import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
/**
 * This class just defines types, you should import {@link InstanceQueryTaskInject} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class InstanceQueryTaskInjectClass extends JavaClass {
    /**
     * @return original return type: 'void'
     */
    getInstance(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    getInstanceSync(): void;
    /**
     * @return original return type: 'void'
     */
    wrappedFindNextInstance(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    wrappedFindNextInstanceSync(): void;
    /**
     * @return original return type: 'boolean'
     */
    findNextInstance(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    findNextInstanceSync(): boolean;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createInstanceQueryTaskInjectProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface InstanceQueryTaskInjectInterface {
    /**
     * @return original return type: 'void'
     */
    getInstance(): void;
    /**
     * @return original return type: 'void'
     */
    wrappedFindNextInstance(): void;
    /**
     * @return original return type: 'boolean'
     */
    findNextInstance(): boolean;
}
/**
 * Create a proxy for the {@link InstanceQueryTaskInject} interface.
 * All required methods in {@link InstanceQueryTaskInjectInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createInstanceQueryTaskInjectProxy(methods: InstanceQueryTaskInjectInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<InstanceQueryTaskInjectInterface>;
declare const InstanceQueryTaskInject_base: typeof InstanceQueryTaskInjectClass;
/**
 * Class org.github.chinlinlee.dcm777.net.InstanceQueryTaskInject.
 *
 * This actually imports the java class for further use.
 * The class {@link InstanceQueryTaskInjectClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class InstanceQueryTaskInject extends InstanceQueryTaskInject_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default InstanceQueryTaskInject;
//# sourceMappingURL=InstanceQueryTaskInject.d.ts.map