import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
/**
 * This class just defines types, you should import {@link RetrieveAuditInject} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class RetrieveAuditInjectClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setEventResult(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setEventResultSync(var0: string | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    onDicomInstancesTransferred(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    onDicomInstancesTransferredSync(var0: string | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    onBeginTransferringDICOMInstances(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    onBeginTransferringDICOMInstancesSync(var0: string | null): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createRetrieveAuditInjectProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface RetrieveAuditInjectInterface {
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setEventResult(var0: string | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    onDicomInstancesTransferred(var0: string | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    onBeginTransferringDICOMInstances(var0: string | null): void;
}
/**
 * Create a proxy for the {@link RetrieveAuditInject} interface.
 * All required methods in {@link RetrieveAuditInjectInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createRetrieveAuditInjectProxy(methods: RetrieveAuditInjectInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<RetrieveAuditInjectInterface>;
declare const RetrieveAuditInject_base: typeof RetrieveAuditInjectClass;
/**
 * Class org.github.chinlinlee.dcm777.dcmqrscp.RetrieveAuditInject.
 *
 * This actually imports the java class for further use.
 * The class {@link RetrieveAuditInjectClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class RetrieveAuditInject extends RetrieveAuditInject_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default RetrieveAuditInject;
//# sourceMappingURL=RetrieveAuditInject.d.ts.map