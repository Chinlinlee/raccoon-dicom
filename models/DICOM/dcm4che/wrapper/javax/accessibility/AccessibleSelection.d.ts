import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Accessible as javax_accessibility_Accessible } from "./Accessible";
import { Integer as java_lang_Integer } from "./../../java/lang/Integer";
/**
 * This class just defines types, you should import {@link AccessibleSelection} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class AccessibleSelectionClass extends JavaClass {
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'javax.accessibility.Accessible'
     */
    getAccessibleSelection(var0: java_lang_Integer | number): Promise<javax_accessibility_Accessible | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'javax.accessibility.Accessible'
     */
    getAccessibleSelectionSync(var0: java_lang_Integer | number): javax_accessibility_Accessible | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    isAccessibleChildSelected(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    isAccessibleChildSelectedSync(var0: java_lang_Integer | number): boolean;
    /**
     * @return original return type: 'int'
     */
    getAccessibleSelectionCount(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getAccessibleSelectionCountSync(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    addAccessibleSelection(var0: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    addAccessibleSelectionSync(var0: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    removeAccessibleSelection(var0: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    removeAccessibleSelectionSync(var0: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    clearAccessibleSelection(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    clearAccessibleSelectionSync(): void;
    /**
     * @return original return type: 'void'
     */
    selectAllAccessibleSelection(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    selectAllAccessibleSelectionSync(): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createAccessibleSelectionProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface AccessibleSelectionInterface {
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'javax.accessibility.Accessible'
     */
    getAccessibleSelection(var0: java_lang_Integer | number): javax_accessibility_Accessible | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    isAccessibleChildSelected(var0: java_lang_Integer | number): boolean;
    /**
     * @return original return type: 'int'
     */
    getAccessibleSelectionCount(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    addAccessibleSelection(var0: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    removeAccessibleSelection(var0: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    clearAccessibleSelection(): void;
    /**
     * @return original return type: 'void'
     */
    selectAllAccessibleSelection(): void;
}
/**
 * Create a proxy for the {@link AccessibleSelection} interface.
 * All required methods in {@link AccessibleSelectionInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createAccessibleSelectionProxy(methods: AccessibleSelectionInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<AccessibleSelectionInterface>;
declare const AccessibleSelection_base: typeof AccessibleSelectionClass;
/**
 * Class javax.accessibility.AccessibleSelection.
 *
 * This actually imports the java class for further use.
 * The class {@link AccessibleSelectionClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class AccessibleSelection extends AccessibleSelection_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default AccessibleSelection;
//# sourceMappingURL=AccessibleSelection.d.ts.map