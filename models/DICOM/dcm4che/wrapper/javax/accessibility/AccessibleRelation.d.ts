import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Locale as java_util_Locale } from "./../../java/util/Locale";
import { Long as java_lang_Long } from "./../../java/lang/Long";
import { Integer as java_lang_Integer } from "./../../java/lang/Integer";
import { Class as java_lang_Class } from "./../../java/lang/Class";
/**
 * This class just defines types, you should import {@link AccessibleRelation} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class AccessibleRelationClass extends JavaClass {
    /**
     * Original type: 'java.lang.String'
     */
    static readonly LABEL_FOR: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly LABELED_BY: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly MEMBER_OF: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly CONTROLLER_FOR: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly CONTROLLED_BY: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly FLOWS_TO: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly FLOWS_FROM: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly SUBWINDOW_OF: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly PARENT_WINDOW_OF: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly EMBEDS: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly EMBEDDED_BY: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly CHILD_NODE_OF: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly LABEL_FOR_PROPERTY: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly LABELED_BY_PROPERTY: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly MEMBER_OF_PROPERTY: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly CONTROLLER_FOR_PROPERTY: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly CONTROLLED_BY_PROPERTY: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly FLOWS_TO_PROPERTY: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly FLOWS_FROM_PROPERTY: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly SUBWINDOW_OF_PROPERTY: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly PARENT_WINDOW_OF_PROPERTY: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly EMBEDS_PROPERTY: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly EMBEDDED_BY_PROPERTY: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly CHILD_NODE_OF_PROPERTY: string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getKey(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getKeySync(): string | null;
    /**
     * @return original return type: 'java.lang.Object[]'
     */
    getTarget(): Promise<(BasicOrJavaType | null)[] | null>;
    /**
     * @return original return type: 'java.lang.Object[]'
     */
    getTargetSync(): (BasicOrJavaType | null)[] | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    setTarget(var0: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    setTargetSync(var0: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    setTarget(var0: (BasicOrJavaType | null)[] | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    setTargetSync(var0: (BasicOrJavaType | null)[] | null): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'java.lang.String'
     */
    toDisplayString(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toDisplayStringSync(): string | null;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    toDisplayString(var0: java_util_Locale | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    toDisplayStringSync(var0: java_util_Locale | null): string | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object[]'
     * @return original return type: 'javax.accessibility.AccessibleRelation'
     */
    static newInstance(var0: string | null, var1: (BasicOrJavaType | null)[] | null): Promise<AccessibleRelation>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'javax.accessibility.AccessibleRelation'
     */
    static newInstance(var0: string | null, var1: BasicOrJavaType | null): Promise<AccessibleRelation>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.accessibility.AccessibleRelation'
     */
    static newInstance(var0: string | null): Promise<AccessibleRelation>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object[]'
     */
    constructor(var0: string | null, var1: (BasicOrJavaType | null)[] | null);
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     */
    constructor(var0: string | null, var1: BasicOrJavaType | null);
    /**
     * @param var0 original type: 'java.lang.String'
     */
    constructor(var0: string | null);
}
declare const AccessibleRelation_base: typeof AccessibleRelationClass;
/**
 * Class javax.accessibility.AccessibleRelation.
 *
 * This actually imports the java class for further use.
 * The class {@link AccessibleRelationClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class AccessibleRelation extends AccessibleRelation_base {
}
export default AccessibleRelation;
//# sourceMappingURL=AccessibleRelation.d.ts.map