import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Number as java_lang_Number } from "./../../java/lang/Number";
/**
 * This class just defines types, you should import {@link AccessibleValue} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class AccessibleValueClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.Number'
     */
    getCurrentAccessibleValue(): Promise<java_lang_Number | null>;
    /**
     * @return original return type: 'java.lang.Number'
     */
    getCurrentAccessibleValueSync(): java_lang_Number | null;
    /**
     * @param var0 original type: 'java.lang.Number'
     * @return original return type: 'boolean'
     */
    setCurrentAccessibleValue(var0: java_lang_Number | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Number'
     * @return original return type: 'boolean'
     */
    setCurrentAccessibleValueSync(var0: java_lang_Number | null): boolean;
    /**
     * @return original return type: 'java.lang.Number'
     */
    getMinimumAccessibleValue(): Promise<java_lang_Number | null>;
    /**
     * @return original return type: 'java.lang.Number'
     */
    getMinimumAccessibleValueSync(): java_lang_Number | null;
    /**
     * @return original return type: 'java.lang.Number'
     */
    getMaximumAccessibleValue(): Promise<java_lang_Number | null>;
    /**
     * @return original return type: 'java.lang.Number'
     */
    getMaximumAccessibleValueSync(): java_lang_Number | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createAccessibleValueProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface AccessibleValueInterface {
    /**
     * @return original return type: 'java.lang.Number'
     */
    getCurrentAccessibleValue(): java_lang_Number | null;
    /**
     * @param var0 original type: 'java.lang.Number'
     * @return original return type: 'boolean'
     */
    setCurrentAccessibleValue(var0: java_lang_Number | null): boolean;
    /**
     * @return original return type: 'java.lang.Number'
     */
    getMinimumAccessibleValue(): java_lang_Number | null;
    /**
     * @return original return type: 'java.lang.Number'
     */
    getMaximumAccessibleValue(): java_lang_Number | null;
}
/**
 * Create a proxy for the {@link AccessibleValue} interface.
 * All required methods in {@link AccessibleValueInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createAccessibleValueProxy(methods: AccessibleValueInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<AccessibleValueInterface>;
declare const AccessibleValue_base: typeof AccessibleValueClass;
/**
 * Class javax.accessibility.AccessibleValue.
 *
 * This actually imports the java class for further use.
 * The class {@link AccessibleValueClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class AccessibleValue extends AccessibleValue_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default AccessibleValue;
//# sourceMappingURL=AccessibleValue.d.ts.map