import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Point as java_awt_Point } from "./../../java/awt/Point";
import { Rectangle as java_awt_Rectangle } from "./../../java/awt/Rectangle";
import { Dimension as java_awt_Dimension } from "./../../java/awt/Dimension";
import { Color as java_awt_Color } from "./../../java/awt/Color";
import { Font as java_awt_Font } from "./../../java/awt/Font";
import { FontMetrics as java_awt_FontMetrics } from "./../../java/awt/FontMetrics";
import { Boolean as java_lang_Boolean } from "./../../java/lang/Boolean";
import { Cursor as java_awt_Cursor } from "./../../java/awt/Cursor";
import { Accessible as javax_accessibility_Accessible } from "./Accessible";
import { FocusListener as java_awt_event_FocusListener, FocusListenerInterface as java_awt_event_FocusListenerInterface } from "./../../java/awt/event/FocusListener";
/**
 * This class just defines types, you should import {@link AccessibleComponent} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class AccessibleComponentClass extends JavaClass {
    /**
     * @param var0 original type: 'java.awt.Point'
     * @return original return type: 'boolean'
     */
    contains(var0: java_awt_Point | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.awt.Point'
     * @return original return type: 'boolean'
     */
    containsSync(var0: java_awt_Point | null): boolean;
    /**
     * @return original return type: 'java.awt.Rectangle'
     */
    getBounds(): Promise<java_awt_Rectangle | null>;
    /**
     * @return original return type: 'java.awt.Rectangle'
     */
    getBoundsSync(): java_awt_Rectangle | null;
    /**
     * @return original return type: 'java.awt.Point'
     */
    getLocation(): Promise<java_awt_Point | null>;
    /**
     * @return original return type: 'java.awt.Point'
     */
    getLocationSync(): java_awt_Point | null;
    /**
     * @return original return type: 'java.awt.Dimension'
     */
    getSize(): Promise<java_awt_Dimension | null>;
    /**
     * @return original return type: 'java.awt.Dimension'
     */
    getSizeSync(): java_awt_Dimension | null;
    /**
     * @param var0 original type: 'java.awt.Dimension'
     * @return original return type: 'void'
     */
    setSize(var0: java_awt_Dimension | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.Dimension'
     * @return original return type: 'void'
     */
    setSizeSync(var0: java_awt_Dimension | null): void;
    /**
     * @return original return type: 'boolean'
     */
    isEnabled(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isEnabledSync(): boolean;
    /**
     * @param var0 original type: 'java.awt.Rectangle'
     * @return original return type: 'void'
     */
    setBounds(var0: java_awt_Rectangle | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.Rectangle'
     * @return original return type: 'void'
     */
    setBoundsSync(var0: java_awt_Rectangle | null): void;
    /**
     * @param var0 original type: 'java.awt.Point'
     * @return original return type: 'void'
     */
    setLocation(var0: java_awt_Point | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.Point'
     * @return original return type: 'void'
     */
    setLocationSync(var0: java_awt_Point | null): void;
    /**
     * @param var0 original type: 'java.awt.Color'
     * @return original return type: 'void'
     */
    setBackground(var0: java_awt_Color | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.Color'
     * @return original return type: 'void'
     */
    setBackgroundSync(var0: java_awt_Color | null): void;
    /**
     * @return original return type: 'java.awt.Color'
     */
    getBackground(): Promise<java_awt_Color | null>;
    /**
     * @return original return type: 'java.awt.Color'
     */
    getBackgroundSync(): java_awt_Color | null;
    /**
     * @return original return type: 'java.awt.Font'
     */
    getFont(): Promise<java_awt_Font | null>;
    /**
     * @return original return type: 'java.awt.Font'
     */
    getFontSync(): java_awt_Font | null;
    /**
     * @param var0 original type: 'java.awt.Font'
     * @return original return type: 'java.awt.FontMetrics'
     */
    getFontMetrics(var0: java_awt_Font | null): Promise<java_awt_FontMetrics | null>;
    /**
     * @param var0 original type: 'java.awt.Font'
     * @return original return type: 'java.awt.FontMetrics'
     */
    getFontMetricsSync(var0: java_awt_Font | null): java_awt_FontMetrics | null;
    /**
     * @param var0 original type: 'java.awt.Font'
     * @return original return type: 'void'
     */
    setFont(var0: java_awt_Font | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.Font'
     * @return original return type: 'void'
     */
    setFontSync(var0: java_awt_Font | null): void;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setVisible(var0: java_lang_Boolean | boolean): Promise<void>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setVisibleSync(var0: java_lang_Boolean | boolean): void;
    /**
     * @return original return type: 'java.awt.Color'
     */
    getForeground(): Promise<java_awt_Color | null>;
    /**
     * @return original return type: 'java.awt.Color'
     */
    getForegroundSync(): java_awt_Color | null;
    /**
     * @param var0 original type: 'java.awt.Color'
     * @return original return type: 'void'
     */
    setForeground(var0: java_awt_Color | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.Color'
     * @return original return type: 'void'
     */
    setForegroundSync(var0: java_awt_Color | null): void;
    /**
     * @return original return type: 'boolean'
     */
    isShowing(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isShowingSync(): boolean;
    /**
     * @param var0 original type: 'java.awt.Cursor'
     * @return original return type: 'void'
     */
    setCursor(var0: java_awt_Cursor | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.Cursor'
     * @return original return type: 'void'
     */
    setCursorSync(var0: java_awt_Cursor | null): void;
    /**
     * @return original return type: 'boolean'
     */
    isVisible(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isVisibleSync(): boolean;
    /**
     * @return original return type: 'void'
     */
    requestFocus(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    requestFocusSync(): void;
    /**
     * @return original return type: 'java.awt.Point'
     */
    getLocationOnScreen(): Promise<java_awt_Point | null>;
    /**
     * @return original return type: 'java.awt.Point'
     */
    getLocationOnScreenSync(): java_awt_Point | null;
    /**
     * @param var0 original type: 'java.awt.Point'
     * @return original return type: 'javax.accessibility.Accessible'
     */
    getAccessibleAt(var0: java_awt_Point | null): Promise<javax_accessibility_Accessible | null>;
    /**
     * @param var0 original type: 'java.awt.Point'
     * @return original return type: 'javax.accessibility.Accessible'
     */
    getAccessibleAtSync(var0: java_awt_Point | null): javax_accessibility_Accessible | null;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setEnabled(var0: java_lang_Boolean | boolean): Promise<void>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setEnabledSync(var0: java_lang_Boolean | boolean): void;
    /**
     * @return original return type: 'boolean'
     */
    isFocusTraversable(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isFocusTraversableSync(): boolean;
    /**
     * @param var0 original type: 'java.awt.event.FocusListener'
     * @return original return type: 'void'
     */
    addFocusListener(var0: java_awt_event_FocusListener | JavaInterfaceProxy<java_awt_event_FocusListenerInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.event.FocusListener'
     * @return original return type: 'void'
     */
    addFocusListenerSync(var0: java_awt_event_FocusListener | JavaInterfaceProxy<java_awt_event_FocusListenerInterface> | null): void;
    /**
     * @return original return type: 'java.awt.Cursor'
     */
    getCursor(): Promise<java_awt_Cursor | null>;
    /**
     * @return original return type: 'java.awt.Cursor'
     */
    getCursorSync(): java_awt_Cursor | null;
    /**
     * @param var0 original type: 'java.awt.event.FocusListener'
     * @return original return type: 'void'
     */
    removeFocusListener(var0: java_awt_event_FocusListener | JavaInterfaceProxy<java_awt_event_FocusListenerInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.event.FocusListener'
     * @return original return type: 'void'
     */
    removeFocusListenerSync(var0: java_awt_event_FocusListener | JavaInterfaceProxy<java_awt_event_FocusListenerInterface> | null): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createAccessibleComponentProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface AccessibleComponentInterface {
    /**
     * @param var0 original type: 'java.awt.Point'
     * @return original return type: 'boolean'
     */
    contains(var0: java_awt_Point | null): boolean;
    /**
     * @return original return type: 'java.awt.Rectangle'
     */
    getBounds(): java_awt_Rectangle | null;
    /**
     * @return original return type: 'java.awt.Point'
     */
    getLocation(): java_awt_Point | null;
    /**
     * @return original return type: 'java.awt.Dimension'
     */
    getSize(): java_awt_Dimension | null;
    /**
     * @param var0 original type: 'java.awt.Dimension'
     * @return original return type: 'void'
     */
    setSize(var0: java_awt_Dimension | null): void;
    /**
     * @return original return type: 'boolean'
     */
    isEnabled(): boolean;
    /**
     * @param var0 original type: 'java.awt.Rectangle'
     * @return original return type: 'void'
     */
    setBounds(var0: java_awt_Rectangle | null): void;
    /**
     * @param var0 original type: 'java.awt.Point'
     * @return original return type: 'void'
     */
    setLocation(var0: java_awt_Point | null): void;
    /**
     * @param var0 original type: 'java.awt.Color'
     * @return original return type: 'void'
     */
    setBackground(var0: java_awt_Color | null): void;
    /**
     * @return original return type: 'java.awt.Color'
     */
    getBackground(): java_awt_Color | null;
    /**
     * @return original return type: 'java.awt.Font'
     */
    getFont(): java_awt_Font | null;
    /**
     * @param var0 original type: 'java.awt.Font'
     * @return original return type: 'java.awt.FontMetrics'
     */
    getFontMetrics(var0: java_awt_Font | null): java_awt_FontMetrics | null;
    /**
     * @param var0 original type: 'java.awt.Font'
     * @return original return type: 'void'
     */
    setFont(var0: java_awt_Font | null): void;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setVisible(var0: java_lang_Boolean | boolean): void;
    /**
     * @return original return type: 'java.awt.Color'
     */
    getForeground(): java_awt_Color | null;
    /**
     * @param var0 original type: 'java.awt.Color'
     * @return original return type: 'void'
     */
    setForeground(var0: java_awt_Color | null): void;
    /**
     * @return original return type: 'boolean'
     */
    isShowing(): boolean;
    /**
     * @param var0 original type: 'java.awt.Cursor'
     * @return original return type: 'void'
     */
    setCursor(var0: java_awt_Cursor | null): void;
    /**
     * @return original return type: 'boolean'
     */
    isVisible(): boolean;
    /**
     * @return original return type: 'void'
     */
    requestFocus(): void;
    /**
     * @return original return type: 'java.awt.Point'
     */
    getLocationOnScreen(): java_awt_Point | null;
    /**
     * @param var0 original type: 'java.awt.Point'
     * @return original return type: 'javax.accessibility.Accessible'
     */
    getAccessibleAt(var0: java_awt_Point | null): javax_accessibility_Accessible | null;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setEnabled(var0: java_lang_Boolean | boolean): void;
    /**
     * @return original return type: 'boolean'
     */
    isFocusTraversable(): boolean;
    /**
     * @param var0 original type: 'java.awt.event.FocusListener'
     * @return original return type: 'void'
     */
    addFocusListener(var0: java_awt_event_FocusListener | JavaInterfaceProxy<java_awt_event_FocusListenerInterface> | null): void;
    /**
     * @return original return type: 'java.awt.Cursor'
     */
    getCursor(): java_awt_Cursor | null;
    /**
     * @param var0 original type: 'java.awt.event.FocusListener'
     * @return original return type: 'void'
     */
    removeFocusListener(var0: java_awt_event_FocusListener | JavaInterfaceProxy<java_awt_event_FocusListenerInterface> | null): void;
}
/**
 * Create a proxy for the {@link AccessibleComponent} interface.
 * All required methods in {@link AccessibleComponentInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createAccessibleComponentProxy(methods: AccessibleComponentInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<AccessibleComponentInterface>;
declare const AccessibleComponent_base: typeof AccessibleComponentClass;
/**
 * Class javax.accessibility.AccessibleComponent.
 *
 * This actually imports the java class for further use.
 * The class {@link AccessibleComponentClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class AccessibleComponent extends AccessibleComponent_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default AccessibleComponent;
//# sourceMappingURL=AccessibleComponent.d.ts.map