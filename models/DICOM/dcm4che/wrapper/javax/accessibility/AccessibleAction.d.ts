import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Integer as java_lang_Integer } from "./../../java/lang/Integer";
/**
 * This class just defines types, you should import {@link AccessibleAction} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class AccessibleActionClass extends JavaClass {
    /**
     * Original type: 'java.lang.String'
     */
    static readonly TOGGLE_EXPAND: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly INCREMENT: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly DECREMENT: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly CLICK: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly TOGGLE_POPUP: string | null;
    /**
     * @return original return type: 'int'
     */
    getAccessibleActionCount(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getAccessibleActionCountSync(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAccessibleActionDescription(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAccessibleActionDescriptionSync(var0: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    doAccessibleAction(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    doAccessibleActionSync(var0: java_lang_Integer | number): boolean;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createAccessibleActionProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface AccessibleActionInterface {
    /**
     * @return original return type: 'int'
     */
    getAccessibleActionCount(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAccessibleActionDescription(var0: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    doAccessibleAction(var0: java_lang_Integer | number): boolean;
}
/**
 * Create a proxy for the {@link AccessibleAction} interface.
 * All required methods in {@link AccessibleActionInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createAccessibleActionProxy(methods: AccessibleActionInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<AccessibleActionInterface>;
declare const AccessibleAction_base: typeof AccessibleActionClass;
/**
 * Class javax.accessibility.AccessibleAction.
 *
 * This actually imports the java class for further use.
 * The class {@link AccessibleActionClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class AccessibleAction extends AccessibleAction_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default AccessibleAction;
//# sourceMappingURL=AccessibleAction.d.ts.map