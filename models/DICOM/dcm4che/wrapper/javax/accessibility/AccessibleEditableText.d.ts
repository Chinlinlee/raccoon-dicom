import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Integer as java_lang_Integer } from "./../../java/lang/Integer";
import { AttributeSet as javax_swing_text_AttributeSet, AttributeSetInterface as javax_swing_text_AttributeSetInterface } from "./../swing/text/AttributeSet";
import { Point as java_awt_Point } from "./../../java/awt/Point";
import { Rectangle as java_awt_Rectangle } from "./../../java/awt/Rectangle";
/**
 * This class just defines types, you should import {@link AccessibleEditableText} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class AccessibleEditableTextClass extends JavaClass {
    /**
     * Original type: 'int'
     */
    static readonly CHARACTER: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly WORD: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly SENTENCE: java_lang_Integer | number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    delete(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    deleteSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setTextContents(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setTextContentsSync(var0: string | null): void;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    insertTextAtIndex(var0: java_lang_Integer | number, var1: string | null): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    insertTextAtIndexSync(var0: java_lang_Integer | number, var1: string | null): void;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getTextRange(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getTextRangeSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    cut(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    cutSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    paste(var0: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    pasteSync(var0: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    replaceText(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: string | null): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    replaceTextSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: string | null): void;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    selectText(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    selectTextSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'javax.swing.text.AttributeSet'
     * @return original return type: 'void'
     */
    setAttributes(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: javax_swing_text_AttributeSet | JavaInterfaceProxy<javax_swing_text_AttributeSetInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'javax.swing.text.AttributeSet'
     * @return original return type: 'void'
     */
    setAttributesSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: javax_swing_text_AttributeSet | JavaInterfaceProxy<javax_swing_text_AttributeSetInterface> | null): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getSelectedText(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getSelectedTextSync(): string | null;
    /**
     * @param var0 original type: 'java.awt.Point'
     * @return original return type: 'int'
     */
    getIndexAtPoint(var0: java_awt_Point | null): Promise<number>;
    /**
     * @param var0 original type: 'java.awt.Point'
     * @return original return type: 'int'
     */
    getIndexAtPointSync(var0: java_awt_Point | null): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.awt.Rectangle'
     */
    getCharacterBounds(var0: java_lang_Integer | number): Promise<java_awt_Rectangle | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.awt.Rectangle'
     */
    getCharacterBoundsSync(var0: java_lang_Integer | number): java_awt_Rectangle | null;
    /**
     * @return original return type: 'int'
     */
    getCharCount(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getCharCountSync(): number;
    /**
     * @return original return type: 'int'
     */
    getCaretPosition(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getCaretPositionSync(): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAtIndex(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAtIndexSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAfterIndex(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAfterIndexSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getBeforeIndex(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getBeforeIndexSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'javax.swing.text.AttributeSet'
     */
    getCharacterAttribute(var0: java_lang_Integer | number): Promise<javax_swing_text_AttributeSet | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'javax.swing.text.AttributeSet'
     */
    getCharacterAttributeSync(var0: java_lang_Integer | number): javax_swing_text_AttributeSet | null;
    /**
     * @return original return type: 'int'
     */
    getSelectionStart(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getSelectionStartSync(): number;
    /**
     * @return original return type: 'int'
     */
    getSelectionEnd(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getSelectionEndSync(): number;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createAccessibleEditableTextProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface AccessibleEditableTextInterface {
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    delete(var0: java_lang_Integer | number, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setTextContents(var0: string | null): void;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    insertTextAtIndex(var0: java_lang_Integer | number, var1: string | null): void;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getTextRange(var0: java_lang_Integer | number, var1: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    cut(var0: java_lang_Integer | number, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    paste(var0: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    replaceText(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: string | null): void;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    selectText(var0: java_lang_Integer | number, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'javax.swing.text.AttributeSet'
     * @return original return type: 'void'
     */
    setAttributes(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: javax_swing_text_AttributeSet | JavaInterfaceProxy<javax_swing_text_AttributeSetInterface> | null): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getSelectedText(): string | null;
    /**
     * @param var0 original type: 'java.awt.Point'
     * @return original return type: 'int'
     */
    getIndexAtPoint(var0: java_awt_Point | null): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.awt.Rectangle'
     */
    getCharacterBounds(var0: java_lang_Integer | number): java_awt_Rectangle | null;
    /**
     * @return original return type: 'int'
     */
    getCharCount(): number;
    /**
     * @return original return type: 'int'
     */
    getCaretPosition(): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAtIndex(var0: java_lang_Integer | number, var1: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAfterIndex(var0: java_lang_Integer | number, var1: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getBeforeIndex(var0: java_lang_Integer | number, var1: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'javax.swing.text.AttributeSet'
     */
    getCharacterAttribute(var0: java_lang_Integer | number): javax_swing_text_AttributeSet | null;
    /**
     * @return original return type: 'int'
     */
    getSelectionStart(): number;
    /**
     * @return original return type: 'int'
     */
    getSelectionEnd(): number;
}
/**
 * Create a proxy for the {@link AccessibleEditableText} interface.
 * All required methods in {@link AccessibleEditableTextInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createAccessibleEditableTextProxy(methods: AccessibleEditableTextInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<AccessibleEditableTextInterface>;
declare const AccessibleEditableText_base: typeof AccessibleEditableTextClass;
/**
 * Class javax.accessibility.AccessibleEditableText.
 *
 * This actually imports the java class for further use.
 * The class {@link AccessibleEditableTextClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class AccessibleEditableText extends AccessibleEditableText_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default AccessibleEditableText;
//# sourceMappingURL=AccessibleEditableText.d.ts.map