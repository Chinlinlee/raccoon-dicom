/// <reference types="node" />
import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Integer as java_lang_Integer } from "./../../../java/lang/Integer";
import { IIOByteBuffer as javax_imageio_stream_IIOByteBuffer } from "./IIOByteBuffer";
import { Long as java_lang_Long } from "./../../../java/lang/Long";
import { Float as java_lang_Float } from "./../../../java/lang/Float";
import { Double as java_lang_Double } from "./../../../java/lang/Double";
import { Short as java_lang_Short } from "./../../../java/lang/Short";
import { ByteOrder as java_nio_ByteOrder } from "./../../../java/nio/ByteOrder";
/**
 * This class just defines types, you should import {@link ImageInputStream} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ImageInputStreamClass extends JavaClass {
    /**
     * @return original return type: 'long'
     */
    length(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    lengthSync(): number;
    /**
     * @return original return type: 'void'
     */
    flush(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    flushSync(): void;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'int'
     */
    read(var0: Buffer | null): Promise<number>;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'int'
     */
    readSync(var0: Buffer | null): number;
    /**
     * @return original return type: 'int'
     */
    read(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    readSync(): number;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    read(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    readSync(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    readLine(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    readLineSync(): string | null;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @return original return type: 'int'
     */
    readInt(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    readIntSync(): number;
    /**
     * @return original return type: 'void'
     */
    mark(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    markSync(): void;
    /**
     * @return original return type: 'void'
     */
    reset(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    resetSync(): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    readUTF(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    readUTFSync(): string | null;
    /**
     * @param var0 original type: 'javax.imageio.stream.IIOByteBuffer'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    readBytes(var0: javax_imageio_stream_IIOByteBuffer | null, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'javax.imageio.stream.IIOByteBuffer'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    readBytesSync(var0: javax_imageio_stream_IIOByteBuffer | null, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'char'
     */
    readChar(): Promise<string | null>;
    /**
     * @return original return type: 'char'
     */
    readCharSync(): string | null;
    /**
     * @return original return type: 'float'
     */
    readFloat(): Promise<number>;
    /**
     * @return original return type: 'float'
     */
    readFloatSync(): number;
    /**
     * @return original return type: 'boolean'
     */
    isCached(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isCachedSync(): boolean;
    /**
     * @return original return type: 'int'
     */
    readUnsignedShort(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    readUnsignedShortSync(): number;
    /**
     * @return original return type: 'long'
     */
    readLong(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    readLongSync(): number;
    /**
     * @return original return type: 'byte'
     */
    readByte(): Promise<number>;
    /**
     * @return original return type: 'byte'
     */
    readByteSync(): number;
    /**
     * @return original return type: 'short'
     */
    readShort(): Promise<number>;
    /**
     * @return original return type: 'short'
     */
    readShortSync(): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    seek(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    seekSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFully(var0: (java_lang_Integer | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFullySync(var0: (java_lang_Integer | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'long[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFully(var0: (java_lang_Long | bigint | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFullySync(var0: (java_lang_Long | bigint | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'float[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFully(var0: (java_lang_Float | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'float[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFullySync(var0: (java_lang_Float | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'double[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFully(var0: (java_lang_Double | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'double[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFullySync(var0: (java_lang_Double | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFully(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFullySync(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'void'
     */
    readFully(var0: Buffer | null): Promise<void>;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'void'
     */
    readFullySync(var0: Buffer | null): void;
    /**
     * @param var0 original type: 'short[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFully(var0: (java_lang_Short | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'short[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFullySync(var0: (java_lang_Short | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFully(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFullySync(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'long'
     */
    skipBytes(var0: java_lang_Long | bigint | number): Promise<number>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'long'
     */
    skipBytesSync(var0: java_lang_Long | bigint | number): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    skipBytes(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    skipBytesSync(var0: java_lang_Integer | number): number;
    /**
     * @return original return type: 'boolean'
     */
    readBoolean(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    readBooleanSync(): boolean;
    /**
     * @return original return type: 'int'
     */
    readUnsignedByte(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    readUnsignedByteSync(): number;
    /**
     * @return original return type: 'double'
     */
    readDouble(): Promise<number>;
    /**
     * @return original return type: 'double'
     */
    readDoubleSync(): number;
    /**
     * @return original return type: 'java.nio.ByteOrder'
     */
    getByteOrder(): Promise<java_nio_ByteOrder | null>;
    /**
     * @return original return type: 'java.nio.ByteOrder'
     */
    getByteOrderSync(): java_nio_ByteOrder | null;
    /**
     * @param var0 original type: 'java.nio.ByteOrder'
     * @return original return type: 'void'
     */
    setByteOrder(var0: java_nio_ByteOrder | null): Promise<void>;
    /**
     * @param var0 original type: 'java.nio.ByteOrder'
     * @return original return type: 'void'
     */
    setByteOrderSync(var0: java_nio_ByteOrder | null): void;
    /**
     * @return original return type: 'long'
     */
    getStreamPosition(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    getStreamPositionSync(): number;
    /**
     * @return original return type: 'long'
     */
    readUnsignedInt(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    readUnsignedIntSync(): number;
    /**
     * @return original return type: 'int'
     */
    getBitOffset(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getBitOffsetSync(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    setBitOffset(var0: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    setBitOffsetSync(var0: java_lang_Integer | number): void;
    /**
     * @return original return type: 'int'
     */
    readBit(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    readBitSync(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'long'
     */
    readBits(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'long'
     */
    readBitsSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    flushBefore(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    flushBeforeSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'long'
     */
    getFlushedPosition(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    getFlushedPositionSync(): number;
    /**
     * @return original return type: 'boolean'
     */
    isCachedMemory(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isCachedMemorySync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isCachedFile(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isCachedFileSync(): boolean;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createImageInputStreamProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface ImageInputStreamInterface {
    /**
     * @return original return type: 'long'
     */
    length(): number;
    /**
     * @return original return type: 'void'
     */
    flush(): void;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'int'
     */
    read(var0: Buffer | null): number;
    /**
     * @return original return type: 'int'
     */
    read(): number;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    read(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    readLine(): string | null;
    /**
     * @return original return type: 'void'
     */
    close(): void;
    /**
     * @return original return type: 'int'
     */
    readInt(): number;
    /**
     * @return original return type: 'void'
     */
    mark(): void;
    /**
     * @return original return type: 'void'
     */
    reset(): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    readUTF(): string | null;
    /**
     * @param var0 original type: 'javax.imageio.stream.IIOByteBuffer'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    readBytes(var0: javax_imageio_stream_IIOByteBuffer | null, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'char'
     */
    readChar(): string | null;
    /**
     * @return original return type: 'float'
     */
    readFloat(): number;
    /**
     * @return original return type: 'boolean'
     */
    isCached(): boolean;
    /**
     * @return original return type: 'int'
     */
    readUnsignedShort(): number;
    /**
     * @return original return type: 'long'
     */
    readLong(): number;
    /**
     * @return original return type: 'byte'
     */
    readByte(): number;
    /**
     * @return original return type: 'short'
     */
    readShort(): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    seek(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFully(var0: (java_lang_Integer | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'long[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFully(var0: (java_lang_Long | bigint | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'float[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFully(var0: (java_lang_Float | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'double[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFully(var0: (java_lang_Double | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFully(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'void'
     */
    readFully(var0: Buffer | null): void;
    /**
     * @param var0 original type: 'short[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFully(var0: (java_lang_Short | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    readFully(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'long'
     */
    skipBytes(var0: java_lang_Long | bigint | number): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    skipBytes(var0: java_lang_Integer | number): number;
    /**
     * @return original return type: 'boolean'
     */
    readBoolean(): boolean;
    /**
     * @return original return type: 'int'
     */
    readUnsignedByte(): number;
    /**
     * @return original return type: 'double'
     */
    readDouble(): number;
    /**
     * @return original return type: 'java.nio.ByteOrder'
     */
    getByteOrder(): java_nio_ByteOrder | null;
    /**
     * @param var0 original type: 'java.nio.ByteOrder'
     * @return original return type: 'void'
     */
    setByteOrder(var0: java_nio_ByteOrder | null): void;
    /**
     * @return original return type: 'long'
     */
    getStreamPosition(): number;
    /**
     * @return original return type: 'long'
     */
    readUnsignedInt(): number;
    /**
     * @return original return type: 'int'
     */
    getBitOffset(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    setBitOffset(var0: java_lang_Integer | number): void;
    /**
     * @return original return type: 'int'
     */
    readBit(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'long'
     */
    readBits(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    flushBefore(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'long'
     */
    getFlushedPosition(): number;
    /**
     * @return original return type: 'boolean'
     */
    isCachedMemory(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isCachedFile(): boolean;
}
/**
 * Create a proxy for the {@link ImageInputStream} interface.
 * All required methods in {@link ImageInputStreamInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createImageInputStreamProxy(methods: ImageInputStreamInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<ImageInputStreamInterface>;
declare const ImageInputStream_base: typeof ImageInputStreamClass;
/**
 * Class javax.imageio.stream.ImageInputStream.
 *
 * This actually imports the java class for further use.
 * The class {@link ImageInputStreamClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ImageInputStream extends ImageInputStream_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default ImageInputStream;
//# sourceMappingURL=ImageInputStream.d.ts.map