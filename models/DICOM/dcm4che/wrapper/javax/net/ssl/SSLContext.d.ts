import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { Provider as java_security_Provider } from "./../../../java/security/Provider";
import { KeyManager as javax_net_ssl_KeyManager, KeyManagerInterface as javax_net_ssl_KeyManagerInterface } from "./KeyManager";
import { TrustManager as javax_net_ssl_TrustManager, TrustManagerInterface as javax_net_ssl_TrustManagerInterface } from "./TrustManager";
import { SecureRandom as java_security_SecureRandom } from "./../../../java/security/SecureRandom";
import { SSLServerSocketFactory as javax_net_ssl_SSLServerSocketFactory } from "./SSLServerSocketFactory";
import { SSLEngine as javax_net_ssl_SSLEngine } from "./SSLEngine";
import { Integer as java_lang_Integer } from "./../../../java/lang/Integer";
import { SSLSessionContext as javax_net_ssl_SSLSessionContext } from "./SSLSessionContext";
import { SSLParameters as javax_net_ssl_SSLParameters } from "./SSLParameters";
import { SSLSocketFactory as javax_net_ssl_SSLSocketFactory } from "./SSLSocketFactory";
import { Long as java_lang_Long } from "./../../../java/lang/Long";
import { Class as java_lang_Class } from "./../../../java/lang/Class";
/**
 * This class just defines types, you should import {@link SSLContext} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class SSLContextClass extends JavaClass {
    /**
     * @return original return type: 'javax.net.ssl.SSLContext'
     */
    static getDefault(): Promise<SSLContext | null>;
    /**
     * @return original return type: 'javax.net.ssl.SSLContext'
     */
    static getDefaultSync(): SSLContext | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.security.Provider'
     * @return original return type: 'javax.net.ssl.SSLContext'
     */
    static getInstance(var0: string | null, var1: java_security_Provider | null): Promise<SSLContext | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.security.Provider'
     * @return original return type: 'javax.net.ssl.SSLContext'
     */
    static getInstanceSync(var0: string | null, var1: java_security_Provider | null): SSLContext | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'javax.net.ssl.SSLContext'
     */
    static getInstance(var0: string | null, var1: string | null): Promise<SSLContext | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'javax.net.ssl.SSLContext'
     */
    static getInstanceSync(var0: string | null, var1: string | null): SSLContext | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.net.ssl.SSLContext'
     */
    static getInstance(var0: string | null): Promise<SSLContext | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.net.ssl.SSLContext'
     */
    static getInstanceSync(var0: string | null): SSLContext | null;
    /**
     * @param var0 original type: 'javax.net.ssl.KeyManager[]'
     * @param var1 original type: 'javax.net.ssl.TrustManager[]'
     * @param var2 original type: 'java.security.SecureRandom'
     * @return original return type: 'void'
     */
    init(var0: (javax_net_ssl_KeyManager | JavaInterfaceProxy<javax_net_ssl_KeyManagerInterface> | null)[] | null, var1: (javax_net_ssl_TrustManager | JavaInterfaceProxy<javax_net_ssl_TrustManagerInterface> | null)[] | null, var2: java_security_SecureRandom | null): Promise<void>;
    /**
     * @param var0 original type: 'javax.net.ssl.KeyManager[]'
     * @param var1 original type: 'javax.net.ssl.TrustManager[]'
     * @param var2 original type: 'java.security.SecureRandom'
     * @return original return type: 'void'
     */
    initSync(var0: (javax_net_ssl_KeyManager | JavaInterfaceProxy<javax_net_ssl_KeyManagerInterface> | null)[] | null, var1: (javax_net_ssl_TrustManager | JavaInterfaceProxy<javax_net_ssl_TrustManagerInterface> | null)[] | null, var2: java_security_SecureRandom | null): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getProtocol(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getProtocolSync(): string | null;
    /**
     * @param var0 original type: 'javax.net.ssl.SSLContext'
     * @return original return type: 'void'
     */
    static setDefault(var0: SSLContextClass | null): Promise<void>;
    /**
     * @param var0 original type: 'javax.net.ssl.SSLContext'
     * @return original return type: 'void'
     */
    static setDefaultSync(var0: SSLContextClass | null): void;
    /**
     * @return original return type: 'java.security.Provider'
     */
    getProvider(): Promise<java_security_Provider | null>;
    /**
     * @return original return type: 'java.security.Provider'
     */
    getProviderSync(): java_security_Provider | null;
    /**
     * @return original return type: 'javax.net.ssl.SSLServerSocketFactory'
     */
    getServerSocketFactory(): Promise<javax_net_ssl_SSLServerSocketFactory | null>;
    /**
     * @return original return type: 'javax.net.ssl.SSLServerSocketFactory'
     */
    getServerSocketFactorySync(): javax_net_ssl_SSLServerSocketFactory | null;
    /**
     * @return original return type: 'javax.net.ssl.SSLEngine'
     */
    createSSLEngine(): Promise<javax_net_ssl_SSLEngine | null>;
    /**
     * @return original return type: 'javax.net.ssl.SSLEngine'
     */
    createSSLEngineSync(): javax_net_ssl_SSLEngine | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'javax.net.ssl.SSLEngine'
     */
    createSSLEngine(var0: string | null, var1: java_lang_Integer | number): Promise<javax_net_ssl_SSLEngine | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'javax.net.ssl.SSLEngine'
     */
    createSSLEngineSync(var0: string | null, var1: java_lang_Integer | number): javax_net_ssl_SSLEngine | null;
    /**
     * @return original return type: 'javax.net.ssl.SSLSessionContext'
     */
    getServerSessionContext(): Promise<javax_net_ssl_SSLSessionContext | null>;
    /**
     * @return original return type: 'javax.net.ssl.SSLSessionContext'
     */
    getServerSessionContextSync(): javax_net_ssl_SSLSessionContext | null;
    /**
     * @return original return type: 'javax.net.ssl.SSLSessionContext'
     */
    getClientSessionContext(): Promise<javax_net_ssl_SSLSessionContext | null>;
    /**
     * @return original return type: 'javax.net.ssl.SSLSessionContext'
     */
    getClientSessionContextSync(): javax_net_ssl_SSLSessionContext | null;
    /**
     * @return original return type: 'javax.net.ssl.SSLParameters'
     */
    getDefaultSSLParameters(): Promise<javax_net_ssl_SSLParameters | null>;
    /**
     * @return original return type: 'javax.net.ssl.SSLParameters'
     */
    getDefaultSSLParametersSync(): javax_net_ssl_SSLParameters | null;
    /**
     * @return original return type: 'javax.net.ssl.SSLParameters'
     */
    getSupportedSSLParameters(): Promise<javax_net_ssl_SSLParameters | null>;
    /**
     * @return original return type: 'javax.net.ssl.SSLParameters'
     */
    getSupportedSSLParametersSync(): javax_net_ssl_SSLParameters | null;
    /**
     * @return original return type: 'javax.net.ssl.SSLSocketFactory'
     */
    getSocketFactory(): Promise<javax_net_ssl_SSLSocketFactory | null>;
    /**
     * @return original return type: 'javax.net.ssl.SSLSocketFactory'
     */
    getSocketFactorySync(): javax_net_ssl_SSLSocketFactory | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const SSLContext_base: typeof SSLContextClass;
/**
 * Class javax.net.ssl.SSLContext.
 *
 * This actually imports the java class for further use.
 * The class {@link SSLContextClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class SSLContext extends SSLContext_base {
}
export default SSLContext;
//# sourceMappingURL=SSLContext.d.ts.map