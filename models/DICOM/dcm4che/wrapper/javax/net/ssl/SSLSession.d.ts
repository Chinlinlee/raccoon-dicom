/// <reference types="node" />
import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { SSLSessionContext as javax_net_ssl_SSLSessionContext } from "./SSLSessionContext";
import { Certificate as java_security_cert_Certificate } from "./../../../java/security/cert/Certificate";
import { X509Certificate as javax_security_cert_X509Certificate } from "./../../security/cert/X509Certificate";
import { Principal as java_security_Principal } from "./../../../java/security/Principal";
/**
 * This class just defines types, you should import {@link SSLSession} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class SSLSessionClass extends JavaClass {
    /**
     * @return original return type: 'void'
     */
    invalidate(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    invalidateSync(): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPeerHost(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPeerHostSync(): string | null;
    /**
     * @return original return type: 'int'
     */
    getPeerPort(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getPeerPortSync(): number;
    /**
     * @return original return type: 'javax.net.ssl.SSLSessionContext'
     */
    getSessionContext(): Promise<javax_net_ssl_SSLSessionContext | null>;
    /**
     * @return original return type: 'javax.net.ssl.SSLSessionContext'
     */
    getSessionContextSync(): javax_net_ssl_SSLSessionContext | null;
    /**
     * @return original return type: 'long'
     */
    getLastAccessedTime(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    getLastAccessedTimeSync(): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    removeValue(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    removeValueSync(var0: string | null): void;
    /**
     * @return original return type: 'java.lang.String[]'
     */
    getValueNames(): Promise<(string | null)[] | null>;
    /**
     * @return original return type: 'java.lang.String[]'
     */
    getValueNamesSync(): (string | null)[] | null;
    /**
     * @return original return type: 'java.security.cert.Certificate[]'
     */
    getPeerCertificates(): Promise<(java_security_cert_Certificate | null)[] | null>;
    /**
     * @return original return type: 'java.security.cert.Certificate[]'
     */
    getPeerCertificatesSync(): (java_security_cert_Certificate | null)[] | null;
    /**
     * @return original return type: 'java.security.cert.Certificate[]'
     */
    getLocalCertificates(): Promise<(java_security_cert_Certificate | null)[] | null>;
    /**
     * @return original return type: 'java.security.cert.Certificate[]'
     */
    getLocalCertificatesSync(): (java_security_cert_Certificate | null)[] | null;
    /**
     * @return original return type: 'javax.security.cert.X509Certificate[]'
     */
    getPeerCertificateChain(): Promise<(javax_security_cert_X509Certificate | null)[] | null>;
    /**
     * @return original return type: 'javax.security.cert.X509Certificate[]'
     */
    getPeerCertificateChainSync(): (javax_security_cert_X509Certificate | null)[] | null;
    /**
     * @return original return type: 'java.security.Principal'
     */
    getPeerPrincipal(): Promise<java_security_Principal | null>;
    /**
     * @return original return type: 'java.security.Principal'
     */
    getPeerPrincipalSync(): java_security_Principal | null;
    /**
     * @return original return type: 'java.security.Principal'
     */
    getLocalPrincipal(): Promise<java_security_Principal | null>;
    /**
     * @return original return type: 'java.security.Principal'
     */
    getLocalPrincipalSync(): java_security_Principal | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getCipherSuite(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getCipherSuiteSync(): string | null;
    /**
     * @return original return type: 'int'
     */
    getPacketBufferSize(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getPacketBufferSizeSync(): number;
    /**
     * @return original return type: 'int'
     */
    getApplicationBufferSize(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getApplicationBufferSizeSync(): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Object'
     */
    getValue(var0: string | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Object'
     */
    getValueSync(var0: string | null): BasicOrJavaType | null;
    /**
     * @return original return type: 'byte[]'
     */
    getId(): Promise<Buffer | null>;
    /**
     * @return original return type: 'byte[]'
     */
    getIdSync(): Buffer | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getProtocol(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getProtocolSync(): string | null;
    /**
     * @return original return type: 'long'
     */
    getCreationTime(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    getCreationTimeSync(): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    putValue(var0: string | null, var1: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    putValueSync(var0: string | null, var1: BasicOrJavaType | null): void;
    /**
     * @return original return type: 'boolean'
     */
    isValid(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isValidSync(): boolean;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createSSLSessionProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface SSLSessionInterface {
    /**
     * @return original return type: 'void'
     */
    invalidate(): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPeerHost(): string | null;
    /**
     * @return original return type: 'int'
     */
    getPeerPort(): number;
    /**
     * @return original return type: 'javax.net.ssl.SSLSessionContext'
     */
    getSessionContext(): javax_net_ssl_SSLSessionContext | null;
    /**
     * @return original return type: 'long'
     */
    getLastAccessedTime(): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    removeValue(var0: string | null): void;
    /**
     * @return original return type: 'java.lang.String[]'
     */
    getValueNames(): (string | null)[] | null;
    /**
     * @return original return type: 'java.security.cert.Certificate[]'
     */
    getPeerCertificates(): (java_security_cert_Certificate | null)[] | null;
    /**
     * @return original return type: 'java.security.cert.Certificate[]'
     */
    getLocalCertificates(): (java_security_cert_Certificate | null)[] | null;
    /**
     * @return original return type: 'javax.security.cert.X509Certificate[]'
     */
    getPeerCertificateChain?(): (javax_security_cert_X509Certificate | null)[] | null;
    /**
     * @return original return type: 'java.security.Principal'
     */
    getPeerPrincipal(): java_security_Principal | null;
    /**
     * @return original return type: 'java.security.Principal'
     */
    getLocalPrincipal(): java_security_Principal | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getCipherSuite(): string | null;
    /**
     * @return original return type: 'int'
     */
    getPacketBufferSize(): number;
    /**
     * @return original return type: 'int'
     */
    getApplicationBufferSize(): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Object'
     */
    getValue(var0: string | null): BasicOrJavaType | null;
    /**
     * @return original return type: 'byte[]'
     */
    getId(): Buffer | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getProtocol(): string | null;
    /**
     * @return original return type: 'long'
     */
    getCreationTime(): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    putValue(var0: string | null, var1: BasicOrJavaType | null): void;
    /**
     * @return original return type: 'boolean'
     */
    isValid(): boolean;
}
/**
 * Create a proxy for the {@link SSLSession} interface.
 * All required methods in {@link SSLSessionInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createSSLSessionProxy(methods: SSLSessionInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<SSLSessionInterface>;
declare const SSLSession_base: typeof SSLSessionClass;
/**
 * Class javax.net.ssl.SSLSession.
 *
 * This actually imports the java class for further use.
 * The class {@link SSLSessionClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class SSLSession extends SSLSession_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default SSLSession;
//# sourceMappingURL=SSLSession.d.ts.map