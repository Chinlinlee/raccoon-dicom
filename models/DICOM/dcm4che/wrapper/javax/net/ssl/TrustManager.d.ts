import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
/**
 * This class just defines types, you should import {@link TrustManager} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class TrustManagerClass extends JavaClass {
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createTrustManagerProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface TrustManagerInterface {
}
/**
 * Create a proxy for the {@link TrustManager} interface.
 * All required methods in {@link TrustManagerInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createTrustManagerProxy(methods: TrustManagerInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<TrustManagerInterface>;
declare const TrustManager_base: typeof TrustManagerClass;
/**
 * Class javax.net.ssl.TrustManager.
 *
 * This actually imports the java class for further use.
 * The class {@link TrustManagerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class TrustManager extends TrustManager_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default TrustManager;
//# sourceMappingURL=TrustManager.d.ts.map