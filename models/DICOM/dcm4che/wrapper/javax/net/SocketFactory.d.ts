import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Socket as java_net_Socket } from "./../../java/net/Socket";
import { InetAddress as java_net_InetAddress } from "./../../java/net/InetAddress";
import { Integer as java_lang_Integer } from "./../../java/lang/Integer";
import { Long as java_lang_Long } from "./../../java/lang/Long";
import { Class as java_lang_Class } from "./../../java/lang/Class";
/**
 * This class just defines types, you should import {@link SocketFactory} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class SocketFactoryClass extends JavaClass {
    /**
     * @return original return type: 'javax.net.SocketFactory'
     */
    static getDefault(): Promise<SocketFactory | null>;
    /**
     * @return original return type: 'javax.net.SocketFactory'
     */
    static getDefaultSync(): SocketFactory | null;
    /**
     * @param var0 original type: 'java.net.InetAddress'
     * @param var1 original type: 'int'
     * @return original return type: 'java.net.Socket'
     */
    createSocket(var0: java_net_InetAddress | null, var1: java_lang_Integer | number): Promise<java_net_Socket | null>;
    /**
     * @param var0 original type: 'java.net.InetAddress'
     * @param var1 original type: 'int'
     * @return original return type: 'java.net.Socket'
     */
    createSocketSync(var0: java_net_InetAddress | null, var1: java_lang_Integer | number): java_net_Socket | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.net.InetAddress'
     * @param var3 original type: 'int'
     * @return original return type: 'java.net.Socket'
     */
    createSocket(var0: string | null, var1: java_lang_Integer | number, var2: java_net_InetAddress | null, var3: java_lang_Integer | number): Promise<java_net_Socket | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.net.InetAddress'
     * @param var3 original type: 'int'
     * @return original return type: 'java.net.Socket'
     */
    createSocketSync(var0: string | null, var1: java_lang_Integer | number, var2: java_net_InetAddress | null, var3: java_lang_Integer | number): java_net_Socket | null;
    /**
     * @param var0 original type: 'java.net.InetAddress'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.net.InetAddress'
     * @param var3 original type: 'int'
     * @return original return type: 'java.net.Socket'
     */
    createSocket(var0: java_net_InetAddress | null, var1: java_lang_Integer | number, var2: java_net_InetAddress | null, var3: java_lang_Integer | number): Promise<java_net_Socket | null>;
    /**
     * @param var0 original type: 'java.net.InetAddress'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.net.InetAddress'
     * @param var3 original type: 'int'
     * @return original return type: 'java.net.Socket'
     */
    createSocketSync(var0: java_net_InetAddress | null, var1: java_lang_Integer | number, var2: java_net_InetAddress | null, var3: java_lang_Integer | number): java_net_Socket | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'java.net.Socket'
     */
    createSocket(var0: string | null, var1: java_lang_Integer | number): Promise<java_net_Socket | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'java.net.Socket'
     */
    createSocketSync(var0: string | null, var1: java_lang_Integer | number): java_net_Socket | null;
    /**
     * @return original return type: 'java.net.Socket'
     */
    createSocket(): Promise<java_net_Socket | null>;
    /**
     * @return original return type: 'java.net.Socket'
     */
    createSocketSync(): java_net_Socket | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const SocketFactory_base: typeof SocketFactoryClass;
/**
 * Class javax.net.SocketFactory.
 *
 * This actually imports the java class for further use.
 * The class {@link SocketFactoryClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class SocketFactory extends SocketFactory_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default SocketFactory;
//# sourceMappingURL=SocketFactory.d.ts.map