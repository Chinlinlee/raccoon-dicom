import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { JsonArray as javax_json_JsonArray, JsonArrayInterface as javax_json_JsonArrayInterface } from "./JsonArray";
import { JsonValue as javax_json_JsonValue, JsonValueInterface as javax_json_JsonValueInterface } from "./JsonValue";
import { Boolean as java_lang_Boolean } from "./../../java/lang/Boolean";
import { Integer as java_lang_Integer } from "./../../java/lang/Integer";
import { JsonNumber as javax_json_JsonNumber } from "./JsonNumber";
import { JsonString as javax_json_JsonString } from "./JsonString";
import { JsonValue$ValueType as javax_json_JsonValue$ValueType } from "./JsonValue$ValueType";
import { Collection as java_util_Collection } from "./../../java/util/Collection";
import { BiFunction as java_util_function_BiFunction, BiFunctionInterface as java_util_function_BiFunctionInterface } from "./../../java/util/function/BiFunction";
import { Set as java_util_Set } from "./../../java/util/Set";
import { Map as java_util_Map, MapInterface as java_util_MapInterface } from "./../../java/util/Map";
import { BiConsumer as java_util_function_BiConsumer, BiConsumerInterface as java_util_function_BiConsumerInterface } from "./../../java/util/function/BiConsumer";
import { Function as java_util_function_Function, FunctionInterface as java_util_function_FunctionInterface } from "./../../java/util/function/Function";
/**
 * This class just defines types, you should import {@link JsonObject} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonObjectClass extends JavaClass {
    /**
     * Original type: 'javax.json.JsonObject'
     */
    static readonly EMPTY_JSON_OBJECT: JsonObjectClass | JavaInterfaceProxy<JsonObjectInterface> | null;
    /**
     * Original type: 'javax.json.JsonArray'
     */
    static readonly EMPTY_JSON_ARRAY: javax_json_JsonArray | JavaInterfaceProxy<javax_json_JsonArrayInterface> | null;
    /**
     * Original type: 'javax.json.JsonValue'
     */
    static readonly NULL: javax_json_JsonValue | JavaInterfaceProxy<javax_json_JsonValueInterface> | null;
    /**
     * Original type: 'javax.json.JsonValue'
     */
    static readonly TRUE: javax_json_JsonValue | JavaInterfaceProxy<javax_json_JsonValueInterface> | null;
    /**
     * Original type: 'javax.json.JsonValue'
     */
    static readonly FALSE: javax_json_JsonValue | JavaInterfaceProxy<javax_json_JsonValueInterface> | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    getBoolean(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    getBooleanSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'boolean'
     * @return original return type: 'boolean'
     */
    getBoolean(var0: string | null, var1: java_lang_Boolean | boolean): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'boolean'
     * @return original return type: 'boolean'
     */
    getBooleanSync(var0: string | null, var1: java_lang_Boolean | boolean): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int'
     */
    getInt(var0: string | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int'
     */
    getIntSync(var0: string | null): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    getInt(var0: string | null, var1: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    getIntSync(var0: string | null, var1: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    isNull(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    isNullSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getString(var0: string | null, var1: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getStringSync(var0: string | null, var1: string | null): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getString(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getStringSync(var0: string | null): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonObject'
     */
    getJsonObject(var0: string | null): Promise<JsonObject | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonObject'
     */
    getJsonObjectSync(var0: string | null): JsonObject | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonNumber'
     */
    getJsonNumber(var0: string | null): Promise<javax_json_JsonNumber | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonNumber'
     */
    getJsonNumberSync(var0: string | null): javax_json_JsonNumber | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonString'
     */
    getJsonString(var0: string | null): Promise<javax_json_JsonString | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonString'
     */
    getJsonStringSync(var0: string | null): javax_json_JsonString | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonArray'
     */
    getJsonArray(var0: string | null): Promise<javax_json_JsonArray | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonArray'
     */
    getJsonArraySync(var0: string | null): javax_json_JsonArray | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonValue'
     */
    getValue(var0: string | null): Promise<javax_json_JsonValue | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonValue'
     */
    getValueSync(var0: string | null): javax_json_JsonValue | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'javax.json.JsonObject'
     */
    asJsonObject(): Promise<JsonObject | null>;
    /**
     * @return original return type: 'javax.json.JsonObject'
     */
    asJsonObjectSync(): JsonObject | null;
    /**
     * @return original return type: 'javax.json.JsonArray'
     */
    asJsonArray(): Promise<javax_json_JsonArray | null>;
    /**
     * @return original return type: 'javax.json.JsonArray'
     */
    asJsonArraySync(): javax_json_JsonArray | null;
    /**
     * @return original return type: 'javax.json.JsonValue$ValueType'
     */
    getValueType(): Promise<javax_json_JsonValue$ValueType | null>;
    /**
     * @return original return type: 'javax.json.JsonValue$ValueType'
     */
    getValueTypeSync(): javax_json_JsonValue$ValueType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    remove(var0: BasicOrJavaType | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    removeSync(var0: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    remove(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    removeSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    get(var0: BasicOrJavaType | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    getSync(var0: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    put(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    putSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.util.Collection'
     */
    values(): Promise<java_util_Collection | null>;
    /**
     * @return original return type: 'java.util.Collection'
     */
    valuesSync(): java_util_Collection | null;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'void'
     */
    clear(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    clearSync(): void;
    /**
     * @return original return type: 'boolean'
     */
    isEmpty(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isEmptySync(): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    replace(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    replaceSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    replace(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    replaceSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.util.function.BiFunction'
     * @return original return type: 'void'
     */
    replaceAll(var0: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.function.BiFunction'
     * @return original return type: 'void'
     */
    replaceAllSync(var0: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): void;
    /**
     * @return original return type: 'int'
     */
    size(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    sizeSync(): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    merge(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null, var2: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    mergeSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null, var2: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.util.Set'
     */
    entrySet(): Promise<java_util_Set | null>;
    /**
     * @return original return type: 'java.util.Set'
     */
    entrySetSync(): java_util_Set | null;
    /**
     * @param var0 original type: 'java.util.Map'
     * @return original return type: 'void'
     */
    putAll(var0: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.Map'
     * @return original return type: 'void'
     */
    putAllSync(var0: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    putIfAbsent(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    putIfAbsentSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    compute(var0: BasicOrJavaType | null, var1: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    computeSync(var0: BasicOrJavaType | null, var1: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'void'
     */
    forEach(var0: java_util_function_BiConsumer | JavaInterfaceProxy<java_util_function_BiConsumerInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'void'
     */
    forEachSync(var0: java_util_function_BiConsumer | JavaInterfaceProxy<java_util_function_BiConsumerInterface> | null): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    containsKey(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    containsKeySync(var0: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.Function'
     * @return original return type: 'java.lang.Object'
     */
    computeIfAbsent(var0: BasicOrJavaType | null, var1: java_util_function_Function | JavaInterfaceProxy<java_util_function_FunctionInterface> | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.Function'
     * @return original return type: 'java.lang.Object'
     */
    computeIfAbsentSync(var0: BasicOrJavaType | null, var1: java_util_function_Function | JavaInterfaceProxy<java_util_function_FunctionInterface> | null): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.util.Set'
     */
    keySet(): Promise<java_util_Set | null>;
    /**
     * @return original return type: 'java.util.Set'
     */
    keySetSync(): java_util_Set | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    containsValue(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    containsValueSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    getOrDefault(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    getOrDefaultSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    computeIfPresent(var0: BasicOrJavaType | null, var1: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    computeIfPresentSync(var0: BasicOrJavaType | null, var1: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): BasicOrJavaType | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createJsonObjectProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface JsonObjectInterface {
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    getBoolean(var0: string | null): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'boolean'
     * @return original return type: 'boolean'
     */
    getBoolean(var0: string | null, var1: java_lang_Boolean | boolean): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int'
     */
    getInt(var0: string | null): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    getInt(var0: string | null, var1: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    isNull(var0: string | null): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getString(var0: string | null, var1: string | null): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getString(var0: string | null): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonObject'
     */
    getJsonObject(var0: string | null): JsonObject | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonNumber'
     */
    getJsonNumber(var0: string | null): javax_json_JsonNumber | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonString'
     */
    getJsonString(var0: string | null): javax_json_JsonString | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonArray'
     */
    getJsonArray(var0: string | null): javax_json_JsonArray | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonValue'
     */
    getValue?(var0: string | null): javax_json_JsonValue | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): string;
    /**
     * @return original return type: 'javax.json.JsonObject'
     */
    asJsonObject?(): JsonObject | null;
    /**
     * @return original return type: 'javax.json.JsonArray'
     */
    asJsonArray?(): javax_json_JsonArray | null;
    /**
     * @return original return type: 'javax.json.JsonValue$ValueType'
     */
    getValueType(): javax_json_JsonValue$ValueType | null;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    remove?(var0: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    remove?(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    get(var0: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    put(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.util.Collection'
     */
    values(): java_util_Collection | null;
    /**
     * @return original return type: 'int'
     */
    hashCode(): number;
    /**
     * @return original return type: 'void'
     */
    clear(): void;
    /**
     * @return original return type: 'boolean'
     */
    isEmpty(): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    replace?(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    replace?(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.util.function.BiFunction'
     * @return original return type: 'void'
     */
    replaceAll?(var0: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): void;
    /**
     * @return original return type: 'int'
     */
    size(): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    merge?(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null, var2: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.util.Set'
     */
    entrySet(): java_util_Set | null;
    /**
     * @param var0 original type: 'java.util.Map'
     * @return original return type: 'void'
     */
    putAll(var0: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    putIfAbsent?(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    compute?(var0: BasicOrJavaType | null, var1: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'void'
     */
    forEach?(var0: java_util_function_BiConsumer | JavaInterfaceProxy<java_util_function_BiConsumerInterface> | null): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    containsKey(var0: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.Function'
     * @return original return type: 'java.lang.Object'
     */
    computeIfAbsent?(var0: BasicOrJavaType | null, var1: java_util_function_Function | JavaInterfaceProxy<java_util_function_FunctionInterface> | null): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.util.Set'
     */
    keySet(): java_util_Set | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    containsValue(var0: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    getOrDefault?(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    computeIfPresent?(var0: BasicOrJavaType | null, var1: java_util_function_BiFunction | JavaInterfaceProxy<java_util_function_BiFunctionInterface> | null): BasicOrJavaType | null;
}
/**
 * Create a proxy for the {@link JsonObject} interface.
 * All required methods in {@link JsonObjectInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createJsonObjectProxy(methods: JsonObjectInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<JsonObjectInterface>;
declare const JsonObject_base: typeof JsonObjectClass;
/**
 * Class javax.json.JsonObject.
 *
 * This actually imports the java class for further use.
 * The class {@link JsonObjectClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonObject extends JsonObject_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default JsonObject;
//# sourceMappingURL=JsonObject.d.ts.map