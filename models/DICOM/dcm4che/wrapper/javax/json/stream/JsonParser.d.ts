import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { JsonValue as javax_json_JsonValue } from "./../JsonValue";
import { JsonParser$Event as javax_json_stream_JsonParser$Event } from "./JsonParser$Event";
import { JsonLocation as javax_json_stream_JsonLocation } from "./JsonLocation";
import { JsonObject as javax_json_JsonObject } from "./../JsonObject";
import { JsonArray as javax_json_JsonArray } from "./../JsonArray";
import { BigDecimal as java_math_BigDecimal } from "./../../../java/math/BigDecimal";
import { Stream as java_util_stream_Stream } from "./../../../java/util/stream/Stream";
/**
 * This class just defines types, you should import {@link JsonParser} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonParserClass extends JavaClass {
    /**
     * @return original return type: 'int'
     */
    getInt(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getIntSync(): number;
    /**
     * @return original return type: 'long'
     */
    getLong(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    getLongSync(): number;
    /**
     * @return original return type: 'javax.json.JsonValue'
     */
    getValue(): Promise<javax_json_JsonValue | null>;
    /**
     * @return original return type: 'javax.json.JsonValue'
     */
    getValueSync(): javax_json_JsonValue | null;
    /**
     * @return original return type: 'boolean'
     */
    hasNext(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasNextSync(): boolean;
    /**
     * @return original return type: 'javax.json.stream.JsonParser$Event'
     */
    next(): Promise<javax_json_stream_JsonParser$Event | null>;
    /**
     * @return original return type: 'javax.json.stream.JsonParser$Event'
     */
    nextSync(): javax_json_stream_JsonParser$Event | null;
    /**
     * @return original return type: 'javax.json.stream.JsonLocation'
     */
    getLocation(): Promise<javax_json_stream_JsonLocation | null>;
    /**
     * @return original return type: 'javax.json.stream.JsonLocation'
     */
    getLocationSync(): javax_json_stream_JsonLocation | null;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @return original return type: 'javax.json.JsonObject'
     */
    getObject(): Promise<javax_json_JsonObject | null>;
    /**
     * @return original return type: 'javax.json.JsonObject'
     */
    getObjectSync(): javax_json_JsonObject | null;
    /**
     * @return original return type: 'javax.json.JsonArray'
     */
    getArray(): Promise<javax_json_JsonArray | null>;
    /**
     * @return original return type: 'javax.json.JsonArray'
     */
    getArraySync(): javax_json_JsonArray | null;
    /**
     * @return original return type: 'void'
     */
    skipArray(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    skipArraySync(): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getString(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getStringSync(): string | null;
    /**
     * @return original return type: 'java.math.BigDecimal'
     */
    getBigDecimal(): Promise<java_math_BigDecimal | null>;
    /**
     * @return original return type: 'java.math.BigDecimal'
     */
    getBigDecimalSync(): java_math_BigDecimal | null;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    getArrayStream(): Promise<java_util_stream_Stream | null>;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    getArrayStreamSync(): java_util_stream_Stream | null;
    /**
     * @return original return type: 'boolean'
     */
    isIntegralNumber(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isIntegralNumberSync(): boolean;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    getObjectStream(): Promise<java_util_stream_Stream | null>;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    getObjectStreamSync(): java_util_stream_Stream | null;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    getValueStream(): Promise<java_util_stream_Stream | null>;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    getValueStreamSync(): java_util_stream_Stream | null;
    /**
     * @return original return type: 'void'
     */
    skipObject(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    skipObjectSync(): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createJsonParserProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface JsonParserInterface {
    /**
     * @return original return type: 'int'
     */
    getInt(): number;
    /**
     * @return original return type: 'long'
     */
    getLong(): number;
    /**
     * @return original return type: 'javax.json.JsonValue'
     */
    getValue?(): javax_json_JsonValue | null;
    /**
     * @return original return type: 'boolean'
     */
    hasNext(): boolean;
    /**
     * @return original return type: 'javax.json.stream.JsonParser$Event'
     */
    next(): javax_json_stream_JsonParser$Event | null;
    /**
     * @return original return type: 'javax.json.stream.JsonLocation'
     */
    getLocation(): javax_json_stream_JsonLocation | null;
    /**
     * @return original return type: 'void'
     */
    close(): void;
    /**
     * @return original return type: 'javax.json.JsonObject'
     */
    getObject?(): javax_json_JsonObject | null;
    /**
     * @return original return type: 'javax.json.JsonArray'
     */
    getArray?(): javax_json_JsonArray | null;
    /**
     * @return original return type: 'void'
     */
    skipArray?(): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getString(): string | null;
    /**
     * @return original return type: 'java.math.BigDecimal'
     */
    getBigDecimal(): java_math_BigDecimal | null;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    getArrayStream?(): java_util_stream_Stream | null;
    /**
     * @return original return type: 'boolean'
     */
    isIntegralNumber(): boolean;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    getObjectStream?(): java_util_stream_Stream | null;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    getValueStream?(): java_util_stream_Stream | null;
    /**
     * @return original return type: 'void'
     */
    skipObject?(): void;
}
/**
 * Create a proxy for the {@link JsonParser} interface.
 * All required methods in {@link JsonParserInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createJsonParserProxy(methods: JsonParserInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<JsonParserInterface>;
declare const JsonParser_base: typeof JsonParserClass;
/**
 * Class javax.json.stream.JsonParser.
 *
 * This actually imports the java class for further use.
 * The class {@link JsonParserClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonParser extends JsonParser_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default JsonParser;
//# sourceMappingURL=JsonParser.d.ts.map