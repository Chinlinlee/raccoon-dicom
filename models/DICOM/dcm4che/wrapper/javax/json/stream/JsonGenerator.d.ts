import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Boolean as java_lang_Boolean } from "./../../../java/lang/Boolean";
import { Long as java_lang_Long } from "./../../../java/lang/Long";
import { Integer as java_lang_Integer } from "./../../../java/lang/Integer";
import { Double as java_lang_Double } from "./../../../java/lang/Double";
import { BigInteger as java_math_BigInteger } from "./../../../java/math/BigInteger";
import { BigDecimal as java_math_BigDecimal } from "./../../../java/math/BigDecimal";
import { JsonValue as javax_json_JsonValue, JsonValueInterface as javax_json_JsonValueInterface } from "./../JsonValue";
/**
 * This class just defines types, you should import {@link JsonGenerator} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonGeneratorClass extends JavaClass {
    /**
     * Original type: 'java.lang.String'
     */
    static readonly PRETTY_PRINTING: string | null;
    /**
     * @return original return type: 'void'
     */
    flush(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    flushSync(): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'boolean'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: string | null, var1: java_lang_Boolean | boolean): Promise<JsonGenerator | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'boolean'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeSync(var0: string | null, var1: java_lang_Boolean | boolean): JsonGenerator | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: java_lang_Long | bigint | number): Promise<JsonGenerator | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeSync(var0: java_lang_Long | bigint | number): JsonGenerator | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: java_lang_Integer | number): Promise<JsonGenerator | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeSync(var0: java_lang_Integer | number): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'double'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: string | null, var1: java_lang_Double | number): Promise<JsonGenerator | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'double'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeSync(var0: string | null, var1: java_lang_Double | number): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'long'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: string | null, var1: java_lang_Long | bigint | number): Promise<JsonGenerator | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'long'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeSync(var0: string | null, var1: java_lang_Long | bigint | number): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: java_math_BigInteger | null): Promise<JsonGenerator | null>;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeSync(var0: java_math_BigInteger | null): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: java_math_BigDecimal | null): Promise<JsonGenerator | null>;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeSync(var0: java_math_BigDecimal | null): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: string | null): Promise<JsonGenerator | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeSync(var0: string | null): JsonGenerator | null;
    /**
     * @param var0 original type: 'javax.json.JsonValue'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: javax_json_JsonValue | JavaInterfaceProxy<javax_json_JsonValueInterface> | null): Promise<JsonGenerator | null>;
    /**
     * @param var0 original type: 'javax.json.JsonValue'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeSync(var0: javax_json_JsonValue | JavaInterfaceProxy<javax_json_JsonValueInterface> | null): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: string | null, var1: string | null): Promise<JsonGenerator | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeSync(var0: string | null, var1: string | null): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'javax.json.JsonValue'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: string | null, var1: javax_json_JsonValue | JavaInterfaceProxy<javax_json_JsonValueInterface> | null): Promise<JsonGenerator | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'javax.json.JsonValue'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeSync(var0: string | null, var1: javax_json_JsonValue | JavaInterfaceProxy<javax_json_JsonValueInterface> | null): JsonGenerator | null;
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: java_lang_Double | number): Promise<JsonGenerator | null>;
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeSync(var0: java_lang_Double | number): JsonGenerator | null;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: java_lang_Boolean | boolean): Promise<JsonGenerator | null>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeSync(var0: java_lang_Boolean | boolean): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: string | null, var1: java_lang_Integer | number): Promise<JsonGenerator | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeSync(var0: string | null, var1: java_lang_Integer | number): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.math.BigDecimal'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: string | null, var1: java_math_BigDecimal | null): Promise<JsonGenerator | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.math.BigDecimal'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeSync(var0: string | null, var1: java_math_BigDecimal | null): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.math.BigInteger'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: string | null, var1: java_math_BigInteger | null): Promise<JsonGenerator | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.math.BigInteger'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeSync(var0: string | null, var1: java_math_BigInteger | null): JsonGenerator | null;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeNull(): Promise<JsonGenerator | null>;
    /**
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeNullSync(): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeNull(var0: string | null): Promise<JsonGenerator | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeNullSync(var0: string | null): JsonGenerator | null;
    /**
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeEnd(): Promise<JsonGenerator | null>;
    /**
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeEndSync(): JsonGenerator | null;
    /**
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeStartObject(): Promise<JsonGenerator | null>;
    /**
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeStartObjectSync(): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeStartObject(var0: string | null): Promise<JsonGenerator | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeStartObjectSync(var0: string | null): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeKey(var0: string | null): Promise<JsonGenerator | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeKeySync(var0: string | null): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeStartArray(var0: string | null): Promise<JsonGenerator | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeStartArraySync(var0: string | null): JsonGenerator | null;
    /**
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeStartArray(): Promise<JsonGenerator | null>;
    /**
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeStartArraySync(): JsonGenerator | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createJsonGeneratorProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface JsonGeneratorInterface {
    /**
     * @return original return type: 'void'
     */
    flush(): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'boolean'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: string | null, var1: java_lang_Boolean | boolean): JsonGenerator | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: java_lang_Long | bigint | number): JsonGenerator | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: java_lang_Integer | number): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'double'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: string | null, var1: java_lang_Double | number): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'long'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: string | null, var1: java_lang_Long | bigint | number): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.math.BigInteger'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: java_math_BigInteger | null): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.math.BigDecimal'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: java_math_BigDecimal | null): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: string | null): JsonGenerator | null;
    /**
     * @param var0 original type: 'javax.json.JsonValue'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: javax_json_JsonValue | JavaInterfaceProxy<javax_json_JsonValueInterface> | null): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: string | null, var1: string | null): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'javax.json.JsonValue'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: string | null, var1: javax_json_JsonValue | JavaInterfaceProxy<javax_json_JsonValueInterface> | null): JsonGenerator | null;
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: java_lang_Double | number): JsonGenerator | null;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: java_lang_Boolean | boolean): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: string | null, var1: java_lang_Integer | number): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.math.BigDecimal'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: string | null, var1: java_math_BigDecimal | null): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.math.BigInteger'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    write(var0: string | null, var1: java_math_BigInteger | null): JsonGenerator | null;
    /**
     * @return original return type: 'void'
     */
    close(): void;
    /**
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeNull(): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeNull(var0: string | null): JsonGenerator | null;
    /**
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeEnd(): JsonGenerator | null;
    /**
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeStartObject(): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeStartObject(var0: string | null): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeKey(var0: string | null): JsonGenerator | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeStartArray(var0: string | null): JsonGenerator | null;
    /**
     * @return original return type: 'javax.json.stream.JsonGenerator'
     */
    writeStartArray(): JsonGenerator | null;
}
/**
 * Create a proxy for the {@link JsonGenerator} interface.
 * All required methods in {@link JsonGeneratorInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createJsonGeneratorProxy(methods: JsonGeneratorInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<JsonGeneratorInterface>;
declare const JsonGenerator_base: typeof JsonGeneratorClass;
/**
 * Class javax.json.stream.JsonGenerator.
 *
 * This actually imports the java class for further use.
 * The class {@link JsonGeneratorClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonGenerator extends JsonGenerator_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default JsonGenerator;
//# sourceMappingURL=JsonGenerator.d.ts.map