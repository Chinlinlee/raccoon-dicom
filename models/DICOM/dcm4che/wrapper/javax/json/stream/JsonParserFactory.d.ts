import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { JsonParser as javax_json_stream_JsonParser } from "./JsonParser";
import { JsonArray as javax_json_JsonArray, JsonArrayInterface as javax_json_JsonArrayInterface } from "./../JsonArray";
import { JsonObject as javax_json_JsonObject, JsonObjectInterface as javax_json_JsonObjectInterface } from "./../JsonObject";
import { InputStream as java_io_InputStream } from "./../../../java/io/InputStream";
import { Charset as java_nio_charset_Charset } from "./../../../java/nio/charset/Charset";
import { Reader as java_io_Reader } from "./../../../java/io/Reader";
import { Map as java_util_Map } from "./../../../java/util/Map";
/**
 * This class just defines types, you should import {@link JsonParserFactory} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonParserFactoryClass extends JavaClass {
    /**
     * @param var0 original type: 'javax.json.JsonArray'
     * @return original return type: 'javax.json.stream.JsonParser'
     */
    createParser(var0: javax_json_JsonArray | JavaInterfaceProxy<javax_json_JsonArrayInterface> | null): Promise<javax_json_stream_JsonParser | null>;
    /**
     * @param var0 original type: 'javax.json.JsonArray'
     * @return original return type: 'javax.json.stream.JsonParser'
     */
    createParserSync(var0: javax_json_JsonArray | JavaInterfaceProxy<javax_json_JsonArrayInterface> | null): javax_json_stream_JsonParser | null;
    /**
     * @param var0 original type: 'javax.json.JsonObject'
     * @return original return type: 'javax.json.stream.JsonParser'
     */
    createParser(var0: javax_json_JsonObject | JavaInterfaceProxy<javax_json_JsonObjectInterface> | null): Promise<javax_json_stream_JsonParser | null>;
    /**
     * @param var0 original type: 'javax.json.JsonObject'
     * @return original return type: 'javax.json.stream.JsonParser'
     */
    createParserSync(var0: javax_json_JsonObject | JavaInterfaceProxy<javax_json_JsonObjectInterface> | null): javax_json_stream_JsonParser | null;
    /**
     * @param var0 original type: 'java.io.InputStream'
     * @param var1 original type: 'java.nio.charset.Charset'
     * @return original return type: 'javax.json.stream.JsonParser'
     */
    createParser(var0: java_io_InputStream | null, var1: java_nio_charset_Charset | null): Promise<javax_json_stream_JsonParser | null>;
    /**
     * @param var0 original type: 'java.io.InputStream'
     * @param var1 original type: 'java.nio.charset.Charset'
     * @return original return type: 'javax.json.stream.JsonParser'
     */
    createParserSync(var0: java_io_InputStream | null, var1: java_nio_charset_Charset | null): javax_json_stream_JsonParser | null;
    /**
     * @param var0 original type: 'java.io.InputStream'
     * @return original return type: 'javax.json.stream.JsonParser'
     */
    createParser(var0: java_io_InputStream | null): Promise<javax_json_stream_JsonParser | null>;
    /**
     * @param var0 original type: 'java.io.InputStream'
     * @return original return type: 'javax.json.stream.JsonParser'
     */
    createParserSync(var0: java_io_InputStream | null): javax_json_stream_JsonParser | null;
    /**
     * @param var0 original type: 'java.io.Reader'
     * @return original return type: 'javax.json.stream.JsonParser'
     */
    createParser(var0: java_io_Reader | null): Promise<javax_json_stream_JsonParser | null>;
    /**
     * @param var0 original type: 'java.io.Reader'
     * @return original return type: 'javax.json.stream.JsonParser'
     */
    createParserSync(var0: java_io_Reader | null): javax_json_stream_JsonParser | null;
    /**
     * @return original return type: 'java.util.Map'
     */
    getConfigInUse(): Promise<java_util_Map | null>;
    /**
     * @return original return type: 'java.util.Map'
     */
    getConfigInUseSync(): java_util_Map | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createJsonParserFactoryProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface JsonParserFactoryInterface {
    /**
     * @param var0 original type: 'javax.json.JsonArray'
     * @return original return type: 'javax.json.stream.JsonParser'
     */
    createParser(var0: javax_json_JsonArray | JavaInterfaceProxy<javax_json_JsonArrayInterface> | null): javax_json_stream_JsonParser | null;
    /**
     * @param var0 original type: 'javax.json.JsonObject'
     * @return original return type: 'javax.json.stream.JsonParser'
     */
    createParser(var0: javax_json_JsonObject | JavaInterfaceProxy<javax_json_JsonObjectInterface> | null): javax_json_stream_JsonParser | null;
    /**
     * @param var0 original type: 'java.io.InputStream'
     * @param var1 original type: 'java.nio.charset.Charset'
     * @return original return type: 'javax.json.stream.JsonParser'
     */
    createParser(var0: java_io_InputStream | null, var1: java_nio_charset_Charset | null): javax_json_stream_JsonParser | null;
    /**
     * @param var0 original type: 'java.io.InputStream'
     * @return original return type: 'javax.json.stream.JsonParser'
     */
    createParser(var0: java_io_InputStream | null): javax_json_stream_JsonParser | null;
    /**
     * @param var0 original type: 'java.io.Reader'
     * @return original return type: 'javax.json.stream.JsonParser'
     */
    createParser(var0: java_io_Reader | null): javax_json_stream_JsonParser | null;
    /**
     * @return original return type: 'java.util.Map'
     */
    getConfigInUse(): java_util_Map | null;
}
/**
 * Create a proxy for the {@link JsonParserFactory} interface.
 * All required methods in {@link JsonParserFactoryInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createJsonParserFactoryProxy(methods: JsonParserFactoryInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<JsonParserFactoryInterface>;
declare const JsonParserFactory_base: typeof JsonParserFactoryClass;
/**
 * Class javax.json.stream.JsonParserFactory.
 *
 * This actually imports the java class for further use.
 * The class {@link JsonParserFactoryClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonParserFactory extends JsonParserFactory_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default JsonParserFactory;
//# sourceMappingURL=JsonParserFactory.d.ts.map