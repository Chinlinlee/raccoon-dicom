import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Map as java_util_Map, MapInterface as java_util_MapInterface } from "./../../java/util/Map";
import { JsonArrayBuilder as javax_json_JsonArrayBuilder } from "./JsonArrayBuilder";
import { JsonArray as javax_json_JsonArray, JsonArrayInterface as javax_json_JsonArrayInterface } from "./JsonArray";
import { Collection as java_util_Collection, CollectionInterface as java_util_CollectionInterface } from "./../../java/util/Collection";
import { JsonObjectBuilder as javax_json_JsonObjectBuilder } from "./JsonObjectBuilder";
import { JsonObject as javax_json_JsonObject, JsonObjectInterface as javax_json_JsonObjectInterface } from "./JsonObject";
/**
 * This class just defines types, you should import {@link JsonBuilderFactory} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonBuilderFactoryClass extends JavaClass {
    /**
     * @return original return type: 'java.util.Map'
     */
    getConfigInUse(): Promise<java_util_Map | null>;
    /**
     * @return original return type: 'java.util.Map'
     */
    getConfigInUseSync(): java_util_Map | null;
    /**
     * @return original return type: 'javax.json.JsonArrayBuilder'
     */
    createArrayBuilder(): Promise<javax_json_JsonArrayBuilder | null>;
    /**
     * @return original return type: 'javax.json.JsonArrayBuilder'
     */
    createArrayBuilderSync(): javax_json_JsonArrayBuilder | null;
    /**
     * @param var0 original type: 'javax.json.JsonArray'
     * @return original return type: 'javax.json.JsonArrayBuilder'
     */
    createArrayBuilder(var0: javax_json_JsonArray | JavaInterfaceProxy<javax_json_JsonArrayInterface> | null): Promise<javax_json_JsonArrayBuilder | null>;
    /**
     * @param var0 original type: 'javax.json.JsonArray'
     * @return original return type: 'javax.json.JsonArrayBuilder'
     */
    createArrayBuilderSync(var0: javax_json_JsonArray | JavaInterfaceProxy<javax_json_JsonArrayInterface> | null): javax_json_JsonArrayBuilder | null;
    /**
     * @param var0 original type: 'java.util.Collection'
     * @return original return type: 'javax.json.JsonArrayBuilder'
     */
    createArrayBuilder(var0: java_util_Collection | JavaInterfaceProxy<java_util_CollectionInterface> | null): Promise<javax_json_JsonArrayBuilder | null>;
    /**
     * @param var0 original type: 'java.util.Collection'
     * @return original return type: 'javax.json.JsonArrayBuilder'
     */
    createArrayBuilderSync(var0: java_util_Collection | JavaInterfaceProxy<java_util_CollectionInterface> | null): javax_json_JsonArrayBuilder | null;
    /**
     * @param var0 original type: 'java.util.Map'
     * @return original return type: 'javax.json.JsonObjectBuilder'
     */
    createObjectBuilder(var0: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null): Promise<javax_json_JsonObjectBuilder | null>;
    /**
     * @param var0 original type: 'java.util.Map'
     * @return original return type: 'javax.json.JsonObjectBuilder'
     */
    createObjectBuilderSync(var0: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null): javax_json_JsonObjectBuilder | null;
    /**
     * @param var0 original type: 'javax.json.JsonObject'
     * @return original return type: 'javax.json.JsonObjectBuilder'
     */
    createObjectBuilder(var0: javax_json_JsonObject | JavaInterfaceProxy<javax_json_JsonObjectInterface> | null): Promise<javax_json_JsonObjectBuilder | null>;
    /**
     * @param var0 original type: 'javax.json.JsonObject'
     * @return original return type: 'javax.json.JsonObjectBuilder'
     */
    createObjectBuilderSync(var0: javax_json_JsonObject | JavaInterfaceProxy<javax_json_JsonObjectInterface> | null): javax_json_JsonObjectBuilder | null;
    /**
     * @return original return type: 'javax.json.JsonObjectBuilder'
     */
    createObjectBuilder(): Promise<javax_json_JsonObjectBuilder | null>;
    /**
     * @return original return type: 'javax.json.JsonObjectBuilder'
     */
    createObjectBuilderSync(): javax_json_JsonObjectBuilder | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createJsonBuilderFactoryProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface JsonBuilderFactoryInterface {
    /**
     * @return original return type: 'java.util.Map'
     */
    getConfigInUse(): java_util_Map | null;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @return original return type: 'javax.json.JsonArrayBuilder'
     */
    createArrayBuilder?(): javax_json_JsonArrayBuilder | null;
    /**
     * @param var0 original type: 'javax.json.JsonArray'
     * @return original return type: 'javax.json.JsonArrayBuilder'
     */
    createArrayBuilder?(var0: javax_json_JsonArray | JavaInterfaceProxy<javax_json_JsonArrayInterface> | null): javax_json_JsonArrayBuilder | null;
    /**
     * @param var0 original type: 'java.util.Collection'
     * @return original return type: 'javax.json.JsonArrayBuilder'
     */
    createArrayBuilder?(var0: java_util_Collection | JavaInterfaceProxy<java_util_CollectionInterface> | null): javax_json_JsonArrayBuilder | null;
    /**
     * @param var0 original type: 'java.util.Map'
     * @return original return type: 'javax.json.JsonObjectBuilder'
     */
    createObjectBuilder?(var0: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null): javax_json_JsonObjectBuilder | null;
    /**
     * @param var0 original type: 'javax.json.JsonObject'
     * @return original return type: 'javax.json.JsonObjectBuilder'
     */
    createObjectBuilder?(var0: javax_json_JsonObject | JavaInterfaceProxy<javax_json_JsonObjectInterface> | null): javax_json_JsonObjectBuilder | null;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @return original return type: 'javax.json.JsonObjectBuilder'
     */
    createObjectBuilder?(): javax_json_JsonObjectBuilder | null;
}
/**
 * Create a proxy for the {@link JsonBuilderFactory} interface.
 * All required methods in {@link JsonBuilderFactoryInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createJsonBuilderFactoryProxy(methods: JsonBuilderFactoryInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<JsonBuilderFactoryInterface>;
declare const JsonBuilderFactory_base: typeof JsonBuilderFactoryClass;
/**
 * Class javax.json.JsonBuilderFactory.
 *
 * This actually imports the java class for further use.
 * The class {@link JsonBuilderFactoryClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonBuilderFactory extends JsonBuilderFactory_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default JsonBuilderFactory;
//# sourceMappingURL=JsonBuilderFactory.d.ts.map