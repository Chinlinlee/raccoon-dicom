import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { JsonObject as javax_json_JsonObject } from "./JsonObject";
import { JsonStructure as javax_json_JsonStructure } from "./JsonStructure";
import { JsonValue as javax_json_JsonValue } from "./JsonValue";
import { JsonArray as javax_json_JsonArray } from "./JsonArray";
/**
 * This class just defines types, you should import {@link JsonReader} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonReaderClass extends JavaClass {
    /**
     * @return original return type: 'javax.json.JsonObject'
     */
    readObject(): Promise<javax_json_JsonObject | null>;
    /**
     * @return original return type: 'javax.json.JsonObject'
     */
    readObjectSync(): javax_json_JsonObject | null;
    /**
     * @return original return type: 'javax.json.JsonStructure'
     */
    read(): Promise<javax_json_JsonStructure | null>;
    /**
     * @return original return type: 'javax.json.JsonStructure'
     */
    readSync(): javax_json_JsonStructure | null;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @return original return type: 'javax.json.JsonValue'
     */
    readValue(): Promise<javax_json_JsonValue | null>;
    /**
     * @return original return type: 'javax.json.JsonValue'
     */
    readValueSync(): javax_json_JsonValue | null;
    /**
     * @return original return type: 'javax.json.JsonArray'
     */
    readArray(): Promise<javax_json_JsonArray | null>;
    /**
     * @return original return type: 'javax.json.JsonArray'
     */
    readArraySync(): javax_json_JsonArray | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createJsonReaderProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface JsonReaderInterface {
    /**
     * @return original return type: 'javax.json.JsonObject'
     */
    readObject(): javax_json_JsonObject | null;
    /**
     * @return original return type: 'javax.json.JsonStructure'
     */
    read(): javax_json_JsonStructure | null;
    /**
     * @return original return type: 'void'
     */
    close(): void;
    /**
     * @return original return type: 'javax.json.JsonValue'
     */
    readValue?(): javax_json_JsonValue | null;
    /**
     * @return original return type: 'javax.json.JsonArray'
     */
    readArray(): javax_json_JsonArray | null;
}
/**
 * Create a proxy for the {@link JsonReader} interface.
 * All required methods in {@link JsonReaderInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createJsonReaderProxy(methods: JsonReaderInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<JsonReaderInterface>;
declare const JsonReader_base: typeof JsonReaderClass;
/**
 * Class javax.json.JsonReader.
 *
 * This actually imports the java class for further use.
 * The class {@link JsonReaderClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonReader extends JsonReader_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default JsonReader;
//# sourceMappingURL=JsonReader.d.ts.map