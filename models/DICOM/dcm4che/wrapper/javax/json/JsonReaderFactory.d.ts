import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Map as java_util_Map } from "./../../java/util/Map";
import { JsonReader as javax_json_JsonReader } from "./JsonReader";
import { Reader as java_io_Reader } from "./../../java/io/Reader";
import { InputStream as java_io_InputStream } from "./../../java/io/InputStream";
import { Charset as java_nio_charset_Charset } from "./../../java/nio/charset/Charset";
/**
 * This class just defines types, you should import {@link JsonReaderFactory} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonReaderFactoryClass extends JavaClass {
    /**
     * @return original return type: 'java.util.Map'
     */
    getConfigInUse(): Promise<java_util_Map | null>;
    /**
     * @return original return type: 'java.util.Map'
     */
    getConfigInUseSync(): java_util_Map | null;
    /**
     * @param var0 original type: 'java.io.Reader'
     * @return original return type: 'javax.json.JsonReader'
     */
    createReader(var0: java_io_Reader | null): Promise<javax_json_JsonReader | null>;
    /**
     * @param var0 original type: 'java.io.Reader'
     * @return original return type: 'javax.json.JsonReader'
     */
    createReaderSync(var0: java_io_Reader | null): javax_json_JsonReader | null;
    /**
     * @param var0 original type: 'java.io.InputStream'
     * @param var1 original type: 'java.nio.charset.Charset'
     * @return original return type: 'javax.json.JsonReader'
     */
    createReader(var0: java_io_InputStream | null, var1: java_nio_charset_Charset | null): Promise<javax_json_JsonReader | null>;
    /**
     * @param var0 original type: 'java.io.InputStream'
     * @param var1 original type: 'java.nio.charset.Charset'
     * @return original return type: 'javax.json.JsonReader'
     */
    createReaderSync(var0: java_io_InputStream | null, var1: java_nio_charset_Charset | null): javax_json_JsonReader | null;
    /**
     * @param var0 original type: 'java.io.InputStream'
     * @return original return type: 'javax.json.JsonReader'
     */
    createReader(var0: java_io_InputStream | null): Promise<javax_json_JsonReader | null>;
    /**
     * @param var0 original type: 'java.io.InputStream'
     * @return original return type: 'javax.json.JsonReader'
     */
    createReaderSync(var0: java_io_InputStream | null): javax_json_JsonReader | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createJsonReaderFactoryProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface JsonReaderFactoryInterface {
    /**
     * @return original return type: 'java.util.Map'
     */
    getConfigInUse(): java_util_Map | null;
    /**
     * @param var0 original type: 'java.io.Reader'
     * @return original return type: 'javax.json.JsonReader'
     */
    createReader(var0: java_io_Reader | null): javax_json_JsonReader | null;
    /**
     * @param var0 original type: 'java.io.InputStream'
     * @param var1 original type: 'java.nio.charset.Charset'
     * @return original return type: 'javax.json.JsonReader'
     */
    createReader(var0: java_io_InputStream | null, var1: java_nio_charset_Charset | null): javax_json_JsonReader | null;
    /**
     * @param var0 original type: 'java.io.InputStream'
     * @return original return type: 'javax.json.JsonReader'
     */
    createReader(var0: java_io_InputStream | null): javax_json_JsonReader | null;
}
/**
 * Create a proxy for the {@link JsonReaderFactory} interface.
 * All required methods in {@link JsonReaderFactoryInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createJsonReaderFactoryProxy(methods: JsonReaderFactoryInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<JsonReaderFactoryInterface>;
declare const JsonReaderFactory_base: typeof JsonReaderFactoryClass;
/**
 * Class javax.json.JsonReaderFactory.
 *
 * This actually imports the java class for further use.
 * The class {@link JsonReaderFactoryClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonReaderFactory extends JsonReaderFactory_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default JsonReaderFactory;
//# sourceMappingURL=JsonReaderFactory.d.ts.map