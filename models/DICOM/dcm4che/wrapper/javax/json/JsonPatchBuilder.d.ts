import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Boolean as java_lang_Boolean } from "./../../java/lang/Boolean";
import { Integer as java_lang_Integer } from "./../../java/lang/Integer";
import { JsonValue as javax_json_JsonValue, JsonValueInterface as javax_json_JsonValueInterface } from "./JsonValue";
import { JsonPatch as javax_json_JsonPatch } from "./JsonPatch";
/**
 * This class just defines types, you should import {@link JsonPatchBuilder} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonPatchBuilderClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'boolean'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    add(var0: string | null, var1: java_lang_Boolean | boolean): Promise<JsonPatchBuilder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'boolean'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    addSync(var0: string | null, var1: java_lang_Boolean | boolean): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    add(var0: string | null, var1: java_lang_Integer | number): Promise<JsonPatchBuilder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    addSync(var0: string | null, var1: java_lang_Integer | number): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    add(var0: string | null, var1: string | null): Promise<JsonPatchBuilder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    addSync(var0: string | null, var1: string | null): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'javax.json.JsonValue'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    add(var0: string | null, var1: javax_json_JsonValue | JavaInterfaceProxy<javax_json_JsonValueInterface> | null): Promise<JsonPatchBuilder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'javax.json.JsonValue'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    addSync(var0: string | null, var1: javax_json_JsonValue | JavaInterfaceProxy<javax_json_JsonValueInterface> | null): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    remove(var0: string | null): Promise<JsonPatchBuilder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    removeSync(var0: string | null): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'javax.json.JsonValue'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    test(var0: string | null, var1: javax_json_JsonValue | JavaInterfaceProxy<javax_json_JsonValueInterface> | null): Promise<JsonPatchBuilder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'javax.json.JsonValue'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    testSync(var0: string | null, var1: javax_json_JsonValue | JavaInterfaceProxy<javax_json_JsonValueInterface> | null): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    test(var0: string | null, var1: string | null): Promise<JsonPatchBuilder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    testSync(var0: string | null, var1: string | null): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    test(var0: string | null, var1: java_lang_Integer | number): Promise<JsonPatchBuilder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    testSync(var0: string | null, var1: java_lang_Integer | number): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'boolean'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    test(var0: string | null, var1: java_lang_Boolean | boolean): Promise<JsonPatchBuilder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'boolean'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    testSync(var0: string | null, var1: java_lang_Boolean | boolean): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    replace(var0: string | null, var1: string | null): Promise<JsonPatchBuilder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    replaceSync(var0: string | null, var1: string | null): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'javax.json.JsonValue'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    replace(var0: string | null, var1: javax_json_JsonValue | JavaInterfaceProxy<javax_json_JsonValueInterface> | null): Promise<JsonPatchBuilder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'javax.json.JsonValue'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    replaceSync(var0: string | null, var1: javax_json_JsonValue | JavaInterfaceProxy<javax_json_JsonValueInterface> | null): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'boolean'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    replace(var0: string | null, var1: java_lang_Boolean | boolean): Promise<JsonPatchBuilder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'boolean'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    replaceSync(var0: string | null, var1: java_lang_Boolean | boolean): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    replace(var0: string | null, var1: java_lang_Integer | number): Promise<JsonPatchBuilder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    replaceSync(var0: string | null, var1: java_lang_Integer | number): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    copy(var0: string | null, var1: string | null): Promise<JsonPatchBuilder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    copySync(var0: string | null, var1: string | null): JsonPatchBuilder | null;
    /**
     * @return original return type: 'javax.json.JsonPatch'
     */
    build(): Promise<javax_json_JsonPatch | null>;
    /**
     * @return original return type: 'javax.json.JsonPatch'
     */
    buildSync(): javax_json_JsonPatch | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    move(var0: string | null, var1: string | null): Promise<JsonPatchBuilder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    moveSync(var0: string | null, var1: string | null): JsonPatchBuilder | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createJsonPatchBuilderProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface JsonPatchBuilderInterface {
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'boolean'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    add(var0: string | null, var1: java_lang_Boolean | boolean): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    add(var0: string | null, var1: java_lang_Integer | number): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    add(var0: string | null, var1: string | null): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'javax.json.JsonValue'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    add(var0: string | null, var1: javax_json_JsonValue | JavaInterfaceProxy<javax_json_JsonValueInterface> | null): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    remove(var0: string | null): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'javax.json.JsonValue'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    test(var0: string | null, var1: javax_json_JsonValue | JavaInterfaceProxy<javax_json_JsonValueInterface> | null): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    test(var0: string | null, var1: string | null): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    test(var0: string | null, var1: java_lang_Integer | number): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'boolean'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    test(var0: string | null, var1: java_lang_Boolean | boolean): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    replace(var0: string | null, var1: string | null): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'javax.json.JsonValue'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    replace(var0: string | null, var1: javax_json_JsonValue | JavaInterfaceProxy<javax_json_JsonValueInterface> | null): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'boolean'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    replace(var0: string | null, var1: java_lang_Boolean | boolean): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    replace(var0: string | null, var1: java_lang_Integer | number): JsonPatchBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    copy(var0: string | null, var1: string | null): JsonPatchBuilder | null;
    /**
     * @return original return type: 'javax.json.JsonPatch'
     */
    build(): javax_json_JsonPatch | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'javax.json.JsonPatchBuilder'
     */
    move(var0: string | null, var1: string | null): JsonPatchBuilder | null;
}
/**
 * Create a proxy for the {@link JsonPatchBuilder} interface.
 * All required methods in {@link JsonPatchBuilderInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createJsonPatchBuilderProxy(methods: JsonPatchBuilderInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<JsonPatchBuilderInterface>;
declare const JsonPatchBuilder_base: typeof JsonPatchBuilderClass;
/**
 * Class javax.json.JsonPatchBuilder.
 *
 * This actually imports the java class for further use.
 * The class {@link JsonPatchBuilderClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonPatchBuilder extends JsonPatchBuilder_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default JsonPatchBuilder;
//# sourceMappingURL=JsonPatchBuilder.d.ts.map